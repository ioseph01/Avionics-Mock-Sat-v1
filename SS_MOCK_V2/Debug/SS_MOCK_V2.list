
SS_MOCK_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009490  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009640  08009640  0000a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800968c  0800968c  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800968c  0800968c  0000a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009694  08009694  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009694  08009694  0000a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800969c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000790  2000000c  080096a8  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080096a8  0000b79c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f984  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae1  00000000  00000000  0002a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001672  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a00  00000000  00000000  000317aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000215a6  00000000  00000000  000361aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f6c5  00000000  00000000  00057750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d20  00000000  00000000  00176e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009628 	.word	0x08009628

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08009628 	.word	0x08009628

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	@ 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2f>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007c4:	bf24      	itt	cs
 80007c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ce:	d90d      	bls.n	80007ec <__aeabi_d2f+0x30>
 80007d0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007f0:	d121      	bne.n	8000836 <__aeabi_d2f+0x7a>
 80007f2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007f6:	bfbc      	itt	lt
 80007f8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007fc:	4770      	bxlt	lr
 80007fe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000802:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000806:	f1c2 0218 	rsb	r2, r2, #24
 800080a:	f1c2 0c20 	rsb	ip, r2, #32
 800080e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	bf18      	it	ne
 8000818:	f040 0001 	orrne.w	r0, r0, #1
 800081c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000824:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000828:	ea40 000c 	orr.w	r0, r0, ip
 800082c:	fa23 f302 	lsr.w	r3, r3, r2
 8000830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000834:	e7cc      	b.n	80007d0 <__aeabi_d2f+0x14>
 8000836:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800083a:	d107      	bne.n	800084c <__aeabi_d2f+0x90>
 800083c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000840:	bf1e      	ittt	ne
 8000842:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000846:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800084a:	4770      	bxne	lr
 800084c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000850:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000854:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <__aeabi_uldivmod>:
 800085c:	b953      	cbnz	r3, 8000874 <__aeabi_uldivmod+0x18>
 800085e:	b94a      	cbnz	r2, 8000874 <__aeabi_uldivmod+0x18>
 8000860:	2900      	cmp	r1, #0
 8000862:	bf08      	it	eq
 8000864:	2800      	cmpeq	r0, #0
 8000866:	bf1c      	itt	ne
 8000868:	f04f 31ff 	movne.w	r1, #4294967295
 800086c:	f04f 30ff 	movne.w	r0, #4294967295
 8000870:	f000 b988 	b.w	8000b84 <__aeabi_idiv0>
 8000874:	f1ad 0c08 	sub.w	ip, sp, #8
 8000878:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800087c:	f000 f806 	bl	800088c <__udivmoddi4>
 8000880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr

0800088c <__udivmoddi4>:
 800088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000890:	9d08      	ldr	r5, [sp, #32]
 8000892:	468e      	mov	lr, r1
 8000894:	4604      	mov	r4, r0
 8000896:	4688      	mov	r8, r1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d14a      	bne.n	8000932 <__udivmoddi4+0xa6>
 800089c:	428a      	cmp	r2, r1
 800089e:	4617      	mov	r7, r2
 80008a0:	d962      	bls.n	8000968 <__udivmoddi4+0xdc>
 80008a2:	fab2 f682 	clz	r6, r2
 80008a6:	b14e      	cbz	r6, 80008bc <__udivmoddi4+0x30>
 80008a8:	f1c6 0320 	rsb	r3, r6, #32
 80008ac:	fa01 f806 	lsl.w	r8, r1, r6
 80008b0:	fa20 f303 	lsr.w	r3, r0, r3
 80008b4:	40b7      	lsls	r7, r6
 80008b6:	ea43 0808 	orr.w	r8, r3, r8
 80008ba:	40b4      	lsls	r4, r6
 80008bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008c0:	fa1f fc87 	uxth.w	ip, r7
 80008c4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008c8:	0c23      	lsrs	r3, r4, #16
 80008ca:	fb0e 8811 	mls	r8, lr, r1, r8
 80008ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008d2:	fb01 f20c 	mul.w	r2, r1, ip
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0x62>
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	f101 30ff 	add.w	r0, r1, #4294967295
 80008e0:	f080 80ea 	bcs.w	8000ab8 <__udivmoddi4+0x22c>
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f240 80e7 	bls.w	8000ab8 <__udivmoddi4+0x22c>
 80008ea:	3902      	subs	r1, #2
 80008ec:	443b      	add	r3, r7
 80008ee:	1a9a      	subs	r2, r3, r2
 80008f0:	b2a3      	uxth	r3, r4
 80008f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008fe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000902:	459c      	cmp	ip, r3
 8000904:	d909      	bls.n	800091a <__udivmoddi4+0x8e>
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295
 800090c:	f080 80d6 	bcs.w	8000abc <__udivmoddi4+0x230>
 8000910:	459c      	cmp	ip, r3
 8000912:	f240 80d3 	bls.w	8000abc <__udivmoddi4+0x230>
 8000916:	443b      	add	r3, r7
 8000918:	3802      	subs	r0, #2
 800091a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800091e:	eba3 030c 	sub.w	r3, r3, ip
 8000922:	2100      	movs	r1, #0
 8000924:	b11d      	cbz	r5, 800092e <__udivmoddi4+0xa2>
 8000926:	40f3      	lsrs	r3, r6
 8000928:	2200      	movs	r2, #0
 800092a:	e9c5 3200 	strd	r3, r2, [r5]
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	428b      	cmp	r3, r1
 8000934:	d905      	bls.n	8000942 <__udivmoddi4+0xb6>
 8000936:	b10d      	cbz	r5, 800093c <__udivmoddi4+0xb0>
 8000938:	e9c5 0100 	strd	r0, r1, [r5]
 800093c:	2100      	movs	r1, #0
 800093e:	4608      	mov	r0, r1
 8000940:	e7f5      	b.n	800092e <__udivmoddi4+0xa2>
 8000942:	fab3 f183 	clz	r1, r3
 8000946:	2900      	cmp	r1, #0
 8000948:	d146      	bne.n	80009d8 <__udivmoddi4+0x14c>
 800094a:	4573      	cmp	r3, lr
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0xc8>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 8105 	bhi.w	8000b5e <__udivmoddi4+0x2d2>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb6e 0203 	sbc.w	r2, lr, r3
 800095a:	2001      	movs	r0, #1
 800095c:	4690      	mov	r8, r2
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0e5      	beq.n	800092e <__udivmoddi4+0xa2>
 8000962:	e9c5 4800 	strd	r4, r8, [r5]
 8000966:	e7e2      	b.n	800092e <__udivmoddi4+0xa2>
 8000968:	2a00      	cmp	r2, #0
 800096a:	f000 8090 	beq.w	8000a8e <__udivmoddi4+0x202>
 800096e:	fab2 f682 	clz	r6, r2
 8000972:	2e00      	cmp	r6, #0
 8000974:	f040 80a4 	bne.w	8000ac0 <__udivmoddi4+0x234>
 8000978:	1a8a      	subs	r2, r1, r2
 800097a:	0c03      	lsrs	r3, r0, #16
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	b280      	uxth	r0, r0
 8000982:	b2bc      	uxth	r4, r7
 8000984:	2101      	movs	r1, #1
 8000986:	fbb2 fcfe 	udiv	ip, r2, lr
 800098a:	fb0e 221c 	mls	r2, lr, ip, r2
 800098e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000992:	fb04 f20c 	mul.w	r2, r4, ip
 8000996:	429a      	cmp	r2, r3
 8000998:	d907      	bls.n	80009aa <__udivmoddi4+0x11e>
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009a0:	d202      	bcs.n	80009a8 <__udivmoddi4+0x11c>
 80009a2:	429a      	cmp	r2, r3
 80009a4:	f200 80e0 	bhi.w	8000b68 <__udivmoddi4+0x2dc>
 80009a8:	46c4      	mov	ip, r8
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	fbb3 f2fe 	udiv	r2, r3, lr
 80009b0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009b4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009b8:	fb02 f404 	mul.w	r4, r2, r4
 80009bc:	429c      	cmp	r4, r3
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0x144>
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x142>
 80009c8:	429c      	cmp	r4, r3
 80009ca:	f200 80ca 	bhi.w	8000b62 <__udivmoddi4+0x2d6>
 80009ce:	4602      	mov	r2, r0
 80009d0:	1b1b      	subs	r3, r3, r4
 80009d2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0x98>
 80009d8:	f1c1 0620 	rsb	r6, r1, #32
 80009dc:	408b      	lsls	r3, r1
 80009de:	fa22 f706 	lsr.w	r7, r2, r6
 80009e2:	431f      	orrs	r7, r3
 80009e4:	fa0e f401 	lsl.w	r4, lr, r1
 80009e8:	fa20 f306 	lsr.w	r3, r0, r6
 80009ec:	fa2e fe06 	lsr.w	lr, lr, r6
 80009f0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009f4:	4323      	orrs	r3, r4
 80009f6:	fa00 f801 	lsl.w	r8, r0, r1
 80009fa:	fa1f fc87 	uxth.w	ip, r7
 80009fe:	fbbe f0f9 	udiv	r0, lr, r9
 8000a02:	0c1c      	lsrs	r4, r3, #16
 8000a04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a10:	45a6      	cmp	lr, r4
 8000a12:	fa02 f201 	lsl.w	r2, r2, r1
 8000a16:	d909      	bls.n	8000a2c <__udivmoddi4+0x1a0>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a1e:	f080 809c 	bcs.w	8000b5a <__udivmoddi4+0x2ce>
 8000a22:	45a6      	cmp	lr, r4
 8000a24:	f240 8099 	bls.w	8000b5a <__udivmoddi4+0x2ce>
 8000a28:	3802      	subs	r0, #2
 8000a2a:	443c      	add	r4, r7
 8000a2c:	eba4 040e 	sub.w	r4, r4, lr
 8000a30:	fa1f fe83 	uxth.w	lr, r3
 8000a34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a38:	fb09 4413 	mls	r4, r9, r3, r4
 8000a3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a44:	45a4      	cmp	ip, r4
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x1ce>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a4e:	f080 8082 	bcs.w	8000b56 <__udivmoddi4+0x2ca>
 8000a52:	45a4      	cmp	ip, r4
 8000a54:	d97f      	bls.n	8000b56 <__udivmoddi4+0x2ca>
 8000a56:	3b02      	subs	r3, #2
 8000a58:	443c      	add	r4, r7
 8000a5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a5e:	eba4 040c 	sub.w	r4, r4, ip
 8000a62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a66:	4564      	cmp	r4, ip
 8000a68:	4673      	mov	r3, lr
 8000a6a:	46e1      	mov	r9, ip
 8000a6c:	d362      	bcc.n	8000b34 <__udivmoddi4+0x2a8>
 8000a6e:	d05f      	beq.n	8000b30 <__udivmoddi4+0x2a4>
 8000a70:	b15d      	cbz	r5, 8000a8a <__udivmoddi4+0x1fe>
 8000a72:	ebb8 0203 	subs.w	r2, r8, r3
 8000a76:	eb64 0409 	sbc.w	r4, r4, r9
 8000a7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a82:	431e      	orrs	r6, r3
 8000a84:	40cc      	lsrs	r4, r1
 8000a86:	e9c5 6400 	strd	r6, r4, [r5]
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	e74f      	b.n	800092e <__udivmoddi4+0xa2>
 8000a8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a92:	0c01      	lsrs	r1, r0, #16
 8000a94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a98:	b280      	uxth	r0, r0
 8000a9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	463c      	mov	r4, r7
 8000aa4:	46b8      	mov	r8, r7
 8000aa6:	46be      	mov	lr, r7
 8000aa8:	2620      	movs	r6, #32
 8000aaa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aae:	eba2 0208 	sub.w	r2, r2, r8
 8000ab2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ab6:	e766      	b.n	8000986 <__udivmoddi4+0xfa>
 8000ab8:	4601      	mov	r1, r0
 8000aba:	e718      	b.n	80008ee <__udivmoddi4+0x62>
 8000abc:	4610      	mov	r0, r2
 8000abe:	e72c      	b.n	800091a <__udivmoddi4+0x8e>
 8000ac0:	f1c6 0220 	rsb	r2, r6, #32
 8000ac4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ac8:	40b7      	lsls	r7, r6
 8000aca:	40b1      	lsls	r1, r6
 8000acc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ada:	b2bc      	uxth	r4, r7
 8000adc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae6:	fb08 f904 	mul.w	r9, r8, r4
 8000aea:	40b0      	lsls	r0, r6
 8000aec:	4589      	cmp	r9, r1
 8000aee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000af2:	b280      	uxth	r0, r0
 8000af4:	d93e      	bls.n	8000b74 <__udivmoddi4+0x2e8>
 8000af6:	1879      	adds	r1, r7, r1
 8000af8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000afc:	d201      	bcs.n	8000b02 <__udivmoddi4+0x276>
 8000afe:	4589      	cmp	r9, r1
 8000b00:	d81f      	bhi.n	8000b42 <__udivmoddi4+0x2b6>
 8000b02:	eba1 0109 	sub.w	r1, r1, r9
 8000b06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0a:	fb09 f804 	mul.w	r8, r9, r4
 8000b0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b12:	b292      	uxth	r2, r2
 8000b14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b18:	4542      	cmp	r2, r8
 8000b1a:	d229      	bcs.n	8000b70 <__udivmoddi4+0x2e4>
 8000b1c:	18ba      	adds	r2, r7, r2
 8000b1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b22:	d2c4      	bcs.n	8000aae <__udivmoddi4+0x222>
 8000b24:	4542      	cmp	r2, r8
 8000b26:	d2c2      	bcs.n	8000aae <__udivmoddi4+0x222>
 8000b28:	f1a9 0102 	sub.w	r1, r9, #2
 8000b2c:	443a      	add	r2, r7
 8000b2e:	e7be      	b.n	8000aae <__udivmoddi4+0x222>
 8000b30:	45f0      	cmp	r8, lr
 8000b32:	d29d      	bcs.n	8000a70 <__udivmoddi4+0x1e4>
 8000b34:	ebbe 0302 	subs.w	r3, lr, r2
 8000b38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	46e1      	mov	r9, ip
 8000b40:	e796      	b.n	8000a70 <__udivmoddi4+0x1e4>
 8000b42:	eba7 0909 	sub.w	r9, r7, r9
 8000b46:	4449      	add	r1, r9
 8000b48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b50:	fb09 f804 	mul.w	r8, r9, r4
 8000b54:	e7db      	b.n	8000b0e <__udivmoddi4+0x282>
 8000b56:	4673      	mov	r3, lr
 8000b58:	e77f      	b.n	8000a5a <__udivmoddi4+0x1ce>
 8000b5a:	4650      	mov	r0, sl
 8000b5c:	e766      	b.n	8000a2c <__udivmoddi4+0x1a0>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e6fd      	b.n	800095e <__udivmoddi4+0xd2>
 8000b62:	443b      	add	r3, r7
 8000b64:	3a02      	subs	r2, #2
 8000b66:	e733      	b.n	80009d0 <__udivmoddi4+0x144>
 8000b68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b6c:	443b      	add	r3, r7
 8000b6e:	e71c      	b.n	80009aa <__udivmoddi4+0x11e>
 8000b70:	4649      	mov	r1, r9
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x222>
 8000b74:	eba1 0109 	sub.w	r1, r1, r9
 8000b78:	46c4      	mov	ip, r8
 8000b7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b7e:	fb09 f804 	mul.w	r8, r9, r4
 8000b82:	e7c4      	b.n	8000b0e <__udivmoddi4+0x282>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <MCP_9808_Init>:


static I2C_HandleTypeDef * MCP_9808_I2C_HANDLE;


uint8_t MCP_9808_Init(I2C_HandleTypeDef * i2cInstance){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	MCP_9808_I2C_HANDLE = i2cInstance;
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <MCP_9808_Init+0x3c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef i2cStatus;

	uint16_t deviceID = 0x0000;
 8000b96:	2300      	movs	r3, #0
 8000b98:	81bb      	strh	r3, [r7, #12]

	i2cStatus = MCP_9808_RegRead16(MCP_9808_REG_MANUF_ID, &deviceID);  // use 16-bit read
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2006      	movs	r0, #6
 8000ba2:	f000 f8a5 	bl	8000cf0 <MCP_9808_RegRead16>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]

	if ((i2cStatus != HAL_OK) || (deviceID != 0x0054)){
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <MCP_9808_Init+0x2e>
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	2b54      	cmp	r3, #84	@ 0x54
 8000bb4:	d001      	beq.n	8000bba <MCP_9808_Init+0x32>

		return 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e000      	b.n	8000bbc <MCP_9808_Init+0x34>
	}

	return 0;
 8000bba:	2300      	movs	r3, #0

}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000028 	.word	0x20000028

08000bc8 <MCP_9808_CalcTemp>:


//calc(short for calculator) temperature in celsius, then computes in fahrenheit
float MCP_9808_CalcTemp(MCP_9808 * TempSensor){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	uint16_t rawTemp = TempSensor->rawTemp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	827b      	strh	r3, [r7, #18]

	// clear alert flags (upper 3 bits)
	rawTemp = rawTemp & 0x1FFF;
 8000bd6:	8a7b      	ldrh	r3, [r7, #18]
 8000bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000bdc:	827b      	strh	r3, [r7, #18]

	float temperature = 0.0;
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
	float farenheit = 0.0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]

	// check if temperature is negative (bit 12 is set)
	if (rawTemp & 0x1000){
 8000bea:	8a7b      	ldrh	r3, [r7, #18]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d01c      	beq.n	8000c2e <MCP_9808_CalcTemp+0x66>

		// negative temperature
		rawTemp = rawTemp & 0x0FFF;  // clear sign bit
 8000bf4:	8a7b      	ldrh	r3, [r7, #18]
 8000bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfa:	827b      	strh	r3, [r7, #18]
		temperature = 256.0 - (rawTemp * 0.0625);
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd72 	bl	80006e8 <__aeabi_i2d>
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MCP_9808_CalcTemp+0xe0>)
 8000c0a:	f7ff faf1 	bl	80001f0 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4925      	ldr	r1, [pc, #148]	@ (8000cac <MCP_9808_CalcTemp+0xe4>)
 8000c18:	f7ff fc18 	bl	800044c <__aeabi_dsub>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fdca 	bl	80007bc <__aeabi_d2f>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e010      	b.n	8000c50 <MCP_9808_CalcTemp+0x88>

	} else {

		// positive temperature
		temperature = rawTemp * 0.0625;
 8000c2e:	8a7b      	ldrh	r3, [r7, #18]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd59 	bl	80006e8 <__aeabi_i2d>
 8000c36:	f04f 0200 	mov.w	r2, #0
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MCP_9808_CalcTemp+0xe0>)
 8000c3c:	f7ff fad8 	bl	80001f0 <__aeabi_dmul>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4610      	mov	r0, r2
 8000c46:	4619      	mov	r1, r3
 8000c48:	f7ff fdb8 	bl	80007bc <__aeabi_d2f>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	617b      	str	r3, [r7, #20]
	}

	TempSensor->temperatureC = temperature;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	605a      	str	r2, [r3, #4]

	farenheit = (temperature * 1.8) + 32;
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff fd58 	bl	800070c <__aeabi_f2d>
 8000c5c:	a310      	add	r3, pc, #64	@ (adr r3, 8000ca0 <MCP_9808_CalcTemp+0xd8>)
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c62:	f7ff fac5 	bl	80001f0 <__aeabi_dmul>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MCP_9808_CalcTemp+0xe8>)
 8000c74:	f7ff fbec 	bl	8000450 <__adddf3>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f7ff fd9c 	bl	80007bc <__aeabi_d2f>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]
	TempSensor->temperatureF = farenheit;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	609a      	str	r2, [r3, #8]


	return temperature;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	ee07 3a90 	vmov	s15, r3
}
 8000c94:	eeb0 0a67 	vmov.f32	s0, s15
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	cccccccd 	.word	0xcccccccd
 8000ca4:	3ffccccc 	.word	0x3ffccccc
 8000ca8:	3fb00000 	.word	0x3fb00000
 8000cac:	40700000 	.word	0x40700000
 8000cb0:	40400000 	.word	0x40400000

08000cb4 <MCP_9808_ReadTemp>:

//read temp
uint8_t MCP_9808_ReadTemp(MCP_9808 * TempSensor){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef i2cStatus;

	uint16_t ambientTemp = 0x0000;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	81bb      	strh	r3, [r7, #12]

	i2cStatus = MCP_9808_RegRead16(MCP_9808_REG_AMBIENT_TEMP, &ambientTemp);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f000 f812 	bl	8000cf0 <MCP_9808_RegRead16>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]

	if (i2cStatus != HAL_OK){
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MCP_9808_ReadTemp+0x26>

		return 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e006      	b.n	8000ce8 <MCP_9808_ReadTemp+0x34>
	}

	TempSensor->rawTemp = ambientTemp;
 8000cda:	89ba      	ldrh	r2, [r7, #12]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	801a      	strh	r2, [r3, #0]

	// automatically calc(short for calculator) temperature
	MCP_9808_CalcTemp(TempSensor);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff71 	bl	8000bc8 <MCP_9808_CalcTemp>

	return 0;
 8000ce6:	2300      	movs	r3, #0

}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MCP_9808_RegRead16>:

	return HAL_I2C_Mem_Write(MCP_9808_I2C_HANDLE, MCP_9808_I2CADDR_DEFAULT, regAddr, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
}

//read 16-bit
HAL_StatusTypeDef MCP_9808_RegRead16(uint8_t regAddr, uint16_t* regData){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af04      	add	r7, sp, #16
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]

	uint8_t buffer[2];

	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(MCP_9808_I2C_HANDLE, MCP_9808_I2CADDR_DEFAULT, regAddr, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MCP_9808_RegRead16+0x58>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2130      	movs	r1, #48	@ 0x30
 8000d18:	f003 ff68 	bl	8004bec <HAL_I2C_Mem_Read>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]

	if (status == HAL_OK){
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10a      	bne.n	8000d3c <MCP_9808_RegRead16+0x4c>

		*regData = (buffer[0] << 8) | buffer[1];  // combine bytes
 8000d26:	7b3b      	ldrb	r3, [r7, #12]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	7b7b      	ldrb	r3, [r7, #13]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	801a      	strh	r2, [r3, #0]
	}

	return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000028 	.word	0x20000028

08000d4c <BNO055_Read>:
#endif

/*
 * Local Read Function to BNO055
 */
static inline HAL_StatusTypeDef BNO055_Read(uint8_t reg, uint8_t* buf, uint8_t len){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef error;

	error = HAL_I2C_Master_Transmit(BNO055_I2C, BNO055_I2C_ADDR<<1, &reg, 1, BNO055_WRITE_TIMEOUT);
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <BNO055_Read+0x50>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	1dfa      	adds	r2, r7, #7
 8000d62:	2364      	movs	r3, #100	@ 0x64
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2150      	movs	r1, #80	@ 0x50
 8000d6a:	f003 fd31 	bl	80047d0 <HAL_I2C_Master_Transmit>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	73fb      	strb	r3, [r7, #15]
	error |= HAL_I2C_Master_Receive(BNO055_I2C, BNO055_I2C_ADDR<<1, buf, len, BNO055_READ_TIMEOUT);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <BNO055_Read+0x50>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2264      	movs	r2, #100	@ 0x64
 8000d7c:	9200      	str	r2, [sp, #0]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	2150      	movs	r1, #80	@ 0x50
 8000d82:	f003 fe3d 	bl	8004a00 <HAL_I2C_Master_Receive>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	73fb      	strb	r3, [r7, #15]

	return error;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000002c 	.word	0x2000002c

08000da0 <BNO055_Write>:

/*
 * Local Write Function to BNO055
 */
static inline HAL_StatusTypeDef BNO055_Write(uint8_t reg, uint8_t data){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef error;
	uint8_t transmitBuf[2] = {reg, data};
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	733b      	strb	r3, [r7, #12]
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	737b      	strb	r3, [r7, #13]

	error = HAL_I2C_Master_Transmit(BNO055_I2C, BNO055_I2C_ADDR<<1, transmitBuf, sizeof(transmitBuf), BNO055_WRITE_TIMEOUT);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <BNO055_Write+0x3c>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	2150      	movs	r1, #80	@ 0x50
 8000dc8:	f003 fd02 	bl	80047d0 <HAL_I2C_Master_Transmit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]

	return error;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]

}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000002c 	.word	0x2000002c

08000de0 <BNO055_ERROR_HANDLE>:

/*
 * Simple Error Check Function
 */
static inline void BNO055_ERROR_HANDLE(HAL_StatusTypeDef error){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	if(error != HAL_OK){
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <BNO055_ERROR_HANDLE+0x14>
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		while(1);
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BNO055_ERROR_HANDLE+0x10>
	}
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <BNO055_STATUS_CHECK_AND_SET>:
/**
 * Check Current Mode and Page 
 * Set Current Mode and Page to new mode and poge
 * Updates state struct instance
 */
static inline void BNO055_STATUS_CHECK_AND_SET(BNO055_STATE* currState, BNO055_OPERATION_MODE newMode, uint8_t newPage){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef error;

	/* Check and Set Current Mode to new Mode */
	if(currState->currentMode != newMode){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d010      	beq.n	8000e3c <BNO055_STATUS_CHECK_AND_SET+0x3c>
		error = BNO055_Write(BNO055_OPR_MODE, newMode);
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	203d      	movs	r0, #61	@ 0x3d
 8000e20:	f7ff ffbe 	bl	8000da0 <BNO055_Write>
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffd8 	bl	8000de0 <BNO055_ERROR_HANDLE>
		currState->currentMode = newMode;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f002 f862 	bl	8002f00 <HAL_Delay>
	}

	/* Check and Set current page to new page */
	if(currState->currentPage != newPage){
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	78ba      	ldrb	r2, [r7, #2]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d010      	beq.n	8000e68 <BNO055_STATUS_CHECK_AND_SET+0x68>
		error = BNO055_Write(BNO055_PAGE_ID, newPage);
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f7ff ffa8 	bl	8000da0 <BNO055_Write>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffc2 	bl	8000de0 <BNO055_ERROR_HANDLE>
		currState->currentPage = newPage;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	78ba      	ldrb	r2, [r7, #2]
 8000e60:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 8000e62:	2014      	movs	r0, #20
 8000e64:	f002 f84c 	bl	8002f00 <HAL_Delay>
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <BNO055_I2C_Mount>:

/*
 * Allow User to Mount I2C Handle
 */
void BNO055_I2C_Mount(I2C_HandleTypeDef* i2c){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	BNO055_I2C = i2c;
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <BNO055_I2C_Mount+0x1c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000002c 	.word	0x2000002c

08000e90 <BNO055_Init>:
	Reset_Pin = GPIO_Pin;
}

#endif

BNO055_ERROR BNO055_Init(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0


	HAL_Delay(700);
 8000e96:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e9a:	f002 f831 	bl	8002f00 <HAL_Delay>
	HAL_StatusTypeDef error;
	uint8_t ID_Check = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71bb      	strb	r3, [r7, #6]

	/* Read Chip ID Register to see if BNO055 is detected*/
	error = BNO055_Read(BNO055_CHIP_ID, &ID_Check, 1);
 8000ea2:	1dbb      	adds	r3, r7, #6
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff ff4f 	bl	8000d4c <BNO055_Read>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff93 	bl	8000de0 <BNO055_ERROR_HANDLE>
	if(ID_Check != BNO055_EXPECTED_ID)
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2ba0      	cmp	r3, #160	@ 0xa0
 8000ebe:	d001      	beq.n	8000ec4 <BNO055_Init+0x34>
		return BNO055_NOT_DETECTED;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e051      	b.n	8000f68 <BNO055_Init+0xd8>

	/* Software Reset Module */
	error = BNO055_Write(BNO055_SYS_TRIGGER, BNO055_SYS_RESET);
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	203f      	movs	r0, #63	@ 0x3f
 8000ec8:	f7ff ff6a 	bl	8000da0 <BNO055_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff84 	bl	8000de0 <BNO055_ERROR_HANDLE>
	HAL_Delay(700);													//Necessary Delay when Soft Reset
 8000ed8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000edc:	f002 f810 	bl	8002f00 <HAL_Delay>
		HAL_Delay(20);
		HAL_GPIO_WritePin(Reset_Port, Reset_Pin, GPIO_PIN_SET);
	#endif

	/* Set Register Page to 0 and Clear System Trigger*/
	error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2007      	movs	r0, #7
 8000ee4:	f7ff ff5c 	bl	8000da0 <BNO055_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff76 	bl	8000de0 <BNO055_ERROR_HANDLE>
	state.currentPage = BNO055_PAGE_0;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <BNO055_Init+0xe0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	705a      	strb	r2, [r3, #1]
	HAL_Delay(20);
 8000efa:	2014      	movs	r0, #20
 8000efc:	f002 f800 	bl	8002f00 <HAL_Delay>

	/* Set BNO055 Operation Mode to CONFIG MODE*/
	error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_CONFIG);
 8000f00:	2100      	movs	r1, #0
 8000f02:	203d      	movs	r0, #61	@ 0x3d
 8000f04:	f7ff ff4c 	bl	8000da0 <BNO055_Write>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
	BNO055_ERROR_HANDLE(error);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff66 	bl	8000de0 <BNO055_ERROR_HANDLE>
	state.currentMode = CONFIG;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <BNO055_Init+0xe0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]

	/* Necessary Delay to Set Operation Mode */
	HAL_Delay(10);
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f001 fff0 	bl	8002f00 <HAL_Delay>

	error = BNO055_Write(BNO055_SYS_TRIGGER, 0x01);
 8000f20:	2101      	movs	r1, #1
 8000f22:	203f      	movs	r0, #63	@ 0x3f
 8000f24:	f7ff ff3c 	bl	8000da0 <BNO055_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000f2c:	2064      	movs	r0, #100	@ 0x64
 8000f2e:	f001 ffe7 	bl	8002f00 <HAL_Delay>

	error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	2007      	movs	r0, #7
 8000f36:	f7ff ff33 	bl	8000da0 <BNO055_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
		BNO055_ERROR_HANDLE(error);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff4d 	bl	8000de0 <BNO055_ERROR_HANDLE>
		state.currentPage = BNO055_PAGE_0;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <BNO055_Init+0xe0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f001 ffd7 	bl	8002f00 <HAL_Delay>

	uint8_t ST_Result = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	717b      	strb	r3, [r7, #5]
	error = BNO055_Read(BNO055_ST_RESULT, &ST_Result , 1);
 8000f56:	1d7b      	adds	r3, r7, #5
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2036      	movs	r0, #54	@ 0x36
 8000f5e:	f7ff fef5 	bl	8000d4c <BNO055_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]


	return BNO055_SUCCESS;
 8000f66:	2300      	movs	r3, #0

}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000030 	.word	0x20000030

08000f74 <BNO055_Set_OP_Mode>:
	BNO055_ERROR_HANDLE(error);

	return BNO055_SUCCESS;
}

BNO055_ERROR BNO055_Set_OP_Mode(BNO055_OPERATION_MODE op){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef error;

	/* Make sure BNO055 is on Page 0 */
	if(state.currentPage != BNO055_PAGE_0){
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80010ac <BNO055_Set_OP_Mode+0x138>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00f      	beq.n	8000fa6 <BNO055_Set_OP_Mode+0x32>
		error = BNO055_Write(BNO055_PAGE_ID, BNO055_PAGE_0);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2007      	movs	r0, #7
 8000f8a:	f7ff ff09 	bl	8000da0 <BNO055_Write>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
		BNO055_ERROR_HANDLE(error);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff23 	bl	8000de0 <BNO055_ERROR_HANDLE>
		state.currentPage = BNO055_PAGE_0;
 8000f9a:	4b44      	ldr	r3, [pc, #272]	@ (80010ac <BNO055_Set_OP_Mode+0x138>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	705a      	strb	r2, [r3, #1]
		HAL_Delay(20);
 8000fa0:	2014      	movs	r0, #20
 8000fa2:	f001 ffad 	bl	8002f00 <HAL_Delay>
	}

	switch(op){
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	2b0b      	cmp	r3, #11
 8000fac:	d867      	bhi.n	800107e <BNO055_Set_OP_Mode+0x10a>
 8000fae:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb4 <BNO055_Set_OP_Mode+0x40>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fe5 	.word	0x08000fe5
 8000fb8:	08000ff3 	.word	0x08000ff3
 8000fbc:	08001001 	.word	0x08001001
 8000fc0:	0800100f 	.word	0x0800100f
 8000fc4:	0800101d 	.word	0x0800101d
 8000fc8:	0800102b 	.word	0x0800102b
 8000fcc:	0800107f 	.word	0x0800107f
 8000fd0:	08001039 	.word	0x08001039
 8000fd4:	08001047 	.word	0x08001047
 8000fd8:	08001055 	.word	0x08001055
 8000fdc:	08001063 	.word	0x08001063
 8000fe0:	08001071 	.word	0x08001071
		case ACC_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCONLY);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	203d      	movs	r0, #61	@ 0x3d
 8000fe8:	f7ff feda 	bl	8000da0 <BNO055_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
			break;
 8000ff0:	e04c      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case MAG_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_MAGONLY);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	203d      	movs	r0, #61	@ 0x3d
 8000ff6:	f7ff fed3 	bl	8000da0 <BNO055_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
			break;
 8000ffe:	e045      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case GYRO_ONLY:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_GRYOONLY);
 8001000:	2103      	movs	r1, #3
 8001002:	203d      	movs	r0, #61	@ 0x3d
 8001004:	f7ff fecc 	bl	8000da0 <BNO055_Write>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
			break;
 800100c:	e03e      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case ACC_MAG:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCMAG);
 800100e:	2104      	movs	r1, #4
 8001010:	203d      	movs	r0, #61	@ 0x3d
 8001012:	f7ff fec5 	bl	8000da0 <BNO055_Write>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
			break;
 800101a:	e037      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case ACC_GYRO:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_ACCGYRO);
 800101c:	2105      	movs	r1, #5
 800101e:	203d      	movs	r0, #61	@ 0x3d
 8001020:	f7ff febe 	bl	8000da0 <BNO055_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
			break;
 8001028:	e030      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case MAG_GYRO:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_MAGGRYO);
 800102a:	2106      	movs	r1, #6
 800102c:	203d      	movs	r0, #61	@ 0x3d
 800102e:	f7ff feb7 	bl	8000da0 <BNO055_Write>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
			break;
 8001036:	e029      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case IMU:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_IMU);
 8001038:	2108      	movs	r1, #8
 800103a:	203d      	movs	r0, #61	@ 0x3d
 800103c:	f7ff feb0 	bl	8000da0 <BNO055_Write>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
			break;
 8001044:	e022      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case COMPASS:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_COMPASS);
 8001046:	2109      	movs	r1, #9
 8001048:	203d      	movs	r0, #61	@ 0x3d
 800104a:	f7ff fea9 	bl	8000da0 <BNO055_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
			break;
 8001052:	e01b      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case M4G:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_M4G);
 8001054:	210a      	movs	r1, #10
 8001056:	203d      	movs	r0, #61	@ 0x3d
 8001058:	f7ff fea2 	bl	8000da0 <BNO055_Write>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
			break;
 8001060:	e014      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case NDOF_FMC_OFF:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_NDOF_FMC);
 8001062:	210b      	movs	r1, #11
 8001064:	203d      	movs	r0, #61	@ 0x3d
 8001066:	f7ff fe9b 	bl	8000da0 <BNO055_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]
			break;
 800106e:	e00d      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		case NDOF:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_NDOF);
 8001070:	210c      	movs	r1, #12
 8001072:	203d      	movs	r0, #61	@ 0x3d
 8001074:	f7ff fe94 	bl	8000da0 <BNO055_Write>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
			break;
 800107c:	e006      	b.n	800108c <BNO055_Set_OP_Mode+0x118>

		default:
			error = BNO055_Write(BNO055_OPR_MODE, OPR_MODE_CONFIG);
 800107e:	2100      	movs	r1, #0
 8001080:	203d      	movs	r0, #61	@ 0x3d
 8001082:	f7ff fe8d 	bl	8000da0 <BNO055_Write>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
			break;
 800108a:	bf00      	nop
	}

	BNO055_ERROR_HANDLE(error);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fea6 	bl	8000de0 <BNO055_ERROR_HANDLE>
	state.currentMode = op;
 8001094:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <BNO055_Set_OP_Mode+0x138>)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	7013      	strb	r3, [r2, #0]
	HAL_Delay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f001 ff30 	bl	8002f00 <HAL_Delay>
	return BNO055_SUCCESS;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000030 	.word	0x20000030

080010b0 <BNO055_Set_Axis>:

BNO055_ERROR BNO055_Set_Axis(const BNO055_AXIS_CONFIG_t* axesConfig){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	
	HAL_StatusTypeDef error; 

	/* Makes sure BNO055 is in CONFIG mode and Page 0 */
	BNO055_STATUS_CHECK_AND_SET(&state, CONFIG, BNO055_PAGE_0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4813      	ldr	r0, [pc, #76]	@ (800110c <BNO055_Set_Axis+0x5c>)
 80010be:	f7ff fe9f 	bl	8000e00 <BNO055_STATUS_CHECK_AND_SET>

	/* Configure Axis based on Axis Config Struct */
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b25a      	sxtb	r2, r3
				   (axesConfig->y << BNO055_Y_AXIS_OFFSET) |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785b      	ldrb	r3, [r3, #1]
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b25a      	sxtb	r2, r3
				   (axesConfig->z << BNO055_Z_AXIS_OFFSET);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	789b      	ldrb	r3, [r3, #2]
				   (axesConfig->y << BNO055_Y_AXIS_OFFSET) |
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b25b      	sxtb	r3, r3
	uint8_t temp = (axesConfig->x << BNO055_X_AXIS_OFFSET) |
 80010e4:	73fb      	strb	r3, [r7, #15]

	error = BNO055_Write(BNO055_AXIS_MAP_CONFIG, temp);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4619      	mov	r1, r3
 80010ea:	2041      	movs	r0, #65	@ 0x41
 80010ec:	f7ff fe58 	bl	8000da0 <BNO055_Write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73bb      	strb	r3, [r7, #14]
	BNO055_ERROR_HANDLE(error);
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe72 	bl	8000de0 <BNO055_ERROR_HANDLE>
	HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f001 feff 	bl	8002f00 <HAL_Delay>

	return BNO055_SUCCESS;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000030 	.word	0x20000030

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

    /* Custom Axis */
    BNO055_AXIS_CONFIG_t axis_config = {.x = BNO055_Z_AXIS,
 8001116:	4a4e      	ldr	r2, [pc, #312]	@ (8001250 <main+0x140>)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	4611      	mov	r1, r2
 800111e:	8019      	strh	r1, [r3, #0]
 8001120:	3302      	adds	r3, #2
 8001122:	0c12      	lsrs	r2, r2, #16
 8001124:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f001 fe76 	bl	8002e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f8b7 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 fe9f 	bl	8001e70 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001132:	f000 fb2d 	bl	8001790 <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8001136:	f000 fbd3 	bl	80018e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800113a:	f000 fcdd 	bl	8001af8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800113e:	f000 fd31 	bl	8001ba4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001142:	f000 fd85 	bl	8001c50 <MX_TIM5_Init>
  MX_UART4_Init();
 8001146:	f000 fa91 	bl	800166c <MX_UART4_Init>
  MX_CAN1_Init();
 800114a:	f000 f96d 	bl	8001428 <MX_CAN1_Init>
  MX_I2C2_Init();
 800114e:	f000 f9df 	bl	8001510 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001152:	f000 fc7d 	bl	8001a50 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001156:	f000 fab9 	bl	80016cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800115a:	f000 fae9 	bl	8001730 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800115e:	f000 f8ed 	bl	800133c <MX_ADC1_Init>
  MX_I2C4_Init();
 8001162:	f000 fa15 	bl	8001590 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001166:	f000 fa53 	bl	8001610 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800116a:	f000 fb7b 	bl	8001864 <MX_SPI3_Init>
  MX_I2C1_Init();
 800116e:	f000 f98f 	bl	8001490 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001172:	f000 fb39 	bl	80017e8 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001176:	f000 fdf7 	bl	8001d68 <MX_TIM15_Init>
  MX_TIM7_Init();
 800117a:	f000 fdbf 	bl	8001cfc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //IMU STUFF
  BNO055_I2C_Mount(&hi2c2);
 800117e:	4835      	ldr	r0, [pc, #212]	@ (8001254 <main+0x144>)
 8001180:	f7ff fe76 	bl	8000e70 <BNO055_I2C_Mount>
  if(BNO055_Init() != BNO055_SUCCESS)
 8001184:	f7ff fe84 	bl	8000e90 <BNO055_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <main+0x82>
      while(1);
 800118e:	bf00      	nop
 8001190:	e7fd      	b.n	800118e <main+0x7e>
  if(BNO055_Set_OP_Mode(NDOF) != BNO055_SUCCESS)
 8001192:	200c      	movs	r0, #12
 8001194:	f7ff feee 	bl	8000f74 <BNO055_Set_OP_Mode>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <main+0x92>
      while(1);
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <main+0x8e>
  if(BNO055_Set_Axis(&axis_config) != BNO055_SUCCESS)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff83 	bl	80010b0 <BNO055_Set_Axis>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <main+0xa4>
      while(1);
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <main+0xa0>

  float y_avg = 0.0;
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  float z_avg = 0.0;
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]

  //MOTOR CONTROLLER INIT
  init_default_motor(&X_Motor, &htim15, TIM_CHANNEL_1, GPIOB, GPIO_PIN_15);
 80011c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <main+0x148>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	4924      	ldr	r1, [pc, #144]	@ (800125c <main+0x14c>)
 80011cc:	4824      	ldr	r0, [pc, #144]	@ (8001260 <main+0x150>)
 80011ce:	f000 ff65 	bl	800209c <init_default_motor>
  init_default_motor(&Y_Motor, &htim1, TIM_CHANNEL_2, GPIOE, GPIO_PIN_11);
 80011d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <main+0x154>)
 80011da:	2204      	movs	r2, #4
 80011dc:	4922      	ldr	r1, [pc, #136]	@ (8001268 <main+0x158>)
 80011de:	4823      	ldr	r0, [pc, #140]	@ (800126c <main+0x15c>)
 80011e0:	f000 ff5c 	bl	800209c <init_default_motor>
  init_default_motor(&Z_Motor, &htim1, TIM_CHANNEL_1, GPIOE, GPIO_PIN_9);
 80011e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <main+0x154>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	491e      	ldr	r1, [pc, #120]	@ (8001268 <main+0x158>)
 80011f0:	481f      	ldr	r0, [pc, #124]	@ (8001270 <main+0x160>)
 80011f2:	f000 ff53 	bl	800209c <init_default_motor>

  //starts encoder for all x,y,z listed from top to bottom
  Motor_Enc_Start(&htim4);
 80011f6:	481f      	ldr	r0, [pc, #124]	@ (8001274 <main+0x164>)
 80011f8:	f000 ffc1 	bl	800217e <Motor_Enc_Start>
  Motor_Enc_Start(&htim5);
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <main+0x168>)
 80011fe:	f000 ffbe 	bl	800217e <Motor_Enc_Start>
  Motor_Enc_Start(&htim3);
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <main+0x16c>)
 8001204:	f000 ffbb 	bl	800217e <Motor_Enc_Start>

  //initializes the variables within the motor calc
  Motor_Enc_Init(&motor_x_var);
 8001208:	481d      	ldr	r0, [pc, #116]	@ (8001280 <main+0x170>)
 800120a:	f000 ffa1 	bl	8002150 <Motor_Enc_Init>
  Motor_Enc_Init(&motor_y_var);
 800120e:	481d      	ldr	r0, [pc, #116]	@ (8001284 <main+0x174>)
 8001210:	f000 ff9e 	bl	8002150 <Motor_Enc_Init>
  Motor_Enc_Init(&motor_z_var);
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <main+0x178>)
 8001216:	f000 ff9b 	bl	8002150 <Motor_Enc_Init>

  //tim 7 is a 10ms interrupt flag
  HAL_TIM_Base_Start_IT(&htim7);
 800121a:	481c      	ldr	r0, [pc, #112]	@ (800128c <main+0x17c>)
 800121c:	f005 feca 	bl	8006fb4 <HAL_TIM_Base_Start_IT>

  //tempsensor init
  //check if this is the correct i2c for it
  uint8_t TempInitStatus = MCP_9808_Init(&hi2c1);
 8001220:	481b      	ldr	r0, [pc, #108]	@ (8001290 <main+0x180>)
 8001222:	f7ff fcb1 	bl	8000b88 <MCP_9808_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]

  if (TempInitStatus != 0){
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <main+0x124>
      // Sensor initialization failed
      Error_Handler();
 8001230:	f000 ff2e 	bl	8002090 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  
	HAL_GPIO_TogglePin(MCU_LED_GPIO_Port, MCU_LED_Pin);
 8001234:	2101      	movs	r1, #1
 8001236:	4817      	ldr	r0, [pc, #92]	@ (8001294 <main+0x184>)
 8001238:	f003 fa14 	bl	8004664 <HAL_GPIO_TogglePin>
	MCP_9808_ReadTemp(&TempSensor);
 800123c:	4816      	ldr	r0, [pc, #88]	@ (8001298 <main+0x188>)
 800123e:	f7ff fd39 	bl	8000cb4 <MCP_9808_ReadTemp>
	HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f001 fe5b 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_TogglePin(MCU_LED_GPIO_Port, MCU_LED_Pin);
 800124a:	bf00      	nop
 800124c:	e7f2      	b.n	8001234 <main+0x124>
 800124e:	bf00      	nop
 8001250:	08009640 	.word	0x08009640
 8001254:	20000118 	.word	0x20000118
 8001258:	48000400 	.word	0x48000400
 800125c:	200006bc 	.word	0x200006bc
 8001260:	20000738 	.word	0x20000738
 8001264:	48001000 	.word	0x48001000
 8001268:	200004f4 	.word	0x200004f4
 800126c:	20000754 	.word	0x20000754
 8001270:	20000770 	.word	0x20000770
 8001274:	200005d8 	.word	0x200005d8
 8001278:	20000624 	.word	0x20000624
 800127c:	2000058c 	.word	0x2000058c
 8001280:	20000708 	.word	0x20000708
 8001284:	20000718 	.word	0x20000718
 8001288:	20000728 	.word	0x20000728
 800128c:	20000670 	.word	0x20000670
 8001290:	200000c4 	.word	0x200000c4
 8001294:	48001800 	.word	0x48001800
 8001298:	2000078c 	.word	0x2000078c

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b096      	sub	sp, #88	@ 0x58
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2244      	movs	r2, #68	@ 0x44
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f008 f990 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012c2:	f004 f94d 	bl	8005560 <HAL_PWREx_ControlVoltageScaling>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012cc:	f000 fee0 	bl	8002090 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	2303      	movs	r3, #3
 80012e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80012e6:	2314      	movs	r3, #20
 80012e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 fa58 	bl	80057b0 <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001306:	f000 fec3 	bl	8002090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2303      	movs	r3, #3
 8001310:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fe5e 	bl	8005fe4 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800132e:	f000 feaf 	bl	8002090 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	@ 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001360:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <MX_ADC1_Init+0xe4>)
 8001362:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <MX_ADC1_Init+0xe0>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <MX_ADC1_Init+0xe0>)
 800137e:	2204      	movs	r2, #4
 8001380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <MX_ADC1_Init+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001390:	2201      	movs	r2, #1
 8001392:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC1_Init+0xe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013be:	4817      	ldr	r0, [pc, #92]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013c0:	f001 ff62 	bl	8003288 <HAL_ADC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013ca:	f000 fe61 	bl	8002090 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4810      	ldr	r0, [pc, #64]	@ (800141c <MX_ADC1_Init+0xe0>)
 80013da:	f002 fcdb 	bl	8003d94 <HAL_ADCEx_MultiModeConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013e4:	f000 fe54 	bl	8002090 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_ADC1_Init+0xe8>)
 80013ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ec:	2306      	movs	r3, #6
 80013ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013f4:	237f      	movs	r3, #127	@ 0x7f
 80013f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f8:	2304      	movs	r3, #4
 80013fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_ADC1_Init+0xe0>)
 8001406:	f002 f893 	bl	8003530 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001410:	f000 fe3e 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000034 	.word	0x20000034
 8001420:	50040000 	.word	0x50040000
 8001424:	43210000 	.word	0x43210000

08001428 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_CAN1_Init+0x60>)
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <MX_CAN1_Init+0x64>)
 8001430:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001434:	2210      	movs	r2, #16
 8001436:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_CAN1_Init+0x60>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800143e:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_CAN1_Init+0x60>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001452:	2200      	movs	r2, #0
 8001454:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001456:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001458:	2200      	movs	r2, #0
 800145a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <MX_CAN1_Init+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <MX_CAN1_Init+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001470:	2200      	movs	r2, #0
 8001472:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_CAN1_Init+0x60>)
 8001476:	f002 fd3d 	bl	8003ef4 <HAL_CAN_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 fe06 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000009c 	.word	0x2000009c
 800148c:	40006400 	.word	0x40006400

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_I2C1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <MX_I2C1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_I2C1_Init+0x74>)
 800149c:	4a1b      	ldr	r2, [pc, #108]	@ (800150c <MX_I2C1_Init+0x7c>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ca:	480e      	ldr	r0, [pc, #56]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014cc:	f003 f8e4 	bl	8004698 <HAL_I2C_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014d6:	f000 fddb 	bl	8002090 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4809      	ldr	r0, [pc, #36]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014de:	f003 ff99 	bl	8005414 <HAL_I2CEx_ConfigAnalogFilter>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 fdd2 	bl	8002090 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_I2C1_Init+0x74>)
 80014f0:	f003 ffdb 	bl	80054aa <HAL_I2CEx_ConfigDigitalFilter>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 fdc9 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200000c4 	.word	0x200000c4
 8001508:	40005400 	.word	0x40005400
 800150c:	10d19ce4 	.word	0x10d19ce4

08001510 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <MX_I2C2_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_I2C2_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	@ (800158c <MX_I2C2_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_I2C2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_I2C2_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <MX_I2C2_Init+0x74>)
 800154c:	f003 f8a4 	bl	8004698 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 fd9b 	bl	8002090 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <MX_I2C2_Init+0x74>)
 800155e:	f003 ff59 	bl	8005414 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 fd92 	bl	8002090 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_I2C2_Init+0x74>)
 8001570:	f003 ff9b 	bl	80054aa <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 fd89 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000118 	.word	0x20000118
 8001588:	40005800 	.word	0x40005800
 800158c:	10d19ce4 	.word	0x10d19ce4

08001590 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_I2C4_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <MX_I2C4_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10D19CE4;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_I2C4_Init+0x74>)
 800159c:	4a1b      	ldr	r2, [pc, #108]	@ (800160c <MX_I2C4_Init+0x7c>)
 800159e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80015ca:	480e      	ldr	r0, [pc, #56]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015cc:	f003 f864 	bl	8004698 <HAL_I2C_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80015d6:	f000 fd5b 	bl	8002090 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015de:	f003 ff19 	bl	8005414 <HAL_I2CEx_ConfigAnalogFilter>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f000 fd52 	bl	8002090 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_I2C4_Init+0x74>)
 80015f0:	f003 ff5b 	bl	80054aa <HAL_I2CEx_ConfigDigitalFilter>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 fd49 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000016c 	.word	0x2000016c
 8001608:	40008400 	.word	0x40008400
 800160c:	10d19ce4 	.word	0x10d19ce4

08001610 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001616:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <MX_LPUART1_UART_Init+0x54>)
 8001618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_LPUART1_UART_Init+0x58>)
 800161e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_LPUART1_UART_Init+0x50>)
 800164e:	f007 fa37 	bl	8008ac0 <HAL_UART_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001658:	f000 fd1a 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001c0 	.word	0x200001c0
 8001664:	40008000 	.word	0x40008000
 8001668:	00033324 	.word	0x00033324

0800166c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <MX_UART4_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_UART4_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_UART4_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_UART4_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_UART4_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_UART4_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_UART4_Init+0x58>)
 80016b0:	f007 fa06 	bl	8008ac0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 fce9 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000248 	.word	0x20000248
 80016c8:	40004c00 	.word	0x40004c00

080016cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016d2:	4a16      	ldr	r2, [pc, #88]	@ (800172c <MX_USART2_UART_Init+0x60>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800170e:	2300      	movs	r3, #0
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	4804      	ldr	r0, [pc, #16]	@ (8001728 <MX_USART2_UART_Init+0x5c>)
 8001716:	f007 fef4 	bl	8009502 <HAL_RS485Ex_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001720:	f000 fcb6 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002d0 	.word	0x200002d0
 800172c:	40004400 	.word	0x40004400

08001730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001736:	4a15      	ldr	r2, [pc, #84]	@ (800178c <MX_USART3_UART_Init+0x5c>)
 8001738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001774:	f007 f9a4 	bl	8008ac0 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800177e:	f000 fc87 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000358 	.word	0x20000358
 800178c:	40004800 	.word	0x40004800

08001790 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <MX_QUADSPI_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 800179c:	22ff      	movs	r2, #255	@ 0xff
 800179e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_QUADSPI_Init+0x50>)
 80017cc:	f003 ff2e 	bl	800562c <HAL_QSPI_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80017d6:	f000 fc5b 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003e0 	.word	0x200003e0
 80017e4:	a0001000 	.word	0xa0001000

080017e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <MX_SPI1_Init+0x74>)
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <MX_SPI1_Init+0x78>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_SPI1_Init+0x74>)
 80017f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <MX_SPI1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001800:	4b16      	ldr	r3, [pc, #88]	@ (800185c <MX_SPI1_Init+0x74>)
 8001802:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001806:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_SPI1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_SPI1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_SPI1_Init+0x74>)
 8001816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800181a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <MX_SPI1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_SPI1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_SPI1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <MX_SPI1_Init+0x74>)
 8001836:	2207      	movs	r2, #7
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_SPI1_Init+0x74>)
 8001842:	2208      	movs	r2, #8
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_SPI1_Init+0x74>)
 8001848:	f005 faba 	bl	8006dc0 <HAL_SPI_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001852:	f000 fc1d 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000042c 	.word	0x2000042c
 8001860:	40013000 	.word	0x40013000

08001864 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_SPI3_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_SPI3_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_SPI3_Init+0x74>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_SPI3_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_SPI3_Init+0x74>)
 800187e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001882:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_SPI3_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_SPI3_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_SPI3_Init+0x74>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_SPI3_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018be:	2208      	movs	r2, #8
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_SPI3_Init+0x74>)
 80018c4:	f005 fa7c 	bl	8006dc0 <HAL_SPI_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 fbdf 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000490 	.word	0x20000490
 80018dc:	40003c00 	.word	0x40003c00

080018e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b09a      	sub	sp, #104	@ 0x68
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001900:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	222c      	movs	r2, #44	@ 0x2c
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f007 fe58 	bl	80095d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001920:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001922:	4a4a      	ldr	r2, [pc, #296]	@ (8001a4c <MX_TIM1_Init+0x16c>)
 8001924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001926:	4b48      	ldr	r3, [pc, #288]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3077;
 8001932:	4b45      	ldr	r3, [pc, #276]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001934:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001940:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001946:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800194c:	483e      	ldr	r0, [pc, #248]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800194e:	f005 fada 	bl	8006f06 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001958:	f000 fb9a 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001960:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001962:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001966:	4619      	mov	r1, r3
 8001968:	4837      	ldr	r0, [pc, #220]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800196a:	f006 f933 	bl	8007bd4 <HAL_TIM_ConfigClockSource>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001974:	f000 fb8c 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001978:	4833      	ldr	r0, [pc, #204]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800197a:	f005 fb8b 	bl	8007094 <HAL_TIM_PWM_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001984:	f000 fb84 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001994:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001998:	4619      	mov	r1, r3
 800199a:	482b      	ldr	r0, [pc, #172]	@ (8001a48 <MX_TIM1_Init+0x168>)
 800199c:	f006 ff6c 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019a6:	f000 fb73 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	@ 0x60
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	481e      	ldr	r0, [pc, #120]	@ (8001a48 <MX_TIM1_Init+0x168>)
 80019d0:	f005 ffec 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019da:	f000 fb59 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e2:	2204      	movs	r2, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4818      	ldr	r0, [pc, #96]	@ (8001a48 <MX_TIM1_Init+0x168>)
 80019e8:	f005 ffe0 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80019f2:	f000 fb4d 	bl	8002090 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001a2c:	f006 ffac 	bl	8008988 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a36:	f000 fb2b 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a3a:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <MX_TIM1_Init+0x168>)
 8001a3c:	f001 f916 	bl	8002c6c <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3768      	adds	r7, #104	@ 0x68
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200004f4 	.word	0x200004f4
 8001a4c:	40012c00 	.word	0x40012c00

08001a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a96:	4817      	ldr	r0, [pc, #92]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001a98:	f005 fc5a 	bl	8007350 <HAL_TIM_IC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aa2:	f000 faf5 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001ab6:	f006 fedf 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ac0:	f000 fae6 	bl	8002090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_TIM2_Init+0xa4>)
 8001adc:	f005 feca 	bl	8007874 <HAL_TIM_IC_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ae6:	f000 fad3 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000540 	.word	0x20000540

08001af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2224      	movs	r2, #36	@ 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f007 fd62 	bl	80095d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b18:	4a21      	ldr	r2, [pc, #132]	@ (8001ba0 <MX_TIM3_Init+0xa8>)
 8001b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3077;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b2a:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b68:	f005 fc49 	bl	80073fe <HAL_TIM_Encoder_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b72:	f000 fa8d 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	@ (8001b9c <MX_TIM3_Init+0xa4>)
 8001b84:	f006 fe78 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b8e:	f000 fa7f 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3730      	adds	r7, #48	@ 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000058c 	.word	0x2000058c
 8001ba0:	40000400 	.word	0x40000400

08001ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	@ 0x30
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2224      	movs	r2, #36	@ 0x24
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 fd0c 	bl	80095d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001bc4:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <MX_TIM4_Init+0xa8>)
 8001bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c00:	2301      	movs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001c14:	f005 fbf3 	bl	80073fe <HAL_TIM_Encoder_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c1e:	f000 fa37 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4806      	ldr	r0, [pc, #24]	@ (8001c48 <MX_TIM4_Init+0xa4>)
 8001c30:	f006 fe22 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c3a:	f000 fa29 	bl	8002090 <Error_Handler>
  /* USER CODE BEGIN TIM4_Init 2 */


  /* USER CODE END TIM4_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	3730      	adds	r7, #48	@ 0x30
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200005d8 	.word	0x200005d8
 8001c4c:	40000800 	.word	0x40000800

08001c50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f007 fcb6 	bl	80095d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c70:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <MX_TIM5_Init+0xa8>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3077;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c82:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001c86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001cc0:	f005 fb9d 	bl	80073fe <HAL_TIM_Encoder_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001cca:	f000 f9e1 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <MX_TIM5_Init+0xa4>)
 8001cdc:	f006 fdcc 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001ce6:	f000 f9d3 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	3730      	adds	r7, #48	@ 0x30
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000624 	.word	0x20000624
 8001cf8:	40000c00 	.word	0x40000c00

08001cfc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <MX_TIM7_Init+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15;
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d14:	220f      	movs	r2, #15
 8001d16:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d24:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d2e:	f005 f8ea 	bl	8006f06 <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d38:	f000 f9aa 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_TIM7_Init+0x64>)
 8001d4a:	f006 fd95 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d54:	f000 f99c 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000670 	.word	0x20000670
 8001d64:	40001400 	.word	0x40001400

08001d68 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b096      	sub	sp, #88	@ 0x58
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	222c      	movs	r2, #44	@ 0x2c
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f007 fc1b 	bl	80095d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001d9c:	4a33      	ldr	r2, [pc, #204]	@ (8001e6c <MX_TIM15_Init+0x104>)
 8001d9e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001da0:	4b31      	ldr	r3, [pc, #196]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3077;
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001dae:	f640 4205 	movw	r2, #3077	@ 0xc05
 8001db2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001dc6:	4828      	ldr	r0, [pc, #160]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001dc8:	f005 f964 	bl	8007094 <HAL_TIM_PWM_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001dd2:	f000 f95d 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4820      	ldr	r0, [pc, #128]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001de6:	f006 fd47 	bl	8008878 <HAL_TIMEx_MasterConfigSynchronization>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001df0:	f000 f94e 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df4:	2360      	movs	r3, #96	@ 0x60
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001e1a:	f005 fdc7 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001e24:	f000 f934 	bl	8002090 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001e4c:	f006 fd9c 	bl	8008988 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001e56:	f000 f91b 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <MX_TIM15_Init+0x100>)
 8001e5c:	f000 ff06 	bl	8002c6c <HAL_TIM_MspPostInit>

}
 8001e60:	bf00      	nop
 8001e62:	3758      	adds	r7, #88	@ 0x58
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200006bc 	.word	0x200006bc
 8001e6c:	40014000 	.word	0x40014000

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08e      	sub	sp, #56	@ 0x38
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	4a67      	ldr	r2, [pc, #412]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e92:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	4b62      	ldr	r3, [pc, #392]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	4a61      	ldr	r2, [pc, #388]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ebc:	f043 0320 	orr.w	r3, r3, #32
 8001ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec2:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	4b56      	ldr	r3, [pc, #344]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	4a55      	ldr	r2, [pc, #340]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eda:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	4a4f      	ldr	r2, [pc, #316]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	4a49      	ldr	r2, [pc, #292]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f16:	4b44      	ldr	r3, [pc, #272]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <MX_GPIO_Init+0x1b8>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001f46:	f003 fb61 	bl	800560c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WD_EN_Pin|WWDG_Pin|MZ_DIR_Pin|MY_DIR_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 61a9 	mov.w	r1, #1352	@ 0x548
 8001f50:	4836      	ldr	r0, [pc, #216]	@ (800202c <MX_GPIO_Init+0x1bc>)
 8001f52:	f002 fb6f 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCU_LED_Pin|FRAM_CS1_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2121      	movs	r1, #33	@ 0x21
 8001f5a:	4835      	ldr	r0, [pc, #212]	@ (8002030 <MX_GPIO_Init+0x1c0>)
 8001f5c:	f002 fb6a 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, QSPI_CS2_Pin|MX_DIR_Pin|I2C_EN_Pin, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f249 0120 	movw	r1, #36896	@ 0x9020
 8001f66:	4833      	ldr	r0, [pc, #204]	@ (8002034 <MX_GPIO_Init+0x1c4>)
 8001f68:	f002 fb64 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FRAM_CS3_Pin|FRAM_CS2_Pin|GPS_EN_Pin|USER_3_Pin
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f24c 01f1 	movw	r1, #49393	@ 0xc0f1
 8001f72:	4831      	ldr	r0, [pc, #196]	@ (8002038 <MX_GPIO_Init+0x1c8>)
 8001f74:	f002 fb5e 	bl	8004634 <HAL_GPIO_WritePin>
                          |USER_2_Pin|USER_1_Pin|USER_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : WD_EN_Pin WWDG_Pin MZ_DIR_Pin MY_DIR_Pin */
  GPIO_InitStruct.Pin = WD_EN_Pin|WWDG_Pin|MZ_DIR_Pin|MY_DIR_Pin;
 8001f78:	f44f 63a9 	mov.w	r3, #1352	@ 0x548
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4826      	ldr	r0, [pc, #152]	@ (800202c <MX_GPIO_Init+0x1bc>)
 8001f92:	f002 f9bd 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin FRAM_CS1_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|FRAM_CS1_Pin;
 8001f96:	2321      	movs	r3, #33	@ 0x21
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001faa:	4619      	mov	r1, r3
 8001fac:	4820      	ldr	r0, [pc, #128]	@ (8002030 <MX_GPIO_Init+0x1c0>)
 8001fae:	f002 f9af 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATE_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLE_STATE_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	481a      	ldr	r0, [pc, #104]	@ (8002030 <MX_GPIO_Init+0x1c0>)
 8001fc6:	f002 f9a3 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CS2_Pin MX_DIR_Pin I2C_EN_Pin */
  GPIO_InitStruct.Pin = QSPI_CS2_Pin|MX_DIR_Pin|I2C_EN_Pin;
 8001fca:	f249 0320 	movw	r3, #36896	@ 0x9020
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4814      	ldr	r0, [pc, #80]	@ (8002034 <MX_GPIO_Init+0x1c4>)
 8001fe4:	f002 f994 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRAM_CS3_Pin FRAM_CS2_Pin GPS_EN_Pin USER_3_Pin
                           USER_2_Pin USER_1_Pin USER_0_Pin */
  GPIO_InitStruct.Pin = FRAM_CS3_Pin|FRAM_CS2_Pin|GPS_EN_Pin|USER_3_Pin
 8001fe8:	f24c 03f1 	movw	r3, #49393	@ 0xc0f1
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |USER_2_Pin|USER_1_Pin|USER_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	480d      	ldr	r0, [pc, #52]	@ (8002038 <MX_GPIO_Init+0x1c8>)
 8002002:	f002 f985 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_FIX_Pin */
  GPIO_InitStruct.Pin = GPS_FIX_Pin;
 8002006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPS_FIX_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4808      	ldr	r0, [pc, #32]	@ (800203c <MX_GPIO_Init+0x1cc>)
 800201c:	f002 f978 	bl	8004310 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002020:	bf00      	nop
 8002022:	3738      	adds	r7, #56	@ 0x38
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	48001000 	.word	0x48001000
 8002030:	48001800 	.word	0x48001800
 8002034:	48000400 	.word	0x48000400
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48000800 	.word	0x48000800

08002040 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

//encoder call
// This callback is automatically called by HAL when the timer period elapses
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10b      	bne.n	800206a <HAL_TIM_PeriodElapsedCallback+0x2a>
		//slang
		Motor_Calc(&htim4, &motor_x_var);
 8002052:	4909      	ldr	r1, [pc, #36]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002054:	4809      	ldr	r0, [pc, #36]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002056:	f000 f89f 	bl	8002198 <Motor_Calc>
		Motor_Calc(&htim5, &motor_y_var);
 800205a:	4909      	ldr	r1, [pc, #36]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800205c:	4809      	ldr	r0, [pc, #36]	@ (8002084 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800205e:	f000 f89b 	bl	8002198 <Motor_Calc>
		Motor_Calc(&htim3, &motor_z_var);
 8002062:	4909      	ldr	r1, [pc, #36]	@ (8002088 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002064:	4809      	ldr	r0, [pc, #36]	@ (800208c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002066:	f000 f897 	bl	8002198 <Motor_Calc>
    //basically encoder ticks in 0.01s/0.01s = ticks per second
    velocity = (float)deltacount / 0.01f;

    // Save current counter value for the next calculation
    previousCounter = counter;*/
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40001400 	.word	0x40001400
 8002078:	20000708 	.word	0x20000708
 800207c:	200005d8 	.word	0x200005d8
 8002080:	20000718 	.word	0x20000718
 8002084:	20000624 	.word	0x20000624
 8002088:	20000728 	.word	0x20000728
 800208c:	2000058c 	.word	0x2000058c

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <Error_Handler+0x8>

0800209c <init_default_motor>:
void init_default_motor(Motor *RW,
                        TIM_HandleTypeDef *pwm_tim,
                        uint32_t pwm_channel,
                        GPIO_TypeDef *Dir_port,
                        uint16_t Dir_pin)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
    /*
     * Reaction wheel PWM.
     */
    PWM_Driver RW_pwm = {
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
            pwm_tim,
            pwm_channel,
            pwm_tim->Init.Period
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	68db      	ldr	r3, [r3, #12]
    PWM_Driver RW_pwm = {
 80020b6:	61fb      	str	r3, [r7, #28]
    };

    /*
     * Fill parameters.
     */
    RW->Motor_t = RW_pwm;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	461c      	mov	r4, r3
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    RW->DirPort = Dir_port;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	60da      	str	r2, [r3, #12]
    RW->DirPin = Dir_pin;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80020d2:	821a      	strh	r2, [r3, #16]
    RW->max_fwd = MOTOR_SCALE_MAX_FWD;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020da:	615a      	str	r2, [r3, #20]
    RW->max_back = MOTOR_SCALE_MAX_BACK;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <init_default_motor+0xb0>)
 80020e0:	619a      	str	r2, [r3, #24]


    __HAL_TIM_SET_COMPARE(
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <init_default_motor+0x56>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80020f0:	e023      	b.n	800213a <init_default_motor+0x9e>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d104      	bne.n	8002102 <init_default_motor+0x66>
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8002100:	e01b      	b.n	800213a <init_default_motor+0x9e>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d104      	bne.n	8002112 <init_default_motor+0x76>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002110:	e013      	b.n	800213a <init_default_motor+0x9e>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d104      	bne.n	8002122 <init_default_motor+0x86>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002120:	e00b      	b.n	800213a <init_default_motor+0x9e>
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b10      	cmp	r3, #16
 8002126:	d104      	bne.n	8002132 <init_default_motor+0x96>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002130:	e003      	b.n	800213a <init_default_motor+0x9e>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	65d3      	str	r3, [r2, #92]	@ 0x5c
        RW_pwm.timer,
        RW_pwm.channel,
        RW_pwm.period);
    HAL_TIM_PWM_Start(pwm_tim, pwm_channel);
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68b8      	ldr	r0, [r7, #8]
 800213e:	f005 f801 	bl	8007144 <HAL_TIM_PWM_Start>

}
 8002142:	bf00      	nop
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	bf800000 	.word	0xbf800000

08002150 <Motor_Enc_Init>:
 */

#include "motorencoder.h"

//initializing variables
void Motor_Enc_Init(motor_var_enc* s){
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

	s-> velocity = 0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
	s-> deltacount = 0;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
	s-> counter = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
	s-> previousCounter = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]

}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <Motor_Enc_Start>:

//
void Motor_Enc_Start(TIM_HandleTypeDef* htim){
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]

    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8002186:	213c      	movs	r1, #60	@ 0x3c
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f005 f9de 	bl	800754a <HAL_TIM_Encoder_Start>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <Motor_Calc>:

//short for calculator
//
void Motor_Calc(TIM_HandleTypeDef* htim, motor_var_enc* s){
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]

	s->counter = __HAL_TIM_GET_COUNTER(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	609a      	str	r2, [r3, #8]

	s->deltacount = (int32_t)s->counter - (int32_t)s->previousCounter;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	461a      	mov	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	605a      	str	r2, [r3, #4]


	if (s->deltacount <= - ENCODER_MAX_COUNT/2){
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <Motor_Calc+0x88>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	da07      	bge.n	80021d6 <Motor_Calc+0x3e>
		s->deltacount += (ENCODER_MAX_COUNT + 1);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 80021ce:	3351      	adds	r3, #81	@ 0x51
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6053      	str	r3, [r2, #4]
 80021d4:	e00c      	b.n	80021f0 <Motor_Calc+0x58>


	}else if (s->deltacount >= ENCODER_MAX_COUNT/2){
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80021de:	4293      	cmp	r3, r2
 80021e0:	dd06      	ble.n	80021f0 <Motor_Calc+0x58>
		s->deltacount -= (ENCODER_MAX_COUNT - 1);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 80021ea:	3b4f      	subs	r3, #79	@ 0x4f
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	6053      	str	r3, [r2, #4]

	}

	s->velocity = (float)s->deltacount / 0.01f;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002224 <Motor_Calc+0x8c>
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	edc3 7a00 	vstr	s15, [r3]

	s->previousCounter = s->counter;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	60da      	str	r2, [r3, #12]

    // Save current counter value for the next calculation
    previousCounter = counter;*/


}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	ffff9e59 	.word	0xffff9e59
 8002224:	3c23d70a 	.word	0x3c23d70a

08002228 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <HAL_MspInit+0x44>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <HAL_MspInit+0x44>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6613      	str	r3, [r2, #96]	@ 0x60
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <HAL_MspInit+0x44>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_MspInit+0x44>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_MspInit+0x44>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6593      	str	r3, [r2, #88]	@ 0x58
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_MspInit+0x44>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0ae      	sub	sp, #184	@ 0xb8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	228c      	movs	r2, #140	@ 0x8c
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f007 f99d 	bl	80095d0 <memset>
  if(hadc->Instance==ADC1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a34      	ldr	r2, [pc, #208]	@ (800236c <HAL_ADC_MspInit+0xfc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d161      	bne.n	8002364 <HAL_ADC_MspInit+0xf4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80022a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80022aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80022ae:	2303      	movs	r3, #3
 80022b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 80022b2:	2303      	movs	r3, #3
 80022b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80022b6:	2308      	movs	r3, #8
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80022ba:	2302      	movs	r3, #2
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022be:	2302      	movs	r3, #2
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022c2:	2302      	movs	r3, #2
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022ca:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 f8ab 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80022dc:	f7ff fed8 	bl	8002090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022e0:	4b23      	ldr	r3, [pc, #140]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	4a22      	ldr	r2, [pc, #136]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 80022e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002310:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	4a16      	ldr	r2, [pc, #88]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231c:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <HAL_ADC_MspInit+0x100>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = IMON_3V3_Pin;
 8002328:	2320      	movs	r3, #32
 800232a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232e:	2303      	movs	r3, #3
 8002330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(IMON_3V3_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	@ (8002374 <HAL_ADC_MspInit+0x104>)
 8002342:	f001 ffe5 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMON_5V_Pin|VBAT_MON_Pin;
 8002346:	2303      	movs	r3, #3
 8002348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234c:	2303      	movs	r3, #3
 800234e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800235c:	4619      	mov	r1, r3
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <HAL_ADC_MspInit+0x108>)
 8002360:	f001 ffd6 	bl	8004310 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002364:	bf00      	nop
 8002366:	37b8      	adds	r7, #184	@ 0xb8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	50040000 	.word	0x50040000
 8002370:	40021000 	.word	0x40021000
 8002374:	48000800 	.word	0x48000800
 8002378:	48000400 	.word	0x48000400

0800237c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_CAN_MspInit+0x7c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d128      	bne.n	80023f0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_CAN_MspInit+0x80>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023e0:	2309      	movs	r3, #9
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <HAL_CAN_MspInit+0x84>)
 80023ec:	f001 ff90 	bl	8004310 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40006400 	.word	0x40006400
 80023fc:	40021000 	.word	0x40021000
 8002400:	48000400 	.word	0x48000400

08002404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0b0      	sub	sp, #192	@ 0xc0
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	228c      	movs	r2, #140	@ 0x8c
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f007 f8d3 	bl	80095d0 <memset>
  if(hi2c->Instance==I2C1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a63      	ldr	r2, [pc, #396]	@ (80025bc <HAL_I2C_MspInit+0x1b8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d13b      	bne.n	80024ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002434:	2340      	movs	r3, #64	@ 0x40
 8002436:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002438:	2300      	movs	r3, #0
 800243a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	4618      	mov	r0, r3
 8002442:	f003 fff3 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800244c:	f7ff fe20 	bl	8002090 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	4a5a      	ldr	r2, [pc, #360]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245c:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002468:	23c0      	movs	r3, #192	@ 0xc0
 800246a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	2312      	movs	r3, #18
 8002470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002480:	2304      	movs	r3, #4
 8002482:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800248a:	4619      	mov	r1, r3
 800248c:	484d      	ldr	r0, [pc, #308]	@ (80025c4 <HAL_I2C_MspInit+0x1c0>)
 800248e:	f001 ff3f 	bl	8004310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002492:	4b4b      	ldr	r3, [pc, #300]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002498:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
 800249e:	4b48      	ldr	r3, [pc, #288]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80024aa:	e082      	b.n	80025b2 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a45      	ldr	r2, [pc, #276]	@ (80025c8 <HAL_I2C_MspInit+0x1c4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d13b      	bne.n	800252e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024be:	f107 0320 	add.w	r3, r7, #32
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 ffb2 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80024ce:	f7ff fddf 	bl	8002090 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024de:	4b38      	ldr	r3, [pc, #224]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ea:	2303      	movs	r3, #3
 80024ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f0:	2312      	movs	r3, #18
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002502:	2304      	movs	r3, #4
 8002504:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002508:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800250c:	4619      	mov	r1, r3
 800250e:	482f      	ldr	r0, [pc, #188]	@ (80025cc <HAL_I2C_MspInit+0x1c8>)
 8002510:	f001 fefe 	bl	8004310 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002514:	4b2a      	ldr	r3, [pc, #168]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	4a29      	ldr	r2, [pc, #164]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 800251a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800251e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]
}
 800252c:	e041      	b.n	80025b2 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C4)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a27      	ldr	r2, [pc, #156]	@ (80025d0 <HAL_I2C_MspInit+0x1cc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d13c      	bne.n	80025b2 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002538:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800253c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800253e:	2300      	movs	r3, #0
 8002540:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	f107 0320 	add.w	r3, r7, #32
 8002546:	4618      	mov	r0, r3
 8002548:	f003 ff70 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_MspInit+0x152>
      Error_Handler();
 8002552:	f7ff fd9d 	bl	8002090 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 800255c:	f043 0320 	orr.w	r3, r3, #32
 8002560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800256e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002576:	2312      	movs	r3, #18
 8002578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002588:	2304      	movs	r3, #4
 800258a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800258e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002592:	4619      	mov	r1, r3
 8002594:	480d      	ldr	r0, [pc, #52]	@ (80025cc <HAL_I2C_MspInit+0x1c8>)
 8002596:	f001 febb 	bl	8004310 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_I2C_MspInit+0x1bc>)
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
}
 80025b2:	bf00      	nop
 80025b4:	37c0      	adds	r7, #192	@ 0xc0
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40005400 	.word	0x40005400
 80025c0:	40021000 	.word	0x40021000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	40005800 	.word	0x40005800
 80025cc:	48001400 	.word	0x48001400
 80025d0:	40008400 	.word	0x40008400

080025d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0b2      	sub	sp, #200	@ 0xc8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f0:	228c      	movs	r2, #140	@ 0x8c
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 ffeb 	bl	80095d0 <memset>
  if(huart->Instance==LPUART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a84      	ldr	r2, [pc, #528]	@ (8002810 <HAL_UART_MspInit+0x23c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d13b      	bne.n	800267c <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002604:	2320      	movs	r3, #32
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002608:	2300      	movs	r3, #0
 800260a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800260c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002610:	4618      	mov	r0, r3
 8002612:	f003 ff0b 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800261c:	f7ff fd38 	bl	8002090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002620:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	4a7b      	ldr	r2, [pc, #492]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800262c:	4b79      	ldr	r3, [pc, #484]	@ (8002814 <HAL_UART_MspInit+0x240>)
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002638:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_UART_MspInit+0x240>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	4a75      	ldr	r2, [pc, #468]	@ (8002814 <HAL_UART_MspInit+0x240>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002644:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002650:	2303      	movs	r3, #3
 8002652:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002668:	2308      	movs	r3, #8
 800266a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002672:	4619      	mov	r1, r3
 8002674:	4868      	ldr	r0, [pc, #416]	@ (8002818 <HAL_UART_MspInit+0x244>)
 8002676:	f001 fe4b 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800267a:	e0c4      	b.n	8002806 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==UART4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a66      	ldr	r2, [pc, #408]	@ (800281c <HAL_UART_MspInit+0x248>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d13c      	bne.n	8002700 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002686:	2308      	movs	r3, #8
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800268a:	2300      	movs	r3, #0
 800268c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002692:	4618      	mov	r0, r3
 8002694:	f003 feca 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800269e:	f7ff fcf7 	bl	8002090 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80026a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ae:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b56      	ldr	r3, [pc, #344]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a55      	ldr	r2, [pc, #340]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026ec:	2308      	movs	r3, #8
 80026ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4847      	ldr	r0, [pc, #284]	@ (8002818 <HAL_UART_MspInit+0x244>)
 80026fa:	f001 fe09 	bl	8004310 <HAL_GPIO_Init>
}
 80026fe:	e082      	b.n	8002806 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a46      	ldr	r2, [pc, #280]	@ (8002820 <HAL_UART_MspInit+0x24c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d13c      	bne.n	8002784 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800270a:	2302      	movs	r3, #2
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800270e:	2300      	movs	r3, #0
 8002710:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fe88 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002722:	f7ff fcb5 	bl	8002090 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	4a3a      	ldr	r2, [pc, #232]	@ (8002814 <HAL_UART_MspInit+0x240>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002730:	6593      	str	r3, [r2, #88]	@ 0x58
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	4a34      	ldr	r2, [pc, #208]	@ (8002814 <HAL_UART_MspInit+0x240>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274a:	4b32      	ldr	r3, [pc, #200]	@ (8002814 <HAL_UART_MspInit+0x240>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002756:	230e      	movs	r3, #14
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276e:	2307      	movs	r3, #7
 8002770:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800277e:	f001 fdc7 	bl	8004310 <HAL_GPIO_Init>
}
 8002782:	e040      	b.n	8002806 <HAL_UART_MspInit+0x232>
  else if(huart->Instance==USART3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_UART_MspInit+0x250>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d13b      	bne.n	8002806 <HAL_UART_MspInit+0x232>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800278e:	2304      	movs	r3, #4
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fe46 	bl	800642c <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 80027a6:	f7ff fc73 	bl	8002090 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	4a19      	ldr	r2, [pc, #100]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b6:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	4a13      	ldr	r2, [pc, #76]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_UART_MspInit+0x240>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027f4:	2307      	movs	r3, #7
 80027f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fa:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80027fe:	4619      	mov	r1, r3
 8002800:	4809      	ldr	r0, [pc, #36]	@ (8002828 <HAL_UART_MspInit+0x254>)
 8002802:	f001 fd85 	bl	8004310 <HAL_GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	37c8      	adds	r7, #200	@ 0xc8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40008000 	.word	0x40008000
 8002814:	40021000 	.word	0x40021000
 8002818:	48000800 	.word	0x48000800
 800281c:	40004c00 	.word	0x40004c00
 8002820:	40004400 	.word	0x40004400
 8002824:	40004800 	.word	0x40004800
 8002828:	48000c00 	.word	0x48000c00

0800282c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a26      	ldr	r2, [pc, #152]	@ (80028e4 <HAL_QSPI_MspInit+0xb8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d145      	bne.n	80028da <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800284e:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002852:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6513      	str	r3, [r2, #80]	@ 0x50
 800285a:	4b23      	ldr	r3, [pc, #140]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 800285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002882:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_QSPI_MspInit+0xbc>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002896:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028a8:	230a      	movs	r3, #10
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	480e      	ldr	r0, [pc, #56]	@ (80028ec <HAL_QSPI_MspInit+0xc0>)
 80028b4:	f001 fd2c 	bl	8004310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028ca:	230a      	movs	r3, #10
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <HAL_QSPI_MspInit+0xc4>)
 80028d6:	f001 fd1b 	bl	8004310 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80028da:	bf00      	nop
 80028dc:	3728      	adds	r7, #40	@ 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	a0001000 	.word	0xa0001000
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48001000 	.word	0x48001000
 80028f0:	48000400 	.word	0x48000400

080028f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_SPI_MspInit+0xe0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12a      	bne.n	800296c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002916:	4b30      	ldr	r3, [pc, #192]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	4a2f      	ldr	r2, [pc, #188]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 800291c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002920:	6613      	str	r3, [r2, #96]	@ 0x60
 8002922:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800292e:	4b2a      	ldr	r3, [pc, #168]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002946:	f002 fe61 	bl	800560c <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800294a:	231c      	movs	r3, #28
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800295a:	2305      	movs	r3, #5
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	481d      	ldr	r0, [pc, #116]	@ (80029dc <HAL_SPI_MspInit+0xe8>)
 8002966:	f001 fcd3 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800296a:	e02f      	b.n	80029cc <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_SPI_MspInit+0xec>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12a      	bne.n	80029cc <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 800297c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002980:	6593      	str	r3, [r2, #88]	@ 0x58
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 8002994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <HAL_SPI_MspInit+0xe4>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80029a6:	f002 fe31 	bl	800560c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80029aa:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029bc:	2306      	movs	r3, #6
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	@ (80029dc <HAL_SPI_MspInit+0xe8>)
 80029c8:	f001 fca2 	bl	8004310 <HAL_GPIO_Init>
}
 80029cc:	bf00      	nop
 80029ce:	3730      	adds	r7, #48	@ 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40013000 	.word	0x40013000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	48001800 	.word	0x48001800
 80029e0:	40003c00 	.word	0x40003c00

080029e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <HAL_TIM_Base_MspInit+0x68>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10c      	bne.n	8002a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	4a15      	ldr	r2, [pc, #84]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 80029fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a02:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a0e:	e018      	b.n	8002a42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <HAL_TIM_Base_MspInit+0x70>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d113      	bne.n	8002a42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 8002a20:	f043 0320 	orr.w	r3, r3, #32
 8002a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_TIM_Base_MspInit+0x6c>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	2037      	movs	r0, #55	@ 0x37
 8002a38:	f001 fc33 	bl	80042a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a3c:	2037      	movs	r0, #55	@ 0x37
 8002a3e:	f001 fc4c 	bl	80042da <HAL_NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40001400 	.word	0x40001400

08002a58 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a78:	d129      	bne.n	8002ace <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a10      	ldr	r2, [pc, #64]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_TIM_IC_MspInit+0x80>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8002aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aca:	f001 fc21 	bl	8004310 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	@ 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	@ 0x38
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <HAL_TIM_Encoder_MspInit+0x138>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d129      	bne.n	8002b52 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afe:	4b46      	ldr	r3, [pc, #280]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	4a45      	ldr	r2, [pc, #276]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MZ_B_Pin|MZ_A_Pin;
 8002b2e:	23c0      	movs	r3, #192	@ 0xc0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b4c:	f001 fbe0 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b50:	e05b      	b.n	8002c0a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a31      	ldr	r2, [pc, #196]	@ (8002c1c <HAL_TIM_Encoder_MspInit+0x140>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d129      	bne.n	8002bb0 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b68:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MX_B_Pin|MX_A_Pin;
 8002b8c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481d      	ldr	r0, [pc, #116]	@ (8002c20 <HAL_TIM_Encoder_MspInit+0x144>)
 8002baa:	f001 fbb1 	bl	8004310 <HAL_GPIO_Init>
}
 8002bae:	e02c      	b.n	8002c0a <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM5)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_TIM_Encoder_MspInit+0x148>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d127      	bne.n	8002c0a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bba:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	4a16      	ldr	r2, [pc, #88]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	4a10      	ldr	r2, [pc, #64]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002bd8:	f043 0320 	orr.w	r3, r3, #32
 8002bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MY_B_Pin|MY_A_Pin;
 8002bea:	23c0      	movs	r3, #192	@ 0xc0
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	4808      	ldr	r0, [pc, #32]	@ (8002c28 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002c06:	f001 fb83 	bl	8004310 <HAL_GPIO_Init>
}
 8002c0a:	bf00      	nop
 8002c0c:	3738      	adds	r7, #56	@ 0x38
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	48000c00 	.word	0x48000c00
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	48001400 	.word	0x48001400

08002c2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <HAL_TIM_PWM_MspInit+0x38>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d10b      	bne.n	8002c56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c42:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40021000 	.word	0x40021000

08002c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a23      	ldr	r2, [pc, #140]	@ (8002d18 <HAL_TIM_MspPostInit+0xac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d11d      	bne.n	8002cca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8e:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002c94:	f043 0310 	orr.w	r3, r3, #16
 8002c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MZ_PWM_Pin|MY_PWM_Pin;
 8002ca6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4817      	ldr	r0, [pc, #92]	@ (8002d20 <HAL_TIM_MspPostInit+0xb4>)
 8002cc4:	f001 fb24 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002cc8:	e021      	b.n	8002d0e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a15      	ldr	r2, [pc, #84]	@ (8002d24 <HAL_TIM_MspPostInit+0xb8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d11c      	bne.n	8002d0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd8:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_TIM_MspPostInit+0xb0>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MX_PWM_Pin;
 8002cec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002cfe:	230e      	movs	r3, #14
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MX_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	4807      	ldr	r0, [pc, #28]	@ (8002d28 <HAL_TIM_MspPostInit+0xbc>)
 8002d0a:	f001 fb01 	bl	8004310 <HAL_GPIO_Init>
}
 8002d0e:	bf00      	nop
 8002d10:	3728      	adds	r7, #40	@ 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	48001000 	.word	0x48001000
 8002d24:	40014000 	.word	0x40014000
 8002d28:	48000400 	.word	0x48000400

08002d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <NMI_Handler+0x4>

08002d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <HardFault_Handler+0x4>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <MemManage_Handler+0x4>

08002d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d82:	f000 f89d 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <TIM7_IRQHandler+0x10>)
 8002d92:	f004 fc68 	bl	8007666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000670 	.word	0x20000670

08002da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	@ (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dc8:	f7ff ffea 	bl	8002da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dcc:	480c      	ldr	r0, [pc, #48]	@ (8002e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dce:	490d      	ldr	r1, [pc, #52]	@ (8002e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e08 <LoopForever+0xe>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd4:	e002      	b.n	8002ddc <LoopCopyDataInit>

08002dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dda:	3304      	adds	r3, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de0:	d3f9      	bcc.n	8002dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002de4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e10 <LoopForever+0x16>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de8:	e001      	b.n	8002dee <LoopFillZerobss>

08002dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dec:	3204      	adds	r2, #4

08002dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df0:	d3fb      	bcc.n	8002dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002df2:	f006 fbf5 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002df6:	f7fe f98b 	bl	8001110 <main>

08002dfa <LoopForever>:

LoopForever:
    b LoopForever
 8002dfa:	e7fe      	b.n	8002dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dfc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e08:	0800969c 	.word	0x0800969c
  ldr r2, =_sbss
 8002e0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002e10:	2000079c 	.word	0x2000079c

08002e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC1_2_IRQHandler>

08002e16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f001 fa33 	bl	800428c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f80e 	bl	8002e48 <HAL_InitTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	e001      	b.n	8002e3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e38:	f7ff f9f6 	bl	8002228 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <HAL_InitTick+0x6c>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <HAL_InitTick+0x70>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_InitTick+0x6c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fa3f 	bl	80042f6 <HAL_SYSTICK_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d809      	bhi.n	8002e98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f001 fa09 	bl	80042a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e90:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_InitTick+0x74>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e007      	b.n	8002ea8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e004      	b.n	8002ea8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e001      	b.n	8002ea8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000008 	.word	0x20000008
 8002ee4:	20000798 	.word	0x20000798

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000798 	.word	0x20000798

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff ffee 	bl	8002ee8 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000008 	.word	0x20000008

08002f48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3360      	adds	r3, #96	@ 0x60
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <LL_ADC_SetOffset+0x44>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	03fff000 	.word	0x03fff000

08002ff8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3360      	adds	r3, #96	@ 0x60
 8003006:	461a      	mov	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3360      	adds	r3, #96	@ 0x60
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	431a      	orrs	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	615a      	str	r2, [r3, #20]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3330      	adds	r3, #48	@ 0x30
 8003090:	461a      	mov	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	211f      	movs	r1, #31
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 011f 	and.w	r1, r3, #31
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	431a      	orrs	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3314      	adds	r3, #20
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	0e5b      	lsrs	r3, r3, #25
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	0d1b      	lsrs	r3, r3, #20
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	2107      	movs	r1, #7
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	0d1b      	lsrs	r3, r3, #20
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0318 	and.w	r3, r3, #24
 8003152:	4908      	ldr	r1, [pc, #32]	@ (8003174 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003154:	40d9      	lsrs	r1, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	400b      	ands	r3, r1
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	0007ffff 	.word	0x0007ffff

08003178 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6093      	str	r3, [r2, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b0:	d101      	bne.n	80031b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003200:	d101      	bne.n	8003206 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <LL_ADC_IsEnabled+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_ADC_IsEnabled+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d101      	bne.n	8003252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d101      	bne.n	8003278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b089      	sub	sp, #36	@ 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e133      	b.n	800350a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fe ffdd 	bl	8002270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff67 	bl	800319c <LL_ADC_IsDeepPowerDownEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff ff4d 	bl	8003178 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff82 	bl	80031ec <LL_ADC_IsInternalRegulatorEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff66 	bl	80031c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f8:	4b86      	ldr	r3, [pc, #536]	@ (8003514 <HAL_ADC_Init+0x28c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	4a86      	ldr	r2, [pc, #536]	@ (8003518 <HAL_ADC_Init+0x290>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800330c:	e002      	b.n	8003314 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3b01      	subs	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f9      	bne.n	800330e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff64 	bl	80031ec <LL_ADC_IsInternalRegulatorEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10d      	bne.n	8003346 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	f043 0210 	orr.w	r2, r3, #16
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff75 	bl	800323a <LL_ADC_REG_IsConversionOngoing>
 8003350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 80cc 	bne.w	80034f8 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80c8 	bne.w	80034f8 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff49 	bl	8003214 <LL_ADC_IsEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d115      	bne.n	80033b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003388:	4864      	ldr	r0, [pc, #400]	@ (800351c <HAL_ADC_Init+0x294>)
 800338a:	f7ff ff43 	bl	8003214 <LL_ADC_IsEnabled>
 800338e:	4604      	mov	r4, r0
 8003390:	4863      	ldr	r0, [pc, #396]	@ (8003520 <HAL_ADC_Init+0x298>)
 8003392:	f7ff ff3f 	bl	8003214 <LL_ADC_IsEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	431c      	orrs	r4, r3
 800339a:	4862      	ldr	r0, [pc, #392]	@ (8003524 <HAL_ADC_Init+0x29c>)
 800339c:	f7ff ff3a 	bl	8003214 <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4323      	orrs	r3, r4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4619      	mov	r1, r3
 80033ae:	485e      	ldr	r0, [pc, #376]	@ (8003528 <HAL_ADC_Init+0x2a0>)
 80033b0:	f7ff fdca 	bl	8002f48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e5b      	ldrb	r3, [r3, #25]
 80033b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	3b01      	subs	r3, #1
 80033e8:	045b      	lsls	r3, r3, #17
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b46      	ldr	r3, [pc, #280]	@ (800352c <HAL_ADC_Init+0x2a4>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff1b 	bl	8003260 <LL_ADC_INJ_IsConversionOngoing>
 800342a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d140      	bne.n	80034b4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13d      	bne.n	80034b4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e1b      	ldrb	r3, [r3, #24]
 8003440:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003442:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800344a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800345a:	f023 0306 	bic.w	r3, r3, #6
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	430b      	orrs	r3, r1
 8003466:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800346e:	2b01      	cmp	r3, #1
 8003470:	d118      	bne.n	80034a4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003494:	430a      	orrs	r2, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10c      	bne.n	80034d6 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f023 010f 	bic.w	r1, r3, #15
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	1e5a      	subs	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d4:	e007      	b.n	80034e6 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 020f 	bic.w	r2, r2, #15
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80034f6:	e007      	b.n	8003508 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003508:	7ffb      	ldrb	r3, [r7, #31]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	@ 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	20000000 	.word	0x20000000
 8003518:	053e2d63 	.word	0x053e2d63
 800351c:	50040000 	.word	0x50040000
 8003520:	50040100 	.word	0x50040100
 8003524:	50040200 	.word	0x50040200
 8003528:	50040300 	.word	0x50040300
 800352c:	fff0c007 	.word	0xfff0c007

08003530 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0b6      	sub	sp, #216	@ 0xd8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x22>
 800354e:	2302      	movs	r3, #2
 8003550:	e3e3      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x7ea>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe6b 	bl	800323a <LL_ADC_REG_IsConversionOngoing>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 83c4 	bne.w	8003cf4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d824      	bhi.n	80035c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	3b02      	subs	r3, #2
 8003582:	2b03      	cmp	r3, #3
 8003584:	d81b      	bhi.n	80035be <HAL_ADC_ConfigChannel+0x8e>
 8003586:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <HAL_ADC_ConfigChannel+0x5c>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035a5 	.word	0x080035a5
 8003594:	080035ad 	.word	0x080035ad
 8003598:	080035b5 	.word	0x080035b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800359c:	230c      	movs	r3, #12
 800359e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035a2:	e010      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035a4:	2312      	movs	r3, #18
 80035a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035aa:	e00c      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035ac:	2318      	movs	r3, #24
 80035ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035b2:	e008      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035bc:	e003      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035be:	2306      	movs	r3, #6
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80035c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80035d4:	f7ff fd54 	bl	8003080 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fe2c 	bl	800323a <LL_ADC_REG_IsConversionOngoing>
 80035e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fe38 	bl	8003260 <LL_ADC_INJ_IsConversionOngoing>
 80035f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f040 81bf 	bne.w	800397c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 81ba 	bne.w	800397c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003610:	d10f      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	4619      	mov	r1, r3
 800361e:	f7ff fd5b 	bl	80030d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fd15 	bl	800305a <LL_ADC_SetSamplingTimeCommonConfig>
 8003630:	e00e      	b.n	8003650 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	461a      	mov	r2, r3
 8003640:	f7ff fd4a 	bl	80030d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fd05 	bl	800305a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00a      	beq.n	8003688 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6919      	ldr	r1, [r3, #16]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003682:	f7ff fc95 	bl	8002fb0 <LL_ADC_SetOffset>
 8003686:	e179      	b.n	800397c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fcb2 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x184>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fca7 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	e01e      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x1c2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fc9c 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e004      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80036e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_ADC_ConfigChannel+0x1da>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	e018      	b.n	800373c <HAL_ADC_ConfigChannel+0x20c>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800371e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fc6b 	bl	8003024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fc4f 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 800375a:	4603      	mov	r3, r0
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <HAL_ADC_ConfigChannel+0x24a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fc44 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	e01e      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x288>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fc39 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003798:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800379c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80037a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80037a8:	2320      	movs	r3, #32
 80037aa:	e004      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80037ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x2a0>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	e018      	b.n	8003802 <HAL_ADC_ConfigChannel+0x2d2>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80037e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e004      	b.n	8003802 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80037f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fc08 	bl	8003024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2102      	movs	r1, #2
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fbec 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x310>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fbe1 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 021f 	and.w	r2, r3, #31
 800383e:	e01e      	b.n	800387e <HAL_ADC_ConfigChannel+0x34e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fbd6 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800385e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x366>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	e014      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x390>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80038a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80038aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80038b2:	2320      	movs	r3, #32
 80038b4:	e004      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80038b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d106      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fba9 	bl	8003024 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2103      	movs	r1, #3
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fb8d 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x3ce>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2103      	movs	r1, #3
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb82 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	0e9b      	lsrs	r3, r3, #26
 80038f8:	f003 021f 	and.w	r2, r3, #31
 80038fc:	e017      	b.n	800392e <HAL_ADC_ConfigChannel+0x3fe>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2103      	movs	r1, #3
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fb77 	bl	8002ff8 <LL_ADC_GetOffsetChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003918:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800391a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003920:	2320      	movs	r3, #32
 8003922:	e003      	b.n	800392c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x416>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0e9b      	lsrs	r3, r3, #26
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	e011      	b.n	800396a <HAL_ADC_ConfigChannel+0x43a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003954:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003956:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e003      	b.n	800396a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800396a:	429a      	cmp	r2, r3
 800396c:	d106      	bne.n	800397c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	2103      	movs	r1, #3
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fb54 	bl	8003024 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fc47 	bl	8003214 <LL_ADC_IsEnabled>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 813f 	bne.w	8003c0c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	f7ff fbc8 	bl	8003130 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a8e      	ldr	r2, [pc, #568]	@ (8003be0 <HAL_ADC_ConfigChannel+0x6b0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f040 8130 	bne.w	8003c0c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x4a4>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0e9b      	lsrs	r3, r3, #26
 80039c2:	3301      	adds	r3, #1
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	bf94      	ite	ls
 80039cc:	2301      	movls	r3, #1
 80039ce:	2300      	movhi	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	e019      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x4d8>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80039e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	e003      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80039f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2b09      	cmp	r3, #9
 8003a00:	bf94      	ite	ls
 8003a02:	2301      	movls	r3, #1
 8003a04:	2300      	movhi	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d079      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x4f8>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	3301      	adds	r3, #1
 8003a20:	069b      	lsls	r3, r3, #26
 8003a22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a26:	e015      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x524>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a38:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003a40:	2320      	movs	r3, #32
 8003a42:	e003      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	069b      	lsls	r3, r3, #26
 8003a50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x544>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	3301      	adds	r3, #1
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a72:	e017      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x574>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	e003      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	ea42 0103 	orr.w	r1, r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x59a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e9b      	lsrs	r3, r3, #26
 8003aba:	3301      	adds	r3, #1
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	051b      	lsls	r3, r3, #20
 8003ac8:	e018      	b.n	8003afc <HAL_ADC_ConfigChannel+0x5cc>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003ae2:	2320      	movs	r3, #32
 8003ae4:	e003      	b.n	8003aee <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003afc:	430b      	orrs	r3, r1
 8003afe:	e080      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d107      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x5ec>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0e9b      	lsrs	r3, r3, #26
 8003b12:	3301      	adds	r3, #1
 8003b14:	069b      	lsls	r3, r3, #26
 8003b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b1a:	e015      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x618>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003b34:	2320      	movs	r3, #32
 8003b36:	e003      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	069b      	lsls	r3, r3, #26
 8003b44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x638>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	e017      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x668>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	61bb      	str	r3, [r7, #24]
  return result;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003b80:	2320      	movs	r3, #32
 8003b82:	e003      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2101      	movs	r1, #1
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	ea42 0103 	orr.w	r1, r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x694>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	3b1e      	subs	r3, #30
 8003bbc:	051b      	lsls	r3, r3, #20
 8003bbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bc2:	e01d      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x6d0>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
  return result;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e005      	b.n	8003bec <HAL_ADC_ConfigChannel+0x6bc>
 8003be0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3b1e      	subs	r3, #30
 8003bfa:	051b      	lsls	r3, r3, #20
 8003bfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c00:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7ff fa66 	bl	80030d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b44      	ldr	r3, [pc, #272]	@ (8003d24 <HAL_ADC_ConfigChannel+0x7f4>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d07a      	beq.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c18:	4843      	ldr	r0, [pc, #268]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7f8>)
 8003c1a:	f7ff f9bb 	bl	8002f94 <LL_ADC_GetCommonPathInternalCh>
 8003c1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a41      	ldr	r2, [pc, #260]	@ (8003d2c <HAL_ADC_ConfigChannel+0x7fc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d12c      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d126      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <HAL_ADC_ConfigChannel+0x800>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x71c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <HAL_ADC_ConfigChannel+0x804>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d15d      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c54:	4619      	mov	r1, r3
 8003c56:	4834      	ldr	r0, [pc, #208]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7f8>)
 8003c58:	f7ff f989 	bl	8002f6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_ADC_ConfigChannel+0x808>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	4a36      	ldr	r2, [pc, #216]	@ (8003d3c <HAL_ADC_ConfigChannel+0x80c>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c76:	e002      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f9      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c84:	e040      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d40 <HAL_ADC_ConfigChannel+0x810>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d118      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d112      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	@ (8003d30 <HAL_ADC_ConfigChannel+0x800>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_ADC_ConfigChannel+0x780>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a22      	ldr	r2, [pc, #136]	@ (8003d34 <HAL_ADC_ConfigChannel+0x804>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d12d      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cb8:	4619      	mov	r1, r3
 8003cba:	481b      	ldr	r0, [pc, #108]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7f8>)
 8003cbc:	f7ff f957 	bl	8002f6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc0:	e024      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <HAL_ADC_ConfigChannel+0x814>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d120      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11a      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <HAL_ADC_ConfigChannel+0x800>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d115      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ce6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cea:	4619      	mov	r1, r3
 8003cec:	480e      	ldr	r0, [pc, #56]	@ (8003d28 <HAL_ADC_ConfigChannel+0x7f8>)
 8003cee:	f7ff f93e 	bl	8002f6e <LL_ADC_SetCommonPathInternalCh>
 8003cf2:	e00c      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003d06:	e002      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	37d8      	adds	r7, #216	@ 0xd8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	80080000 	.word	0x80080000
 8003d28:	50040300 	.word	0x50040300
 8003d2c:	c7520000 	.word	0xc7520000
 8003d30:	50040000 	.word	0x50040000
 8003d34:	50040200 	.word	0x50040200
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	053e2d63 	.word	0x053e2d63
 8003d40:	cb840000 	.word	0xcb840000
 8003d44:	80000001 	.word	0x80000001

08003d48 <LL_ADC_IsEnabled>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <LL_ADC_IsEnabled+0x18>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <LL_ADC_IsEnabled+0x1a>
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d101      	bne.n	8003d86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b0a1      	sub	sp, #132	@ 0x84
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e093      	b.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a47      	ldr	r2, [pc, #284]	@ (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003dcc:	4b46      	ldr	r3, [pc, #280]	@ (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e001      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e072      	b.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ffb9 	bl	8003d6e <LL_ADC_REG_IsConversionOngoing>
 8003dfc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ffb3 	bl	8003d6e <LL_ADC_REG_IsConversionOngoing>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d154      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d151      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e14:	4b35      	ldr	r3, [pc, #212]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003e16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02c      	beq.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e32:	035b      	lsls	r3, r3, #13
 8003e34:	430b      	orrs	r3, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e3c:	4829      	ldr	r0, [pc, #164]	@ (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e3e:	f7ff ff83 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	4828      	ldr	r0, [pc, #160]	@ (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e46:	f7ff ff7f 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	431c      	orrs	r4, r3
 8003e4e:	4828      	ldr	r0, [pc, #160]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e50:	f7ff ff7a 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d137      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	6811      	ldr	r1, [r2, #0]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e78:	e028      	b.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e86:	4817      	ldr	r0, [pc, #92]	@ (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e88:	f7ff ff5e 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	4816      	ldr	r0, [pc, #88]	@ (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e90:	f7ff ff5a 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	431c      	orrs	r4, r3
 8003e98:	4815      	ldr	r0, [pc, #84]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e9a:	f7ff ff55 	bl	8003d48 <LL_ADC_IsEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4323      	orrs	r3, r4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d112      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003eae:	f023 030f 	bic.w	r3, r3, #15
 8003eb2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003eb4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb6:	e009      	b.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003eca:	e000      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ed6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3784      	adds	r7, #132	@ 0x84
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	50040000 	.word	0x50040000
 8003ee8:	50040100 	.word	0x50040100
 8003eec:	50040300 	.word	0x50040300
 8003ef0:	50040200 	.word	0x50040200

08003ef4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0ed      	b.n	80040e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fa32 	bl	800237c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f28:	f7fe ffde 	bl	8002ee8 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f2e:	e012      	b.n	8003f56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f30:	f7fe ffda 	bl	8002ee8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b0a      	cmp	r3, #10
 8003f3c:	d90b      	bls.n	8003f56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2205      	movs	r2, #5
 8003f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0c5      	b.n	80040e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0e5      	beq.n	8003f30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0202 	bic.w	r2, r2, #2
 8003f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f74:	f7fe ffb8 	bl	8002ee8 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f7a:	e012      	b.n	8003fa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f7c:	f7fe ffb4 	bl	8002ee8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b0a      	cmp	r3, #10
 8003f88:	d90b      	bls.n	8003fa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e09f      	b.n	80040e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7e1b      	ldrb	r3, [r3, #24]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d108      	bne.n	8003fca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e007      	b.n	8003fda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	7e5b      	ldrb	r3, [r3, #25]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e007      	b.n	8004004 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7e9b      	ldrb	r3, [r3, #26]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0220 	orr.w	r2, r2, #32
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e007      	b.n	800402e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0220 	bic.w	r2, r2, #32
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7edb      	ldrb	r3, [r3, #27]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0210 	bic.w	r2, r2, #16
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0210 	orr.w	r2, r2, #16
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7f1b      	ldrb	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d108      	bne.n	8004072 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e007      	b.n	8004082 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7f5b      	ldrb	r3, [r3, #29]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0204 	orr.w	r2, r2, #4
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e007      	b.n	80040ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004108:	4013      	ands	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411e:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <__NVIC_SetPriorityGrouping+0x44>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	60d3      	str	r3, [r2, #12]
}
 8004124:	bf00      	nop
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <__NVIC_GetPriorityGrouping+0x18>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	f003 0307 	and.w	r3, r3, #7
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	db0b      	blt.n	800417a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	4907      	ldr	r1, [pc, #28]	@ (8004188 <__NVIC_EnableIRQ+0x38>)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2001      	movs	r0, #1
 8004172:	fa00 f202 	lsl.w	r2, r0, r2
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	e000e100 	.word	0xe000e100

0800418c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	2b00      	cmp	r3, #0
 800419e:	db0a      	blt.n	80041b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	490c      	ldr	r1, [pc, #48]	@ (80041d8 <__NVIC_SetPriority+0x4c>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	0112      	lsls	r2, r2, #4
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	440b      	add	r3, r1
 80041b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b4:	e00a      	b.n	80041cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	4908      	ldr	r1, [pc, #32]	@ (80041dc <__NVIC_SetPriority+0x50>)
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	3b04      	subs	r3, #4
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	440b      	add	r3, r1
 80041ca:	761a      	strb	r2, [r3, #24]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000e100 	.word	0xe000e100
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	@ 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f1c3 0307 	rsb	r3, r3, #7
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	bf28      	it	cs
 80041fe:	2304      	movcs	r3, #4
 8004200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3304      	adds	r3, #4
 8004206:	2b06      	cmp	r3, #6
 8004208:	d902      	bls.n	8004210 <NVIC_EncodePriority+0x30>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3b03      	subs	r3, #3
 800420e:	e000      	b.n	8004212 <NVIC_EncodePriority+0x32>
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	401a      	ands	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004228:	f04f 31ff 	mov.w	r1, #4294967295
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	43d9      	mvns	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004238:	4313      	orrs	r3, r2
         );
}
 800423a:	4618      	mov	r0, r3
 800423c:	3724      	adds	r7, #36	@ 0x24
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004258:	d301      	bcc.n	800425e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800425a:	2301      	movs	r3, #1
 800425c:	e00f      	b.n	800427e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800425e:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <SysTick_Config+0x40>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004266:	210f      	movs	r1, #15
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f7ff ff8e 	bl	800418c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004270:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <SysTick_Config+0x40>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004276:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <SysTick_Config+0x40>)
 8004278:	2207      	movs	r2, #7
 800427a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000e010 	.word	0xe000e010

0800428c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff29 	bl	80040ec <__NVIC_SetPriorityGrouping>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042b4:	f7ff ff3e 	bl	8004134 <__NVIC_GetPriorityGrouping>
 80042b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f7ff ff8e 	bl	80041e0 <NVIC_EncodePriority>
 80042c4:	4602      	mov	r2, r0
 80042c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff5d 	bl	800418c <__NVIC_SetPriority>
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff31 	bl	8004150 <__NVIC_EnableIRQ>
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffa2 	bl	8004248 <SysTick_Config>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431e:	e166      	b.n	80045ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8158 	beq.w	80045e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d005      	beq.n	8004350 <HAL_GPIO_Init+0x40>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d130      	bne.n	80043b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4013      	ands	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004386:	2201      	movs	r2, #1
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0201 	and.w	r2, r3, #1
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d017      	beq.n	80043ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d123      	bne.n	8004442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	220f      	movs	r2, #15
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3208      	adds	r2, #8
 800443c:	6939      	ldr	r1, [r7, #16]
 800443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0203 	and.w	r2, r3, #3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80b2 	beq.w	80045e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004484:	4b61      	ldr	r3, [pc, #388]	@ (800460c <HAL_GPIO_Init+0x2fc>)
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	4a60      	ldr	r2, [pc, #384]	@ (800460c <HAL_GPIO_Init+0x2fc>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004490:	4b5e      	ldr	r3, [pc, #376]	@ (800460c <HAL_GPIO_Init+0x2fc>)
 8004492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800449c:	4a5c      	ldr	r2, [pc, #368]	@ (8004610 <HAL_GPIO_Init+0x300>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	220f      	movs	r2, #15
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044c6:	d02b      	beq.n	8004520 <HAL_GPIO_Init+0x210>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a52      	ldr	r2, [pc, #328]	@ (8004614 <HAL_GPIO_Init+0x304>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d025      	beq.n	800451c <HAL_GPIO_Init+0x20c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a51      	ldr	r2, [pc, #324]	@ (8004618 <HAL_GPIO_Init+0x308>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d01f      	beq.n	8004518 <HAL_GPIO_Init+0x208>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a50      	ldr	r2, [pc, #320]	@ (800461c <HAL_GPIO_Init+0x30c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d019      	beq.n	8004514 <HAL_GPIO_Init+0x204>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004620 <HAL_GPIO_Init+0x310>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <HAL_GPIO_Init+0x200>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004624 <HAL_GPIO_Init+0x314>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00d      	beq.n	800450c <HAL_GPIO_Init+0x1fc>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a4d      	ldr	r2, [pc, #308]	@ (8004628 <HAL_GPIO_Init+0x318>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <HAL_GPIO_Init+0x1f8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a4c      	ldr	r2, [pc, #304]	@ (800462c <HAL_GPIO_Init+0x31c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d101      	bne.n	8004504 <HAL_GPIO_Init+0x1f4>
 8004500:	2307      	movs	r3, #7
 8004502:	e00e      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004504:	2308      	movs	r3, #8
 8004506:	e00c      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004508:	2306      	movs	r3, #6
 800450a:	e00a      	b.n	8004522 <HAL_GPIO_Init+0x212>
 800450c:	2305      	movs	r3, #5
 800450e:	e008      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004510:	2304      	movs	r3, #4
 8004512:	e006      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004514:	2303      	movs	r3, #3
 8004516:	e004      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004518:	2302      	movs	r3, #2
 800451a:	e002      	b.n	8004522 <HAL_GPIO_Init+0x212>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_GPIO_Init+0x212>
 8004520:	2300      	movs	r3, #0
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	f002 0203 	and.w	r2, r2, #3
 8004528:	0092      	lsls	r2, r2, #2
 800452a:	4093      	lsls	r3, r2
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004532:	4937      	ldr	r1, [pc, #220]	@ (8004610 <HAL_GPIO_Init+0x300>)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	3302      	adds	r3, #2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004540:	4b3b      	ldr	r3, [pc, #236]	@ (8004630 <HAL_GPIO_Init+0x320>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004564:	4a32      	ldr	r2, [pc, #200]	@ (8004630 <HAL_GPIO_Init+0x320>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800456a:	4b31      	ldr	r3, [pc, #196]	@ (8004630 <HAL_GPIO_Init+0x320>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	43db      	mvns	r3, r3
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800458e:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <HAL_GPIO_Init+0x320>)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004594:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_GPIO_Init+0x320>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_GPIO_Init+0x320>)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045be:	4b1c      	ldr	r3, [pc, #112]	@ (8004630 <HAL_GPIO_Init+0x320>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045e2:	4a13      	ldr	r2, [pc, #76]	@ (8004630 <HAL_GPIO_Init+0x320>)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3301      	adds	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f47f ae91 	bne.w	8004320 <HAL_GPIO_Init+0x10>
  }
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40021000 	.word	0x40021000
 8004610:	40010000 	.word	0x40010000
 8004614:	48000400 	.word	0x48000400
 8004618:	48000800 	.word	0x48000800
 800461c:	48000c00 	.word	0x48000c00
 8004620:	48001000 	.word	0x48001000
 8004624:	48001400 	.word	0x48001400
 8004628:	48001800 	.word	0x48001800
 800462c:	48001c00 	.word	0x48001c00
 8004630:	40010400 	.word	0x40010400

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004650:	e002      	b.n	8004658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004676:	887a      	ldrh	r2, [r7, #2]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4013      	ands	r3, r2
 800467c:	041a      	lsls	r2, r3, #16
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43d9      	mvns	r1, r3
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	400b      	ands	r3, r1
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	619a      	str	r2, [r3, #24]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e08d      	b.n	80047c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fea0 	bl	8002404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2224      	movs	r2, #36	@ 0x24
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e006      	b.n	8004720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800471e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d108      	bne.n	800473a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	e007      	b.n	800474a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800475c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800476c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69d9      	ldr	r1, [r3, #28]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	461a      	mov	r2, r3
 80047dc:	460b      	mov	r3, r1
 80047de:	817b      	strh	r3, [r7, #10]
 80047e0:	4613      	mov	r3, r2
 80047e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	f040 80fd 	bne.w	80049ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_I2C_Master_Transmit+0x30>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0f6      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004808:	f7fe fb6e 	bl	8002ee8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2319      	movs	r3, #25
 8004814:	2201      	movs	r2, #1
 8004816:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fb78 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0e1      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2221      	movs	r2, #33	@ 0x21
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2210      	movs	r2, #16
 8004836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	893a      	ldrh	r2, [r7, #8]
 800484a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2bff      	cmp	r3, #255	@ 0xff
 800485a:	d906      	bls.n	800486a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	22ff      	movs	r2, #255	@ 0xff
 8004860:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e007      	b.n	800487a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004878:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d024      	beq.n	80048cc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	8979      	ldrh	r1, [r7, #10]
 80048be:	4b4e      	ldr	r3, [pc, #312]	@ (80049f8 <HAL_I2C_Master_Transmit+0x228>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fd73 	bl	80053b0 <I2C_TransferConfig>
 80048ca:	e066      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	4b48      	ldr	r3, [pc, #288]	@ (80049f8 <HAL_I2C_Master_Transmit+0x228>)
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fd68 	bl	80053b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80048e0:	e05b      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	6a39      	ldr	r1, [r7, #32]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fb6b 	bl	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07b      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d034      	beq.n	800499a <HAL_I2C_Master_Transmit+0x1ca>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d130      	bne.n	800499a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2200      	movs	r2, #0
 8004940:	2180      	movs	r1, #128	@ 0x80
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fae4 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e04d      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2bff      	cmp	r3, #255	@ 0xff
 800495a:	d90e      	bls.n	800497a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	22ff      	movs	r2, #255	@ 0xff
 8004960:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004966:	b2da      	uxtb	r2, r3
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fd1c 	bl	80053b0 <I2C_TransferConfig>
 8004978:	e00f      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fd0b 	bl	80053b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d19e      	bne.n	80048e2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	6a39      	ldr	r1, [r7, #32]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fb51 	bl	8005050 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e01a      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2220      	movs	r2, #32
 80049be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <HAL_I2C_Master_Transmit+0x22c>)
 80049cc:	400b      	ands	r3, r1
 80049ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	80002000 	.word	0x80002000
 80049fc:	fe00e800 	.word	0xfe00e800

08004a00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	817b      	strh	r3, [r7, #10]
 8004a10:	4613      	mov	r3, r2
 8004a12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	f040 80db 	bne.w	8004bd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2C_Master_Receive+0x30>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0d4      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a38:	f7fe fa56 	bl	8002ee8 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	2319      	movs	r3, #25
 8004a44:	2201      	movs	r2, #1
 8004a46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fa60 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0bf      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2222      	movs	r2, #34	@ 0x22
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2210      	movs	r2, #16
 8004a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2bff      	cmp	r3, #255	@ 0xff
 8004a8a:	d90e      	bls.n	8004aaa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	8979      	ldrh	r1, [r7, #10]
 8004a9a:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <HAL_I2C_Master_Receive+0x1e4>)
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fc84 	bl	80053b0 <I2C_TransferConfig>
 8004aa8:	e06d      	b.n	8004b86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	8979      	ldrh	r1, [r7, #10]
 8004abc:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <HAL_I2C_Master_Receive+0x1e4>)
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fc73 	bl	80053b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004aca:	e05c      	b.n	8004b86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	6a39      	ldr	r1, [r7, #32]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fb01 	bl	80050d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e07c      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d034      	beq.n	8004b86 <HAL_I2C_Master_Receive+0x186>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d130      	bne.n	8004b86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f9ee 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e04d      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2bff      	cmp	r3, #255	@ 0xff
 8004b46:	d90e      	bls.n	8004b66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	22ff      	movs	r2, #255	@ 0xff
 8004b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	8979      	ldrh	r1, [r7, #10]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fc26 	bl	80053b0 <I2C_TransferConfig>
 8004b64:	e00f      	b.n	8004b86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	8979      	ldrh	r1, [r7, #10]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fc15 	bl	80053b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d19d      	bne.n	8004acc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	6a39      	ldr	r1, [r7, #32]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fa5b 	bl	8005050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e01a      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <HAL_I2C_Master_Receive+0x1e8>)
 8004bb8:	400b      	ands	r3, r1
 8004bba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	80002400 	.word	0x80002400
 8004be8:	fe00e800 	.word	0xfe00e800

08004bec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	f040 80fd 	bne.w	8004e0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x34>
 8004c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0f1      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Mem_Read+0x4e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0ea      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c42:	f7fe f951 	bl	8002ee8 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2319      	movs	r3, #25
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f95b 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0d5      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2222      	movs	r2, #34	@ 0x22
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2240      	movs	r2, #64	@ 0x40
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c8c:	88f8      	ldrh	r0, [r7, #6]
 8004c8e:	893a      	ldrh	r2, [r7, #8]
 8004c90:	8979      	ldrh	r1, [r7, #10]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f8bf 	bl	8004e20 <I2C_RequestMemoryRead>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0ad      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2bff      	cmp	r3, #255	@ 0xff
 8004cbc:	d90e      	bls.n	8004cdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	8979      	ldrh	r1, [r7, #10]
 8004ccc:	4b52      	ldr	r3, [pc, #328]	@ (8004e18 <HAL_I2C_Mem_Read+0x22c>)
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fb6b 	bl	80053b0 <I2C_TransferConfig>
 8004cda:	e00f      	b.n	8004cfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	8979      	ldrh	r1, [r7, #10]
 8004cee:	4b4a      	ldr	r3, [pc, #296]	@ (8004e18 <HAL_I2C_Mem_Read+0x22c>)
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fb5a 	bl	80053b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	2200      	movs	r2, #0
 8004d04:	2104      	movs	r1, #4
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 f902 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07c      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d034      	beq.n	8004dbc <HAL_I2C_Mem_Read+0x1d0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d130      	bne.n	8004dbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	2200      	movs	r2, #0
 8004d62:	2180      	movs	r1, #128	@ 0x80
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f8d3 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e04d      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2bff      	cmp	r3, #255	@ 0xff
 8004d7c:	d90e      	bls.n	8004d9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	8979      	ldrh	r1, [r7, #10]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fb0b 	bl	80053b0 <I2C_TransferConfig>
 8004d9a:	e00f      	b.n	8004dbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	8979      	ldrh	r1, [r7, #10]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fafa 	bl	80053b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d19a      	bne.n	8004cfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f940 	bl	8005050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e01a      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2220      	movs	r2, #32
 8004de0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <HAL_I2C_Mem_Read+0x230>)
 8004dee:	400b      	ands	r3, r1
 8004df0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e000      	b.n	8004e10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
  }
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	80002400 	.word	0x80002400
 8004e1c:	fe00e800 	.word	0xfe00e800

08004e20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	460b      	mov	r3, r1
 8004e34:	813b      	strh	r3, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	8979      	ldrh	r1, [r7, #10]
 8004e40:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <I2C_RequestMemoryRead+0xa4>)
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fab2 	bl	80053b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f8b6 	bl	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e02c      	b.n	8004eba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e70:	e015      	b.n	8004e9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e72:	893b      	ldrh	r3, [r7, #8]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f89c 	bl	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e012      	b.n	8004eba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e94:	893b      	ldrh	r3, [r7, #8]
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2140      	movs	r1, #64	@ 0x40
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f831 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	80002000 	.word	0x80002000

08004ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d007      	beq.n	8004f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	619a      	str	r2, [r3, #24]
  }
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f20:	e03b      	b.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f962 	bl	80051f0 <I2C_IsErrorOccurred>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e041      	b.n	8004fba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d02d      	beq.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fd ffd3 	bl	8002ee8 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d122      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d113      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00f      	b.n	8004fba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d0b4      	beq.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fce:	e033      	b.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f90b 	bl	80051f0 <I2C_IsErrorOccurred>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e031      	b.n	8005048 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fea:	d025      	beq.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fec:	f7fd ff7c 	bl	8002ee8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d302      	bcc.n	8005002 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11a      	bne.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d013      	beq.n	8005038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e007      	b.n	8005048 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d1c4      	bne.n	8004fd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800505c:	e02f      	b.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8c4 	bl	80051f0 <I2C_IsErrorOccurred>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e02d      	b.n	80050ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fd ff39 	bl	8002ee8 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d11a      	bne.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b20      	cmp	r3, #32
 8005094:	d013      	beq.n	80050be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e007      	b.n	80050ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d1c8      	bne.n	800505e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80050e8:	e071      	b.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f87e 	bl	80051f0 <I2C_IsErrorOccurred>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b20      	cmp	r3, #32
 800510a:	d13b      	bne.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d138      	bne.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d105      	bne.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d121      	bne.n	800517e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2210      	movs	r2, #16
 8005140:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2204      	movs	r2, #4
 8005146:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2220      	movs	r2, #32
 800514e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4b24      	ldr	r3, [pc, #144]	@ (80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800515c:	400b      	ands	r3, r1
 800515e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	75fb      	strb	r3, [r7, #23]
 800517c:	e002      	b.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005184:	f7fd feb0 	bl	8002ee8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d119      	bne.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00f      	beq.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d002      	beq.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d083      	beq.n	80050ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	fe00e800 	.word	0xfe00e800

080051f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	@ 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d068      	beq.n	80052ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2210      	movs	r2, #16
 8005222:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005224:	e049      	b.n	80052ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d045      	beq.n	80052ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fd fe5b 	bl	8002ee8 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_IsErrorOccurred+0x54>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d13a      	bne.n	80052ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005256:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005266:	d121      	bne.n	80052ac <I2C_IsErrorOccurred+0xbc>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800526e:	d01d      	beq.n	80052ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	2b20      	cmp	r3, #32
 8005274:	d01a      	beq.n	80052ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005284:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005286:	f7fd fe2f 	bl	8002ee8 <HAL_GetTick>
 800528a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528c:	e00e      	b.n	80052ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800528e:	f7fd fe2b 	bl	8002ee8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b19      	cmp	r3, #25
 800529a:	d907      	bls.n	80052ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	f043 0320 	orr.w	r3, r3, #32
 80052a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80052aa:	e006      	b.n	80052ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d1e9      	bne.n	800528e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d003      	beq.n	80052d0 <I2C_IsErrorOccurred+0xe0>
 80052c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0aa      	beq.n	8005226 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2220      	movs	r2, #32
 80052de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f043 0308 	orr.w	r3, r3, #8
 8005328:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	f043 0302 	orr.w	r3, r3, #2
 800534a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800535c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01c      	beq.n	800539e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff fdaf 	bl	8004ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <I2C_IsErrorOccurred+0x1bc>)
 8005376:	400b      	ands	r3, r1
 8005378:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800539e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	@ 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	fe00e800 	.word	0xfe00e800

080053b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	817b      	strh	r3, [r7, #10]
 80053be:	4613      	mov	r3, r2
 80053c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053c8:	7a7b      	ldrb	r3, [r7, #9]
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	4313      	orrs	r3, r2
 80053da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	0d5b      	lsrs	r3, r3, #21
 80053ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <I2C_TransferConfig+0x60>)
 80053f0:	430b      	orrs	r3, r1
 80053f2:	43db      	mvns	r3, r3
 80053f4:	ea02 0103 	and.w	r1, r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	03ff63ff 	.word	0x03ff63ff

08005414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b20      	cmp	r3, #32
 8005428:	d138      	bne.n	800549c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005434:	2302      	movs	r3, #2
 8005436:	e032      	b.n	800549e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	@ 0x24
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d139      	bne.n	8005534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e033      	b.n	8005536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2224      	movs	r2, #36	@ 0x24
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <HAL_PWREx_GetVoltageRange+0x18>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40007000 	.word	0x40007000

08005560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556e:	d130      	bne.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005570:	4b23      	ldr	r3, [pc, #140]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800557c:	d038      	beq.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800557e:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005586:	4a1e      	ldr	r2, [pc, #120]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800558e:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2232      	movs	r2, #50	@ 0x32
 8005594:	fb02 f303 	mul.w	r3, r2, r3
 8005598:	4a1b      	ldr	r2, [pc, #108]	@ (8005608 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0c9b      	lsrs	r3, r3, #18
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055a4:	e002      	b.n	80055ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ac:	4b14      	ldr	r3, [pc, #80]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b8:	d102      	bne.n	80055c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f2      	bne.n	80055a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055cc:	d110      	bne.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e00f      	b.n	80055f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80055d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055de:	d007      	beq.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055e8:	4a05      	ldr	r2, [pc, #20]	@ (8005600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40007000 	.word	0x40007000
 8005604:	20000000 	.word	0x20000000
 8005608:	431bde83 	.word	0x431bde83

0800560c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800561a:	6053      	str	r3, [r2, #4]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40007000 	.word	0x40007000

0800562c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005634:	f7fd fc58 	bl	8002ee8 <HAL_GetTick>
 8005638:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e069      	b.n	8005718 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fd f8e7 	bl	800282c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800565e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f85e 	bl	8005724 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	3b01      	subs	r3, #1
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	2120      	movs	r1, #32
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f856 	bl	8005740 <QSPI_WaitFlagStateUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d137      	bne.n	800570e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80056a8:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	0611      	lsls	r1, r2, #24
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	4311      	orrs	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	69d2      	ldr	r2, [r2, #28]
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6a12      	ldr	r2, [r2, #32]
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <HAL_QSPI_Init+0xf4>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6912      	ldr	r2, [r2, #16]
 80056da:	0411      	lsls	r1, r2, #16
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6952      	ldr	r2, [r2, #20]
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6992      	ldr	r2, [r2, #24]
 80056e6:	4311      	orrs	r1, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	430b      	orrs	r3, r1
 80056ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8005716:	7afb      	ldrb	r3, [r7, #11]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	ffe0f8fe 	.word	0xffe0f8fe

08005724 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005750:	e01a      	b.n	8005788 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d016      	beq.n	8005788 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fd fbc5 	bl	8002ee8 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2204      	movs	r2, #4
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e00e      	b.n	80057a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1d6      	bne.n	8005752 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 bc08 	b.w	8005fd4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c4:	4b96      	ldr	r3, [pc, #600]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ce:	4b94      	ldr	r3, [pc, #592]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80e4 	beq.w	80059ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_RCC_OscConfig+0x4c>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	f040 808b 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	f040 8087 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057fc:	4b88      	ldr	r3, [pc, #544]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x64>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e3df      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	4b81      	ldr	r3, [pc, #516]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_RCC_OscConfig+0x7e>
 8005824:	4b7e      	ldr	r3, [pc, #504]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800582c:	e005      	b.n	800583a <HAL_RCC_OscConfig+0x8a>
 800582e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800583a:	4293      	cmp	r3, r2
 800583c:	d223      	bcs.n	8005886 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fd92 	bl	800636c <RCC_SetFlashLatencyFromMSIRange>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e3c0      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005852:	4b73      	ldr	r3, [pc, #460]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a72      	ldr	r2, [pc, #456]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b70      	ldr	r3, [pc, #448]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	496d      	ldr	r1, [pc, #436]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005870:	4b6b      	ldr	r3, [pc, #428]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4968      	ldr	r1, [pc, #416]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
 8005884:	e025      	b.n	80058d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005886:	4b66      	ldr	r3, [pc, #408]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a65      	ldr	r2, [pc, #404]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b63      	ldr	r3, [pc, #396]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	4960      	ldr	r1, [pc, #384]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	495b      	ldr	r1, [pc, #364]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fd52 	bl	800636c <RCC_SetFlashLatencyFromMSIRange>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e380      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058d2:	f000 fc87 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b51      	ldr	r3, [pc, #324]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	4950      	ldr	r1, [pc, #320]	@ (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005a28 <HAL_RCC_OscConfig+0x278>)
 80058f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058f2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a2c <HAL_RCC_OscConfig+0x27c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd faa6 	bl	8002e48 <HAL_InitTick>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d052      	beq.n	80059ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	e364      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d032      	beq.n	8005978 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005912:	4b43      	ldr	r3, [pc, #268]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a42      	ldr	r2, [pc, #264]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800591e:	f7fd fae3 	bl	8002ee8 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005926:	f7fd fadf 	bl	8002ee8 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e34d      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	4b39      	ldr	r3, [pc, #228]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005944:	4b36      	ldr	r3, [pc, #216]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a35      	ldr	r2, [pc, #212]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b33      	ldr	r3, [pc, #204]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4930      	ldr	r1, [pc, #192]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005962:	4b2f      	ldr	r3, [pc, #188]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	492b      	ldr	r1, [pc, #172]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
 8005976:	e01a      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005978:	4b29      	ldr	r3, [pc, #164]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a28      	ldr	r2, [pc, #160]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005984:	f7fd fab0 	bl	8002ee8 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800598c:	f7fd faac 	bl	8002ee8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e31a      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800599e:	4b20      	ldr	r3, [pc, #128]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x1dc>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d073      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x21c>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d10e      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d063      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d15f      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e2f7      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x24c>
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e025      	b.n	8005a48 <HAL_RCC_OscConfig+0x298>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a04:	d114      	bne.n	8005a30 <HAL_RCC_OscConfig+0x280>
 8005a06:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a05      	ldr	r2, [pc, #20]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a02      	ldr	r2, [pc, #8]	@ (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e013      	b.n	8005a48 <HAL_RCC_OscConfig+0x298>
 8005a20:	40021000 	.word	0x40021000
 8005a24:	08009644 	.word	0x08009644
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	20000004 	.word	0x20000004
 8005a30:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a9f      	ldr	r2, [pc, #636]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a9c      	ldr	r2, [pc, #624]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fd fa4a 	bl	8002ee8 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fd fa46 	bl	8002ee8 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	@ 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e2b4      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6a:	4b92      	ldr	r3, [pc, #584]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x2a8>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fd fa36 	bl	8002ee8 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fd fa32 	bl	8002ee8 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	@ 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e2a0      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	4b88      	ldr	r3, [pc, #544]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2d0>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d060      	beq.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x310>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d116      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x328>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e27d      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b76      	ldr	r3, [pc, #472]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4973      	ldr	r1, [pc, #460]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	e040      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af6:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd f9f1 	bl	8002ee8 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0a:	f7fd f9ed 	bl	8002ee8 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e25b      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	4b65      	ldr	r3, [pc, #404]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b62      	ldr	r3, [pc, #392]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	495f      	ldr	r1, [pc, #380]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	e018      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5c      	ldr	r2, [pc, #368]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fd f9cd 	bl	8002ee8 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b52:	f7fd f9c9 	bl	8002ee8 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e237      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b84:	4b4b      	ldr	r3, [pc, #300]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	f043 0301 	orr.w	r3, r3, #1
 8005b90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd f9a8 	bl	8002ee8 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fd f9a4 	bl	8002ee8 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e212      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bae:	4b41      	ldr	r3, [pc, #260]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ef      	beq.n	8005b9c <HAL_RCC_OscConfig+0x3ec>
 8005bbc:	e01b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc4:	4a3b      	ldr	r2, [pc, #236]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fd f98b 	bl	8002ee8 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fd f987 	bl	8002ee8 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1f5      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be8:	4b32      	ldr	r3, [pc, #200]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ef      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a6 	beq.w	8005d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c08:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c14:	4b27      	ldr	r3, [pc, #156]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	4a26      	ldr	r2, [pc, #152]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c20:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c30:	4b21      	ldr	r3, [pc, #132]	@ (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d118      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c48:	f7fd f94e 	bl	8002ee8 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fd f94a 	bl	8002ee8 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e1b8      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c62:	4b15      	ldr	r3, [pc, #84]	@ (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d108      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4d8>
 8005c76:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c86:	e029      	b.n	8005cdc <HAL_RCC_OscConfig+0x52c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d115      	bne.n	8005cbc <HAL_RCC_OscConfig+0x50c>
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	4a07      	ldr	r2, [pc, #28]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ca0:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a03      	ldr	r2, [pc, #12]	@ (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cb0:	e014      	b.n	8005cdc <HAL_RCC_OscConfig+0x52c>
 8005cb2:	bf00      	nop
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
 8005cbc:	4b9d      	ldr	r3, [pc, #628]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc2:	4a9c      	ldr	r2, [pc, #624]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ccc:	4b99      	ldr	r3, [pc, #612]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd2:	4a98      	ldr	r2, [pc, #608]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fd f900 	bl	8002ee8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fd f8fc 	bl	8002ee8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e168      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d02:	4b8c      	ldr	r3, [pc, #560]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ed      	beq.n	8005cec <HAL_RCC_OscConfig+0x53c>
 8005d10:	e015      	b.n	8005d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fd f8e9 	bl	8002ee8 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fd f8e5 	bl	8002ee8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e151      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d30:	4b80      	ldr	r3, [pc, #512]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1ed      	bne.n	8005d1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d44:	4b7b      	ldr	r3, [pc, #492]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d48:	4a7a      	ldr	r2, [pc, #488]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d64:	4b73      	ldr	r3, [pc, #460]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d6a:	4a72      	ldr	r2, [pc, #456]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fd f8b8 	bl	8002ee8 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7c:	f7fd f8b4 	bl	8002ee8 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e122      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d8e:	4b69      	ldr	r3, [pc, #420]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <HAL_RCC_OscConfig+0x5cc>
 8005d9c:	e01b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d9e:	4b65      	ldr	r3, [pc, #404]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005da4:	4a63      	ldr	r2, [pc, #396]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dae:	f7fd f89b 	bl	8002ee8 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db6:	f7fd f897 	bl	8002ee8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e105      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ef      	bne.n	8005db6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80f9 	beq.w	8005fd2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f040 80cf 	bne.w	8005f88 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dea:	4b52      	ldr	r3, [pc, #328]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f003 0203 	and.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d12c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d123      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d11b      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d113      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d071      	beq.n	8005f3c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d068      	beq.n	8005f30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e5e:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e6a:	4b32      	ldr	r3, [pc, #200]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0ac      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e86:	f7fd f82f 	bl	8002ee8 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8e:	f7fd f82b 	bl	8002ee8 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e099      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea0:	4b24      	ldr	r3, [pc, #144]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eac:	4b21      	ldr	r3, [pc, #132]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	4b21      	ldr	r3, [pc, #132]	@ (8005f38 <HAL_RCC_OscConfig+0x788>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ebc:	3a01      	subs	r2, #1
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	4311      	orrs	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ec6:	0212      	lsls	r2, r2, #8
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ece:	0852      	lsrs	r2, r2, #1
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	0552      	lsls	r2, r2, #21
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005eda:	0852      	lsrs	r2, r2, #1
 8005edc:	3a01      	subs	r2, #1
 8005ede:	0652      	lsls	r2, r2, #25
 8005ee0:	4311      	orrs	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ee6:	06d2      	lsls	r2, r2, #27
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	4912      	ldr	r1, [pc, #72]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ef0:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005efc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a0c      	ldr	r2, [pc, #48]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f08:	f7fc ffee 	bl	8002ee8 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fc ffea 	bl	8002ee8 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e058      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f22:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <HAL_RCC_OscConfig+0x784>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f2e:	e050      	b.n	8005fd2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e04f      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
 8005f34:	40021000 	.word	0x40021000
 8005f38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f3c:	4b27      	ldr	r3, [pc, #156]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d144      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f48:	4b24      	ldr	r3, [pc, #144]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a23      	ldr	r2, [pc, #140]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f54:	4b21      	ldr	r3, [pc, #132]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a20      	ldr	r2, [pc, #128]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f60:	f7fc ffc2 	bl	8002ee8 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f68:	f7fc ffbe 	bl	8002ee8 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e02c      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f7a:	4b18      	ldr	r3, [pc, #96]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x7b8>
 8005f86:	e024      	b.n	8005fd2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d01f      	beq.n	8005fce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b13      	ldr	r3, [pc, #76]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a12      	ldr	r2, [pc, #72]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005f94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fc ffa5 	bl	8002ee8 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fc ffa1 	bl	8002ee8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e00f      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fb4:	4b09      	ldr	r3, [pc, #36]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f0      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fc0:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	4905      	ldr	r1, [pc, #20]	@ (8005fdc <HAL_RCC_OscConfig+0x82c>)
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_RCC_OscConfig+0x830>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60cb      	str	r3, [r1, #12]
 8005fcc:	e001      	b.n	8005fd2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	feeefffc 	.word	0xfeeefffc

08005fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0e7      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff8:	4b75      	ldr	r3, [pc, #468]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d910      	bls.n	8006028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006006:	4b72      	ldr	r3, [pc, #456]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 0207 	bic.w	r2, r3, #7
 800600e:	4970      	ldr	r1, [pc, #448]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006016:	4b6e      	ldr	r3, [pc, #440]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0cf      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	4b66      	ldr	r3, [pc, #408]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006040:	429a      	cmp	r2, r3
 8006042:	d908      	bls.n	8006056 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006044:	4b63      	ldr	r3, [pc, #396]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	4960      	ldr	r1, [pc, #384]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006052:	4313      	orrs	r3, r2
 8006054:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04c      	beq.n	80060fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d107      	bne.n	800607a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800606a:	4b5a      	ldr	r3, [pc, #360]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e0a6      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d107      	bne.n	8006092 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006082:	4b54      	ldr	r3, [pc, #336]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d115      	bne.n	80060ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e09a      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800609a:	4b4e      	ldr	r3, [pc, #312]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e08e      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060aa:	4b4a      	ldr	r3, [pc, #296]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e086      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060ba:	4b46      	ldr	r3, [pc, #280]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 0203 	bic.w	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4943      	ldr	r1, [pc, #268]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060cc:	f7fc ff0c 	bl	8002ee8 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d4:	f7fc ff08 	bl	8002ee8 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e06e      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ea:	4b3a      	ldr	r3, [pc, #232]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 020c 	and.w	r2, r3, #12
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1eb      	bne.n	80060d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d010      	beq.n	800612a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	4b31      	ldr	r3, [pc, #196]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006114:	429a      	cmp	r2, r3
 8006116:	d208      	bcs.n	800612a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006118:	4b2e      	ldr	r3, [pc, #184]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	492b      	ldr	r1, [pc, #172]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800612a:	4b29      	ldr	r3, [pc, #164]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d210      	bcs.n	800615a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006138:	4b25      	ldr	r3, [pc, #148]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f023 0207 	bic.w	r2, r3, #7
 8006140:	4923      	ldr	r1, [pc, #140]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006148:	4b21      	ldr	r3, [pc, #132]	@ (80061d0 <HAL_RCC_ClockConfig+0x1ec>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d001      	beq.n	800615a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e036      	b.n	80061c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006166:	4b1b      	ldr	r3, [pc, #108]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4918      	ldr	r1, [pc, #96]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006184:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4910      	ldr	r1, [pc, #64]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 8006194:	4313      	orrs	r3, r2
 8006196:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006198:	f000 f824 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b0d      	ldr	r3, [pc, #52]	@ (80061d4 <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	490b      	ldr	r1, [pc, #44]	@ (80061d8 <HAL_RCC_ClockConfig+0x1f4>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	4a09      	ldr	r2, [pc, #36]	@ (80061dc <HAL_RCC_ClockConfig+0x1f8>)
 80061b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061b8:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <HAL_RCC_ClockConfig+0x1fc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fc fe43 	bl	8002e48 <HAL_InitTick>
 80061c2:	4603      	mov	r3, r0
 80061c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80061c6:	7afb      	ldrb	r3, [r7, #11]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40022000 	.word	0x40022000
 80061d4:	40021000 	.word	0x40021000
 80061d8:	08009644 	.word	0x08009644
 80061dc:	20000000 	.word	0x20000000
 80061e0:	20000004 	.word	0x20000004

080061e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	@ 0x24
 80061e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
 80061ee:	2300      	movs	r3, #0
 80061f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f2:	4b3e      	ldr	r3, [pc, #248]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061fc:	4b3b      	ldr	r3, [pc, #236]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0303 	and.w	r3, r3, #3
 8006204:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0x34>
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d121      	bne.n	8006256 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d11e      	bne.n	8006256 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006218:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006224:	4b31      	ldr	r3, [pc, #196]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e005      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006234:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006240:	4a2b      	ldr	r2, [pc, #172]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006254:	e00a      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d102      	bne.n	8006262 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e004      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d101      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006268:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800626a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d134      	bne.n	80062dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006272:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d003      	beq.n	800628a <HAL_RCC_GetSysClockFreq+0xa6>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d003      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0xac>
 8006288:	e005      	b.n	8006296 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800628c:	617b      	str	r3, [r7, #20]
      break;
 800628e:	e005      	b.n	800629c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006290:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006292:	617b      	str	r3, [r7, #20]
      break;
 8006294:	e002      	b.n	800629c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	617b      	str	r3, [r7, #20]
      break;
 800629a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800629c:	4b13      	ldr	r3, [pc, #76]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	3301      	adds	r3, #1
 80062a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062aa:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	fb03 f202 	mul.w	r2, r3, r2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062c2:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <HAL_RCC_GetSysClockFreq+0x108>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	0e5b      	lsrs	r3, r3, #25
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	3301      	adds	r3, #1
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062dc:	69bb      	ldr	r3, [r7, #24]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	@ 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000
 80062f0:	0800965c 	.word	0x0800965c
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	016e3600 	.word	0x016e3600

080062fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006300:	4b03      	ldr	r3, [pc, #12]	@ (8006310 <HAL_RCC_GetHCLKFreq+0x14>)
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000000 	.word	0x20000000

08006314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006318:	f7ff fff0 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 800631c:	4602      	mov	r2, r0
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	0a1b      	lsrs	r3, r3, #8
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	4904      	ldr	r1, [pc, #16]	@ (800633c <HAL_RCC_GetPCLK1Freq+0x28>)
 800632a:	5ccb      	ldrb	r3, [r1, r3]
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40021000 	.word	0x40021000
 800633c:	08009654 	.word	0x08009654

08006340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006344:	f7ff ffda 	bl	80062fc <HAL_RCC_GetHCLKFreq>
 8006348:	4602      	mov	r2, r0
 800634a:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	0adb      	lsrs	r3, r3, #11
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	4904      	ldr	r1, [pc, #16]	@ (8006368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006356:	5ccb      	ldrb	r3, [r1, r3]
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006360:	4618      	mov	r0, r3
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000
 8006368:	08009654 	.word	0x08009654

0800636c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006374:	2300      	movs	r3, #0
 8006376:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800637a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006384:	f7ff f8de 	bl	8005544 <HAL_PWREx_GetVoltageRange>
 8006388:	6178      	str	r0, [r7, #20]
 800638a:	e014      	b.n	80063b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800638c:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800638e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006390:	4a24      	ldr	r2, [pc, #144]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006396:	6593      	str	r3, [r2, #88]	@ 0x58
 8006398:	4b22      	ldr	r3, [pc, #136]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800639a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063a4:	f7ff f8ce 	bl	8005544 <HAL_PWREx_GetVoltageRange>
 80063a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063bc:	d10b      	bne.n	80063d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b80      	cmp	r3, #128	@ 0x80
 80063c2:	d919      	bls.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80063c8:	d902      	bls.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ca:	2302      	movs	r3, #2
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e013      	b.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063d0:	2301      	movs	r3, #1
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	e010      	b.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b80      	cmp	r3, #128	@ 0x80
 80063da:	d902      	bls.n	80063e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063dc:	2303      	movs	r3, #3
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	e00a      	b.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b80      	cmp	r3, #128	@ 0x80
 80063e6:	d102      	bne.n	80063ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063e8:	2302      	movs	r3, #2
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	e004      	b.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b70      	cmp	r3, #112	@ 0x70
 80063f2:	d101      	bne.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063f4:	2301      	movs	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f023 0207 	bic.w	r2, r3, #7
 8006400:	4909      	ldr	r1, [pc, #36]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006408:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d001      	beq.n	800641a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021000 	.word	0x40021000
 8006428:	40022000 	.word	0x40022000

0800642c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006434:	2300      	movs	r3, #0
 8006436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006438:	2300      	movs	r3, #0
 800643a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006444:	2b00      	cmp	r3, #0
 8006446:	d041      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800644c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006450:	d02a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006452:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006456:	d824      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006458:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800645c:	d008      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800645e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006462:	d81e      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800646c:	d010      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800646e:	e018      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006470:	4b86      	ldr	r3, [pc, #536]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4a85      	ldr	r2, [pc, #532]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800647a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800647c:	e015      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f000 facd 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800648e:	e00c      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3320      	adds	r3, #32
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fbb6 	bl	8006c08 <RCCEx_PLLSAI2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064a0:	e003      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	74fb      	strb	r3, [r7, #19]
      break;
 80064a6:	e000      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064aa:	7cfb      	ldrb	r3, [r7, #19]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064b0:	4b76      	ldr	r3, [pc, #472]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064be:	4973      	ldr	r1, [pc, #460]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7cfb      	ldrb	r3, [r7, #19]
 80064ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d041      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e0:	d02a      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80064e6:	d824      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ec:	d008      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f2:	d81e      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064fc:	d010      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064fe:	e018      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006500:	4b62      	ldr	r3, [pc, #392]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4a61      	ldr	r2, [pc, #388]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800650c:	e015      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fa85 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3320      	adds	r3, #32
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb6e 	bl	8006c08 <RCCEx_PLLSAI2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	74fb      	strb	r3, [r7, #19]
      break;
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006540:	4b52      	ldr	r3, [pc, #328]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006546:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800654e:	494f      	ldr	r1, [pc, #316]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006556:	e001      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a0 	beq.w	80066aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656a:	2300      	movs	r3, #0
 800656c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800656e:	4b47      	ldr	r3, [pc, #284]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00d      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006584:	4b41      	ldr	r3, [pc, #260]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006588:	4a40      	ldr	r2, [pc, #256]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006590:	4b3e      	ldr	r3, [pc, #248]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800659c:	2301      	movs	r3, #1
 800659e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065ac:	f7fc fc9c 	bl	8002ee8 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065b2:	e009      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b4:	f7fc fc98 	bl	8002ee8 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	74fb      	strb	r3, [r7, #19]
        break;
 80065c6:	e005      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065c8:	4b31      	ldr	r3, [pc, #196]	@ (8006690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0ef      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d15c      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065da:	4b2c      	ldr	r3, [pc, #176]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01f      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d019      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065f8:	4b24      	ldr	r3, [pc, #144]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006604:	4b21      	ldr	r3, [pc, #132]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660a:	4a20      	ldr	r2, [pc, #128]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006614:	4b1d      	ldr	r3, [pc, #116]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661a:	4a1c      	ldr	r2, [pc, #112]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d016      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fc fc57 	bl	8002ee8 <HAL_GetTick>
 800663a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663c:	e00b      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fc fc53 	bl	8002ee8 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d902      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	74fb      	strb	r3, [r7, #19]
            break;
 8006654:	e006      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006656:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0ec      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667a:	4904      	ldr	r1, [pc, #16]	@ (800668c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006682:	e009      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800668a:	bf00      	nop
 800668c:	40021000 	.word	0x40021000
 8006690:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006698:	7c7b      	ldrb	r3, [r7, #17]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669e:	4ba6      	ldr	r3, [pc, #664]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	4aa5      	ldr	r2, [pc, #660]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066b6:	4ba0      	ldr	r3, [pc, #640]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f023 0203 	bic.w	r2, r3, #3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	499c      	ldr	r1, [pc, #624]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066d8:	4b97      	ldr	r3, [pc, #604]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066de:	f023 020c 	bic.w	r2, r3, #12
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e6:	4994      	ldr	r1, [pc, #592]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	498b      	ldr	r1, [pc, #556]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800671c:	4b86      	ldr	r3, [pc, #536]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006722:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	4983      	ldr	r1, [pc, #524]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800673e:	4b7e      	ldr	r3, [pc, #504]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674c:	497a      	ldr	r1, [pc, #488]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006760:	4b75      	ldr	r3, [pc, #468]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800676e:	4972      	ldr	r1, [pc, #456]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006782:	4b6d      	ldr	r3, [pc, #436]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006788:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	4969      	ldr	r1, [pc, #420]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067a4:	4b64      	ldr	r3, [pc, #400]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b2:	4961      	ldr	r1, [pc, #388]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	4958      	ldr	r1, [pc, #352]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067e8:	4b53      	ldr	r3, [pc, #332]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f6:	4950      	ldr	r1, [pc, #320]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800680a:	4b4b      	ldr	r3, [pc, #300]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006810:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006818:	4947      	ldr	r1, [pc, #284]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800682c:	4b42      	ldr	r3, [pc, #264]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800682e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006832:	f023 0203 	bic.w	r2, r3, #3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683a:	493f      	ldr	r1, [pc, #252]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d028      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800684e:	4b3a      	ldr	r3, [pc, #232]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006854:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685c:	4936      	ldr	r1, [pc, #216]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686c:	d106      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800686e:	4b32      	ldr	r3, [pc, #200]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	4a31      	ldr	r2, [pc, #196]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006874:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006878:	60d3      	str	r3, [r2, #12]
 800687a:	e011      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006884:	d10c      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3304      	adds	r3, #4
 800688a:	2101      	movs	r1, #1
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f8c9 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d028      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068ac:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ba:	491f      	ldr	r1, [pc, #124]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ca:	d106      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4a19      	ldr	r2, [pc, #100]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068d6:	60d3      	str	r3, [r2, #12]
 80068d8:	e011      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068e2:	d10c      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3304      	adds	r3, #4
 80068e8:	2101      	movs	r1, #1
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f89a 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068f4:	7cfb      	ldrb	r3, [r7, #19]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80068fa:	7cfb      	ldrb	r3, [r7, #19]
 80068fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800690a:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006918:	4907      	ldr	r1, [pc, #28]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006928:	d108      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800692a:	4b03      	ldr	r3, [pc, #12]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	4a02      	ldr	r2, [pc, #8]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006930:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006934:	60d3      	str	r3, [r2, #12]
 8006936:	e013      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006938:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006944:	d10c      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3304      	adds	r3, #4
 800694a:	2101      	movs	r1, #1
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f869 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006956:	7cfb      	ldrb	r3, [r7, #19]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800695c:	7cfb      	ldrb	r3, [r7, #19]
 800695e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02f      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800696c:	4b2c      	ldr	r3, [pc, #176]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006972:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800697a:	4929      	ldr	r1, [pc, #164]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800698a:	d10d      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	2102      	movs	r1, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f846 	bl	8006a24 <RCCEx_PLLSAI1_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800699c:	7cfb      	ldrb	r3, [r7, #19]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d014      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80069a2:	7cfb      	ldrb	r3, [r7, #19]
 80069a4:	74bb      	strb	r3, [r7, #18]
 80069a6:	e011      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069b0:	d10c      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3320      	adds	r3, #32
 80069b6:	2102      	movs	r1, #2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f925 	bl	8006c08 <RCCEx_PLLSAI2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069c2:	7cfb      	ldrb	r3, [r7, #19]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
 80069ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e8:	490d      	ldr	r1, [pc, #52]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069fc:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0c:	4904      	ldr	r1, [pc, #16]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a14:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000

08006a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a32:	4b74      	ldr	r3, [pc, #464]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a3e:	4b71      	ldr	r3, [pc, #452]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0203 	and.w	r2, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d10d      	bne.n	8006a6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
       ||
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a56:	4b6b      	ldr	r3, [pc, #428]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
       ||
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d047      	beq.n	8006afa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	e044      	b.n	8006afa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d018      	beq.n	8006aaa <RCCEx_PLLSAI1_Config+0x86>
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d825      	bhi.n	8006ac8 <RCCEx_PLLSAI1_Config+0xa4>
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d002      	beq.n	8006a86 <RCCEx_PLLSAI1_Config+0x62>
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d009      	beq.n	8006a98 <RCCEx_PLLSAI1_Config+0x74>
 8006a84:	e020      	b.n	8006ac8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a86:	4b5f      	ldr	r3, [pc, #380]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11d      	bne.n	8006ace <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a96:	e01a      	b.n	8006ace <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a98:	4b5a      	ldr	r3, [pc, #360]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d116      	bne.n	8006ad2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aa8:	e013      	b.n	8006ad2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aaa:	4b56      	ldr	r3, [pc, #344]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ab6:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ac6:	e006      	b.n	8006ad6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
      break;
 8006acc:	e004      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10d      	bne.n	8006afa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ade:	4b49      	ldr	r3, [pc, #292]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	430b      	orrs	r3, r1
 8006af4:	4943      	ldr	r1, [pc, #268]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d17c      	bne.n	8006bfa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b00:	4b40      	ldr	r3, [pc, #256]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a3f      	ldr	r2, [pc, #252]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0c:	f7fc f9ec 	bl	8002ee8 <HAL_GetTick>
 8006b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b12:	e009      	b.n	8006b28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b14:	f7fc f9e8 	bl	8002ee8 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d902      	bls.n	8006b28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	73fb      	strb	r3, [r7, #15]
        break;
 8006b26:	e005      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b28:	4b36      	ldr	r3, [pc, #216]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1ef      	bne.n	8006b14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d15f      	bne.n	8006bfa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d110      	bne.n	8006b62 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b40:	4b30      	ldr	r3, [pc, #192]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006b48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6892      	ldr	r2, [r2, #8]
 8006b50:	0211      	lsls	r1, r2, #8
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68d2      	ldr	r2, [r2, #12]
 8006b56:	06d2      	lsls	r2, r2, #27
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	492a      	ldr	r1, [pc, #168]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	610b      	str	r3, [r1, #16]
 8006b60:	e027      	b.n	8006bb2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d112      	bne.n	8006b8e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b68:	4b26      	ldr	r3, [pc, #152]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006b70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6892      	ldr	r2, [r2, #8]
 8006b78:	0211      	lsls	r1, r2, #8
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6912      	ldr	r2, [r2, #16]
 8006b7e:	0852      	lsrs	r2, r2, #1
 8006b80:	3a01      	subs	r2, #1
 8006b82:	0552      	lsls	r2, r2, #21
 8006b84:	430a      	orrs	r2, r1
 8006b86:	491f      	ldr	r1, [pc, #124]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	610b      	str	r3, [r1, #16]
 8006b8c:	e011      	b.n	8006bb2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006b96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6892      	ldr	r2, [r2, #8]
 8006b9e:	0211      	lsls	r1, r2, #8
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6952      	ldr	r2, [r2, #20]
 8006ba4:	0852      	lsrs	r2, r2, #1
 8006ba6:	3a01      	subs	r2, #1
 8006ba8:	0652      	lsls	r2, r2, #25
 8006baa:	430a      	orrs	r2, r1
 8006bac:	4915      	ldr	r1, [pc, #84]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bb2:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a13      	ldr	r2, [pc, #76]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbe:	f7fc f993 	bl	8002ee8 <HAL_GetTick>
 8006bc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bc4:	e009      	b.n	8006bda <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bc6:	f7fc f98f 	bl	8002ee8 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d902      	bls.n	8006bda <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8006bd8:	e005      	b.n	8006be6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bda:	4b0a      	ldr	r3, [pc, #40]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0ef      	beq.n	8006bc6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	4903      	ldr	r1, [pc, #12]	@ (8006c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40021000 	.word	0x40021000

08006c08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c16:	4b69      	ldr	r3, [pc, #420]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d018      	beq.n	8006c54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c22:	4b66      	ldr	r3, [pc, #408]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0203 	and.w	r2, r3, #3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d10d      	bne.n	8006c4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
       ||
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006c3a:	4b60      	ldr	r3, [pc, #384]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	091b      	lsrs	r3, r3, #4
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
       ||
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d047      	beq.n	8006cde <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	73fb      	strb	r3, [r7, #15]
 8006c52:	e044      	b.n	8006cde <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d018      	beq.n	8006c8e <RCCEx_PLLSAI2_Config+0x86>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d825      	bhi.n	8006cac <RCCEx_PLLSAI2_Config+0xa4>
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d002      	beq.n	8006c6a <RCCEx_PLLSAI2_Config+0x62>
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d009      	beq.n	8006c7c <RCCEx_PLLSAI2_Config+0x74>
 8006c68:	e020      	b.n	8006cac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c6a:	4b54      	ldr	r3, [pc, #336]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11d      	bne.n	8006cb2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c7a:	e01a      	b.n	8006cb2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d116      	bne.n	8006cb6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c8c:	e013      	b.n	8006cb6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10f      	bne.n	8006cba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c9a:	4b48      	ldr	r3, [pc, #288]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006caa:	e006      	b.n	8006cba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb0:	e004      	b.n	8006cbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e002      	b.n	8006cbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cb6:	bf00      	nop
 8006cb8:	e000      	b.n	8006cbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10d      	bne.n	8006cde <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	4938      	ldr	r1, [pc, #224]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d166      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ce4:	4b35      	ldr	r3, [pc, #212]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a34      	ldr	r2, [pc, #208]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf0:	f7fc f8fa 	bl	8002ee8 <HAL_GetTick>
 8006cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cf6:	e009      	b.n	8006d0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cf8:	f7fc f8f6 	bl	8002ee8 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d902      	bls.n	8006d0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	73fb      	strb	r3, [r7, #15]
        break;
 8006d0a:	e005      	b.n	8006d18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1ef      	bne.n	8006cf8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d149      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d110      	bne.n	8006d46 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d24:	4b25      	ldr	r3, [pc, #148]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006d2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6892      	ldr	r2, [r2, #8]
 8006d34:	0211      	lsls	r1, r2, #8
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68d2      	ldr	r2, [r2, #12]
 8006d3a:	06d2      	lsls	r2, r2, #27
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	491f      	ldr	r1, [pc, #124]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	614b      	str	r3, [r1, #20]
 8006d44:	e011      	b.n	8006d6a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d46:	4b1d      	ldr	r3, [pc, #116]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006d4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6892      	ldr	r2, [r2, #8]
 8006d56:	0211      	lsls	r1, r2, #8
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6912      	ldr	r2, [r2, #16]
 8006d5c:	0852      	lsrs	r2, r2, #1
 8006d5e:	3a01      	subs	r2, #1
 8006d60:	0652      	lsls	r2, r2, #25
 8006d62:	430a      	orrs	r2, r1
 8006d64:	4915      	ldr	r1, [pc, #84]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d6a:	4b14      	ldr	r3, [pc, #80]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a13      	ldr	r2, [pc, #76]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d76:	f7fc f8b7 	bl	8002ee8 <HAL_GetTick>
 8006d7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d7c:	e009      	b.n	8006d92 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d7e:	f7fc f8b3 	bl	8002ee8 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d902      	bls.n	8006d92 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8006d90:	e005      	b.n	8006d9e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d92:	4b0a      	ldr	r3, [pc, #40]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0ef      	beq.n	8006d7e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <RCCEx_PLLSAI2_Config+0x1b4>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40021000 	.word	0x40021000

08006dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e095      	b.n	8006efe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d009      	beq.n	8006df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	61da      	str	r2, [r3, #28]
 8006dea:	e005      	b.n	8006df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fb fd6e 	bl	80028f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e38:	d902      	bls.n	8006e40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e002      	b.n	8006e46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e4e:	d007      	beq.n	8006e60 <HAL_SPI_Init+0xa0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea2:	ea42 0103 	orr.w	r1, r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 0204 	and.w	r2, r3, #4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006edc:	ea42 0103 	orr.w	r1, r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e049      	b.n	8006fac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fb fd59 	bl	80029e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f000 ff37 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d001      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e04f      	b.n	800706c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	@ (8007078 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01d      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff6:	d018      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800707c <HAL_TIM_Base_Start_IT+0xc8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1e      	ldr	r2, [pc, #120]	@ (8007080 <HAL_TIM_Base_Start_IT+0xcc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <HAL_TIM_Base_Start_IT+0xd0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1b      	ldr	r2, [pc, #108]	@ (8007088 <HAL_TIM_Base_Start_IT+0xd4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIM_Base_Start_IT+0x76>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a19      	ldr	r2, [pc, #100]	@ (800708c <HAL_TIM_Base_Start_IT+0xd8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d115      	bne.n	8007056 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	4b17      	ldr	r3, [pc, #92]	@ (8007090 <HAL_TIM_Base_Start_IT+0xdc>)
 8007032:	4013      	ands	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b06      	cmp	r3, #6
 800703a:	d015      	beq.n	8007068 <HAL_TIM_Base_Start_IT+0xb4>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007042:	d011      	beq.n	8007068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0201 	orr.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	e008      	b.n	8007068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e000      	b.n	800706a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40013400 	.word	0x40013400
 800708c:	40014000 	.word	0x40014000
 8007090:	00010007 	.word	0x00010007

08007094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e049      	b.n	800713a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7fb fdb6 	bl	8002c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f000 fe70 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d109      	bne.n	8007168 <HAL_TIM_PWM_Start+0x24>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf14      	ite	ne
 8007160:	2301      	movne	r3, #1
 8007162:	2300      	moveq	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e03c      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b04      	cmp	r3, #4
 800716c:	d109      	bne.n	8007182 <HAL_TIM_PWM_Start+0x3e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf14      	ite	ne
 800717a:	2301      	movne	r3, #1
 800717c:	2300      	moveq	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	e02f      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d109      	bne.n	800719c <HAL_TIM_PWM_Start+0x58>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	bf14      	ite	ne
 8007194:	2301      	movne	r3, #1
 8007196:	2300      	moveq	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e022      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d109      	bne.n	80071b6 <HAL_TIM_PWM_Start+0x72>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	e015      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d109      	bne.n	80071d0 <HAL_TIM_PWM_Start+0x8c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	bf14      	ite	ne
 80071c8:	2301      	movne	r3, #1
 80071ca:	2300      	moveq	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e008      	b.n	80071e2 <HAL_TIM_PWM_Start+0x9e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e09c      	b.n	8007324 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Start+0xb6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071f8:	e023      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Start+0xc6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007208:	e01b      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d104      	bne.n	800721a <HAL_TIM_PWM_Start+0xd6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007218:	e013      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d104      	bne.n	800722a <HAL_TIM_PWM_Start+0xe6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007228:	e00b      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b10      	cmp	r3, #16
 800722e:	d104      	bne.n	800723a <HAL_TIM_PWM_Start+0xf6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007238:	e003      	b.n	8007242 <HAL_TIM_PWM_Start+0xfe>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2201      	movs	r2, #1
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f001 faee 	bl	800882c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a35      	ldr	r2, [pc, #212]	@ (800732c <HAL_TIM_PWM_Start+0x1e8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a34      	ldr	r2, [pc, #208]	@ (8007330 <HAL_TIM_PWM_Start+0x1ec>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a32      	ldr	r2, [pc, #200]	@ (8007334 <HAL_TIM_PWM_Start+0x1f0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a31      	ldr	r2, [pc, #196]	@ (8007338 <HAL_TIM_PWM_Start+0x1f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_TIM_PWM_Start+0x13e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a2f      	ldr	r2, [pc, #188]	@ (800733c <HAL_TIM_PWM_Start+0x1f8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <HAL_TIM_PWM_Start+0x142>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_TIM_PWM_Start+0x144>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800729a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a22      	ldr	r2, [pc, #136]	@ (800732c <HAL_TIM_PWM_Start+0x1e8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d018      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a22      	ldr	r2, [pc, #136]	@ (8007340 <HAL_TIM_PWM_Start+0x1fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a21      	ldr	r2, [pc, #132]	@ (8007344 <HAL_TIM_PWM_Start+0x200>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007348 <HAL_TIM_PWM_Start+0x204>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <HAL_TIM_PWM_Start+0x1ec>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x19e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a15      	ldr	r2, [pc, #84]	@ (8007334 <HAL_TIM_PWM_Start+0x1f0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d115      	bne.n	800730e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	4b18      	ldr	r3, [pc, #96]	@ (800734c <HAL_TIM_PWM_Start+0x208>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b06      	cmp	r3, #6
 80072f2:	d015      	beq.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fa:	d011      	beq.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730c:	e008      	b.n	8007320 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e000      	b.n	8007322 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400
 800733c:	40014800 	.word	0x40014800
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	00010007 	.word	0x00010007

08007350 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e049      	b.n	80073f6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fb fb6e 	bl	8002a58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f000 fd12 	bl	8007db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b086      	sub	sp, #24
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e097      	b.n	8007542 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fb fb58 	bl	8002adc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007442:	f023 0307 	bic.w	r3, r3, #7
 8007446:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f000 fcb0 	bl	8007db8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007480:	f023 0303 	bic.w	r3, r3, #3
 8007484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	4313      	orrs	r3, r2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800749e:	f023 030c 	bic.w	r3, r3, #12
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	4313      	orrs	r3, r2
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	011a      	lsls	r2, r3, #4
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	031b      	lsls	r3, r3, #12
 80074ce:	4313      	orrs	r3, r2
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80074dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80074e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	4313      	orrs	r3, r2
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800755a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007562:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800756a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007572:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d110      	bne.n	800759c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d102      	bne.n	8007586 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007580:	7b7b      	ldrb	r3, [r7, #13]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d001      	beq.n	800758a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e069      	b.n	800765e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759a:	e031      	b.n	8007600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d110      	bne.n	80075c4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075a8:	7b3b      	ldrb	r3, [r7, #12]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e055      	b.n	800765e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075c2:	e01d      	b.n	8007600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d108      	bne.n	80075dc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d105      	bne.n	80075dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075d0:	7b7b      	ldrb	r3, [r7, #13]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d102      	bne.n	80075dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075d6:	7b3b      	ldrb	r3, [r7, #12]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e03e      	b.n	800765e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_Encoder_Start+0xc4>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d008      	beq.n	800761e <HAL_TIM_Encoder_Start+0xd4>
 800760c:	e00f      	b.n	800762e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f908 	bl	800882c <TIM_CCxChannelCmd>
      break;
 800761c:	e016      	b.n	800764c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	2104      	movs	r1, #4
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f900 	bl	800882c <TIM_CCxChannelCmd>
      break;
 800762c:	e00e      	b.n	800764c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f001 f8f8 	bl	800882c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2201      	movs	r2, #1
 8007642:	2104      	movs	r1, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f001 f8f1 	bl	800882c <TIM_CCxChannelCmd>
      break;
 800764a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d020      	beq.n	80076ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f06f 0202 	mvn.w	r2, #2
 800769a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fb62 	bl	8007d7a <HAL_TIM_IC_CaptureCallback>
 80076b6:	e005      	b.n	80076c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb54 	bl	8007d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fb65 	bl	8007d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d020      	beq.n	8007716 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01b      	beq.n	8007716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f06f 0204 	mvn.w	r2, #4
 80076e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fb3c 	bl	8007d7a <HAL_TIM_IC_CaptureCallback>
 8007702:	e005      	b.n	8007710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb2e 	bl	8007d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb3f 	bl	8007d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d020      	beq.n	8007762 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01b      	beq.n	8007762 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f06f 0208 	mvn.w	r2, #8
 8007732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2204      	movs	r2, #4
 8007738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fb16 	bl	8007d7a <HAL_TIM_IC_CaptureCallback>
 800774e:	e005      	b.n	800775c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb08 	bl	8007d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fb19 	bl	8007d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b00      	cmp	r3, #0
 800776a:	d020      	beq.n	80077ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0310 	and.w	r3, r3, #16
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01b      	beq.n	80077ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f06f 0210 	mvn.w	r2, #16
 800777e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2208      	movs	r2, #8
 8007784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 faf0 	bl	8007d7a <HAL_TIM_IC_CaptureCallback>
 800779a:	e005      	b.n	80077a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fae2 	bl	8007d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 faf3 	bl	8007d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0201 	mvn.w	r2, #1
 80077ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fa fc37 	bl	8002040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80077f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 f94c 	bl	8008a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f944 	bl	8008aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 faad 	bl	8007da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0220 	mvn.w	r2, #32
 8007864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f90c 	bl	8008a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_TIM_IC_ConfigChannel+0x1e>
 800788e:	2302      	movs	r3, #2
 8007890:	e088      	b.n	80079a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d11b      	bne.n	80078d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80078b0:	f000 fdfe 	bl	80084b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 020c 	bic.w	r2, r2, #12
 80078c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6999      	ldr	r1, [r3, #24]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	619a      	str	r2, [r3, #24]
 80078d6:	e060      	b.n	800799a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d11c      	bne.n	8007918 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80078ee:	f000 fe7c 	bl	80085ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007900:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6999      	ldr	r1, [r3, #24]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	021a      	lsls	r2, r3, #8
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	619a      	str	r2, [r3, #24]
 8007916:	e040      	b.n	800799a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b08      	cmp	r3, #8
 800791c:	d11b      	bne.n	8007956 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800792e:	f000 fec9 	bl	80086c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 020c 	bic.w	r2, r2, #12
 8007940:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	61da      	str	r2, [r3, #28]
 8007954:	e021      	b.n	800799a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b0c      	cmp	r3, #12
 800795a:	d11c      	bne.n	8007996 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800796c:	f000 fee6 	bl	800873c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69da      	ldr	r2, [r3, #28]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800797e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69d9      	ldr	r1, [r3, #28]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	61da      	str	r2, [r3, #28]
 8007994:	e001      	b.n	800799a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e0ff      	b.n	8007bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b14      	cmp	r3, #20
 80079d6:	f200 80f0 	bhi.w	8007bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079da:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a35 	.word	0x08007a35
 80079e4:	08007bbb 	.word	0x08007bbb
 80079e8:	08007bbb 	.word	0x08007bbb
 80079ec:	08007bbb 	.word	0x08007bbb
 80079f0:	08007a75 	.word	0x08007a75
 80079f4:	08007bbb 	.word	0x08007bbb
 80079f8:	08007bbb 	.word	0x08007bbb
 80079fc:	08007bbb 	.word	0x08007bbb
 8007a00:	08007ab7 	.word	0x08007ab7
 8007a04:	08007bbb 	.word	0x08007bbb
 8007a08:	08007bbb 	.word	0x08007bbb
 8007a0c:	08007bbb 	.word	0x08007bbb
 8007a10:	08007af7 	.word	0x08007af7
 8007a14:	08007bbb 	.word	0x08007bbb
 8007a18:	08007bbb 	.word	0x08007bbb
 8007a1c:	08007bbb 	.word	0x08007bbb
 8007a20:	08007b39 	.word	0x08007b39
 8007a24:	08007bbb 	.word	0x08007bbb
 8007a28:	08007bbb 	.word	0x08007bbb
 8007a2c:	08007bbb 	.word	0x08007bbb
 8007a30:	08007b79 	.word	0x08007b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fa62 	bl	8007f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0208 	orr.w	r2, r2, #8
 8007a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0204 	bic.w	r2, r2, #4
 8007a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6999      	ldr	r1, [r3, #24]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	619a      	str	r2, [r3, #24]
      break;
 8007a72:	e0a5      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fad2 	bl	8008024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6999      	ldr	r1, [r3, #24]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	619a      	str	r2, [r3, #24]
      break;
 8007ab4:	e084      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fb3b 	bl	8008138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0208 	orr.w	r2, r2, #8
 8007ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0204 	bic.w	r2, r2, #4
 8007ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69d9      	ldr	r1, [r3, #28]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	61da      	str	r2, [r3, #28]
      break;
 8007af4:	e064      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fba3 	bl	8008248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69d9      	ldr	r1, [r3, #28]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	021a      	lsls	r2, r3, #8
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	61da      	str	r2, [r3, #28]
      break;
 8007b36:	e043      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fbec 	bl	800831c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0208 	orr.w	r2, r2, #8
 8007b52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0204 	bic.w	r2, r2, #4
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b76:	e023      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fc30 	bl	80083e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	021a      	lsls	r2, r3, #8
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007bb8:	e002      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop

08007bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e0b6      	b.n	8007d5e <HAL_TIM_ConfigClockSource+0x18a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2c:	d03e      	beq.n	8007cac <HAL_TIM_ConfigClockSource+0xd8>
 8007c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c32:	f200 8087 	bhi.w	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3a:	f000 8086 	beq.w	8007d4a <HAL_TIM_ConfigClockSource+0x176>
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c42:	d87f      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c44:	2b70      	cmp	r3, #112	@ 0x70
 8007c46:	d01a      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0xaa>
 8007c48:	2b70      	cmp	r3, #112	@ 0x70
 8007c4a:	d87b      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c4c:	2b60      	cmp	r3, #96	@ 0x60
 8007c4e:	d050      	beq.n	8007cf2 <HAL_TIM_ConfigClockSource+0x11e>
 8007c50:	2b60      	cmp	r3, #96	@ 0x60
 8007c52:	d877      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c54:	2b50      	cmp	r3, #80	@ 0x50
 8007c56:	d03c      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0xfe>
 8007c58:	2b50      	cmp	r3, #80	@ 0x50
 8007c5a:	d873      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c5c:	2b40      	cmp	r3, #64	@ 0x40
 8007c5e:	d058      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x13e>
 8007c60:	2b40      	cmp	r3, #64	@ 0x40
 8007c62:	d86f      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c64:	2b30      	cmp	r3, #48	@ 0x30
 8007c66:	d064      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x15e>
 8007c68:	2b30      	cmp	r3, #48	@ 0x30
 8007c6a:	d86b      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d060      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x15e>
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d867      	bhi.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d05c      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x15e>
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d05a      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x15e>
 8007c7c:	e062      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c8e:	f000 fdad 	bl	80087ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	609a      	str	r2, [r3, #8]
      break;
 8007caa:	e04f      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cbc:	f000 fd96 	bl	80087ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cce:	609a      	str	r2, [r3, #8]
      break;
 8007cd0:	e03c      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f000 fc54 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2150      	movs	r1, #80	@ 0x50
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fd63 	bl	80087b6 <TIM_ITRx_SetConfig>
      break;
 8007cf0:	e02c      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f000 fcb0 	bl	8008664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2160      	movs	r1, #96	@ 0x60
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fd53 	bl	80087b6 <TIM_ITRx_SetConfig>
      break;
 8007d10:	e01c      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f000 fc34 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2140      	movs	r1, #64	@ 0x40
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd43 	bl	80087b6 <TIM_ITRx_SetConfig>
      break;
 8007d30:	e00c      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f000 fd3a 	bl	80087b6 <TIM_ITRx_SetConfig>
      break;
 8007d42:	e003      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	73fb      	strb	r3, [r7, #15]
      break;
 8007d48:	e000      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a46      	ldr	r2, [pc, #280]	@ (8007ee4 <TIM_Base_SetConfig+0x12c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d013      	beq.n	8007df8 <TIM_Base_SetConfig+0x40>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dd6:	d00f      	beq.n	8007df8 <TIM_Base_SetConfig+0x40>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a43      	ldr	r2, [pc, #268]	@ (8007ee8 <TIM_Base_SetConfig+0x130>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <TIM_Base_SetConfig+0x40>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a42      	ldr	r2, [pc, #264]	@ (8007eec <TIM_Base_SetConfig+0x134>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d007      	beq.n	8007df8 <TIM_Base_SetConfig+0x40>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a41      	ldr	r2, [pc, #260]	@ (8007ef0 <TIM_Base_SetConfig+0x138>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_Base_SetConfig+0x40>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a40      	ldr	r2, [pc, #256]	@ (8007ef4 <TIM_Base_SetConfig+0x13c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d108      	bne.n	8007e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ee4 <TIM_Base_SetConfig+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01f      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e18:	d01b      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a32      	ldr	r2, [pc, #200]	@ (8007ee8 <TIM_Base_SetConfig+0x130>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d017      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a31      	ldr	r2, [pc, #196]	@ (8007eec <TIM_Base_SetConfig+0x134>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	@ (8007ef0 <TIM_Base_SetConfig+0x138>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00f      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef4 <TIM_Base_SetConfig+0x13c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ef8 <TIM_Base_SetConfig+0x140>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2d      	ldr	r2, [pc, #180]	@ (8007efc <TIM_Base_SetConfig+0x144>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_Base_SetConfig+0x9a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f00 <TIM_Base_SetConfig+0x148>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d108      	bne.n	8007e64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	@ (8007ee4 <TIM_Base_SetConfig+0x12c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_Base_SetConfig+0xf8>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a18      	ldr	r2, [pc, #96]	@ (8007ef4 <TIM_Base_SetConfig+0x13c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_Base_SetConfig+0xf8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	@ (8007ef8 <TIM_Base_SetConfig+0x140>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_Base_SetConfig+0xf8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <TIM_Base_SetConfig+0x144>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_Base_SetConfig+0xf8>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <TIM_Base_SetConfig+0x148>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d103      	bne.n	8007eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d105      	bne.n	8007ed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40013400 	.word	0x40013400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800

08007f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	f023 0201 	bic.w	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 0302 	bic.w	r3, r3, #2
 8007f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8008010 <TIM_OC1_SetConfig+0x10c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00f      	beq.n	8007f84 <TIM_OC1_SetConfig+0x80>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a2b      	ldr	r2, [pc, #172]	@ (8008014 <TIM_OC1_SetConfig+0x110>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <TIM_OC1_SetConfig+0x80>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008018 <TIM_OC1_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_OC1_SetConfig+0x80>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a29      	ldr	r2, [pc, #164]	@ (800801c <TIM_OC1_SetConfig+0x118>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_OC1_SetConfig+0x80>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a28      	ldr	r2, [pc, #160]	@ (8008020 <TIM_OC1_SetConfig+0x11c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d10c      	bne.n	8007f9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f023 0308 	bic.w	r3, r3, #8
 8007f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f023 0304 	bic.w	r3, r3, #4
 8007f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8008010 <TIM_OC1_SetConfig+0x10c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00f      	beq.n	8007fc6 <TIM_OC1_SetConfig+0xc2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008014 <TIM_OC1_SetConfig+0x110>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00b      	beq.n	8007fc6 <TIM_OC1_SetConfig+0xc2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a19      	ldr	r2, [pc, #100]	@ (8008018 <TIM_OC1_SetConfig+0x114>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_OC1_SetConfig+0xc2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a18      	ldr	r2, [pc, #96]	@ (800801c <TIM_OC1_SetConfig+0x118>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC1_SetConfig+0xc2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a17      	ldr	r2, [pc, #92]	@ (8008020 <TIM_OC1_SetConfig+0x11c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d111      	bne.n	8007fea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800

08008024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f023 0210 	bic.w	r2, r3, #16
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800805e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0320 	bic.w	r3, r3, #32
 8008072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a28      	ldr	r2, [pc, #160]	@ (8008124 <TIM_OC2_SetConfig+0x100>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d003      	beq.n	8008090 <TIM_OC2_SetConfig+0x6c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a27      	ldr	r2, [pc, #156]	@ (8008128 <TIM_OC2_SetConfig+0x104>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d10d      	bne.n	80080ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <TIM_OC2_SetConfig+0x100>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00f      	beq.n	80080d4 <TIM_OC2_SetConfig+0xb0>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008128 <TIM_OC2_SetConfig+0x104>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00b      	beq.n	80080d4 <TIM_OC2_SetConfig+0xb0>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <TIM_OC2_SetConfig+0x108>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d007      	beq.n	80080d4 <TIM_OC2_SetConfig+0xb0>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008130 <TIM_OC2_SetConfig+0x10c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_OC2_SetConfig+0xb0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a19      	ldr	r2, [pc, #100]	@ (8008134 <TIM_OC2_SetConfig+0x110>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d113      	bne.n	80080fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40012c00 	.word	0x40012c00
 8008128:	40013400 	.word	0x40013400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800

08008138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a27      	ldr	r2, [pc, #156]	@ (8008234 <TIM_OC3_SetConfig+0xfc>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_OC3_SetConfig+0x6a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <TIM_OC3_SetConfig+0x100>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d10d      	bne.n	80081be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008234 <TIM_OC3_SetConfig+0xfc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00f      	beq.n	80081e6 <TIM_OC3_SetConfig+0xae>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008238 <TIM_OC3_SetConfig+0x100>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00b      	beq.n	80081e6 <TIM_OC3_SetConfig+0xae>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1a      	ldr	r2, [pc, #104]	@ (800823c <TIM_OC3_SetConfig+0x104>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d007      	beq.n	80081e6 <TIM_OC3_SetConfig+0xae>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a19      	ldr	r2, [pc, #100]	@ (8008240 <TIM_OC3_SetConfig+0x108>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d003      	beq.n	80081e6 <TIM_OC3_SetConfig+0xae>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a18      	ldr	r2, [pc, #96]	@ (8008244 <TIM_OC3_SetConfig+0x10c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d113      	bne.n	800820e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	621a      	str	r2, [r3, #32]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40013400 	.word	0x40013400
 800823c:	40014000 	.word	0x40014000
 8008240:	40014400 	.word	0x40014400
 8008244:	40014800 	.word	0x40014800

08008248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	031b      	lsls	r3, r3, #12
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a18      	ldr	r2, [pc, #96]	@ (8008308 <TIM_OC4_SetConfig+0xc0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00f      	beq.n	80082cc <TIM_OC4_SetConfig+0x84>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a17      	ldr	r2, [pc, #92]	@ (800830c <TIM_OC4_SetConfig+0xc4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_OC4_SetConfig+0x84>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a16      	ldr	r2, [pc, #88]	@ (8008310 <TIM_OC4_SetConfig+0xc8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <TIM_OC4_SetConfig+0x84>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <TIM_OC4_SetConfig+0xcc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_OC4_SetConfig+0x84>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a14      	ldr	r2, [pc, #80]	@ (8008318 <TIM_OC4_SetConfig+0xd0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d109      	bne.n	80082e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	019b      	lsls	r3, r3, #6
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	621a      	str	r2, [r3, #32]
}
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40012c00 	.word	0x40012c00
 800830c:	40013400 	.word	0x40013400
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800

0800831c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800834a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a17      	ldr	r2, [pc, #92]	@ (80083d0 <TIM_OC5_SetConfig+0xb4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d00f      	beq.n	8008396 <TIM_OC5_SetConfig+0x7a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a16      	ldr	r2, [pc, #88]	@ (80083d4 <TIM_OC5_SetConfig+0xb8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00b      	beq.n	8008396 <TIM_OC5_SetConfig+0x7a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a15      	ldr	r2, [pc, #84]	@ (80083d8 <TIM_OC5_SetConfig+0xbc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d007      	beq.n	8008396 <TIM_OC5_SetConfig+0x7a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a14      	ldr	r2, [pc, #80]	@ (80083dc <TIM_OC5_SetConfig+0xc0>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d003      	beq.n	8008396 <TIM_OC5_SetConfig+0x7a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a13      	ldr	r2, [pc, #76]	@ (80083e0 <TIM_OC5_SetConfig+0xc4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d109      	bne.n	80083aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800839c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	621a      	str	r2, [r3, #32]
}
 80083c4:	bf00      	nop
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400
 80083d8:	40014000 	.word	0x40014000
 80083dc:	40014400 	.word	0x40014400
 80083e0:	40014800 	.word	0x40014800

080083e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800842a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	051b      	lsls	r3, r3, #20
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a18      	ldr	r2, [pc, #96]	@ (800849c <TIM_OC6_SetConfig+0xb8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00f      	beq.n	8008460 <TIM_OC6_SetConfig+0x7c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a17      	ldr	r2, [pc, #92]	@ (80084a0 <TIM_OC6_SetConfig+0xbc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00b      	beq.n	8008460 <TIM_OC6_SetConfig+0x7c>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a16      	ldr	r2, [pc, #88]	@ (80084a4 <TIM_OC6_SetConfig+0xc0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <TIM_OC6_SetConfig+0x7c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <TIM_OC6_SetConfig+0xc4>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_OC6_SetConfig+0x7c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a14      	ldr	r2, [pc, #80]	@ (80084ac <TIM_OC6_SetConfig+0xc8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d109      	bne.n	8008474 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	621a      	str	r2, [r3, #32]
}
 800848e:	bf00      	nop
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800

080084b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f023 0201 	bic.w	r2, r3, #1
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4a26      	ldr	r2, [pc, #152]	@ (8008574 <TIM_TI1_SetConfig+0xc4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d017      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e4:	d013      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a23      	ldr	r2, [pc, #140]	@ (8008578 <TIM_TI1_SetConfig+0xc8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a22      	ldr	r2, [pc, #136]	@ (800857c <TIM_TI1_SetConfig+0xcc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4a21      	ldr	r2, [pc, #132]	@ (8008580 <TIM_TI1_SetConfig+0xd0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a20      	ldr	r2, [pc, #128]	@ (8008584 <TIM_TI1_SetConfig+0xd4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_TI1_SetConfig+0x5e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a1f      	ldr	r2, [pc, #124]	@ (8008588 <TIM_TI1_SetConfig+0xd8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d101      	bne.n	8008512 <TIM_TI1_SetConfig+0x62>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <TIM_TI1_SetConfig+0x64>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e003      	b.n	8008532 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	b2db      	uxtb	r3, r3
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f023 030a 	bic.w	r3, r3, #10
 800854c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f003 030a 	and.w	r3, r3, #10
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40012c00 	.word	0x40012c00
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40013400 	.word	0x40013400
 8008588:	40014000 	.word	0x40014000

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 030a 	bic.w	r3, r3, #10
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0210 	bic.w	r2, r3, #16
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	031b      	lsls	r3, r3, #12
 800862e:	b29b      	uxth	r3, r3
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800863c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	621a      	str	r2, [r3, #32]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f023 0210 	bic.w	r2, r3, #16
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800868e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	031b      	lsls	r3, r3, #12
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f023 0303 	bic.w	r3, r3, #3
 80086f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008700:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	b2db      	uxtb	r3, r3
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008714:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	021b      	lsls	r3, r3, #8
 800871a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	621a      	str	r2, [r3, #32]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008768:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800877a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	031b      	lsls	r3, r3, #12
 8008780:	b29b      	uxth	r3, r3
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800878e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	031b      	lsls	r3, r3, #12
 8008794:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	621a      	str	r2, [r3, #32]
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f043 0307 	orr.w	r3, r3, #7
 80087d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	609a      	str	r2, [r3, #8]
}
 80087e0:	bf00      	nop
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	021a      	lsls	r2, r3, #8
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	431a      	orrs	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4313      	orrs	r3, r2
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	609a      	str	r2, [r3, #8]
}
 8008820:	bf00      	nop
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	2201      	movs	r2, #1
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1a      	ldr	r2, [r3, #32]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	43db      	mvns	r3, r3
 800884e:	401a      	ands	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1a      	ldr	r2, [r3, #32]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	fa01 f303 	lsl.w	r3, r1, r3
 8008864:	431a      	orrs	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800888c:	2302      	movs	r3, #2
 800888e:	e068      	b.n	8008962 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2202      	movs	r2, #2
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d004      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2d      	ldr	r2, [pc, #180]	@ (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d108      	bne.n	80088d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01d      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008902:	d018      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1b      	ldr	r2, [pc, #108]	@ (8008978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1a      	ldr	r2, [pc, #104]	@ (800897c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a18      	ldr	r2, [pc, #96]	@ (8008980 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a13      	ldr	r2, [pc, #76]	@ (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a14      	ldr	r2, [pc, #80]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d10c      	bne.n	8008950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800893c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	4313      	orrs	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	40012c00 	.word	0x40012c00
 8008974:	40013400 	.word	0x40013400
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40000c00 	.word	0x40000c00
 8008984:	40014000 	.word	0x40014000

08008988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e065      	b.n	8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	041b      	lsls	r3, r3, #16
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a16      	ldr	r2, [pc, #88]	@ (8008a7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a14      	ldr	r2, [pc, #80]	@ (8008a80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d115      	bne.n	8008a5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	051b      	lsls	r3, r3, #20
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	69db      	ldr	r3, [r3, #28]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	40012c00 	.word	0x40012c00
 8008a80:	40013400 	.word	0x40013400

08008a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e040      	b.n	8008b54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7f9 fd76 	bl	80025d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2224      	movs	r2, #36	@ 0x24
 8008aec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0201 	bic.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fae0 	bl	80090cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f825 	bl	8008b5c <UART_SetConfig>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e01b      	b.n	8008b54 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fb5f 	bl	8009210 <UART_CheckIdleState>
 8008b52:	4603      	mov	r3, r0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b60:	b08a      	sub	sp, #40	@ 0x28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	431a      	orrs	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4ba4      	ldr	r3, [pc, #656]	@ (8008e1c <UART_SetConfig+0x2c0>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a99      	ldr	r2, [pc, #612]	@ (8008e20 <UART_SetConfig+0x2c4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d004      	beq.n	8008bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a90      	ldr	r2, [pc, #576]	@ (8008e24 <UART_SetConfig+0x2c8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d126      	bne.n	8008c34 <UART_SetConfig+0xd8>
 8008be6:	4b90      	ldr	r3, [pc, #576]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d81b      	bhi.n	8008c2c <UART_SetConfig+0xd0>
 8008bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <UART_SetConfig+0xa0>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c0d 	.word	0x08008c0d
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c25 	.word	0x08008c25
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c12:	e116      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c14:	2302      	movs	r3, #2
 8008c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c1a:	e112      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c22:	e10e      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c2a:	e10a      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c32:	e106      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a7c      	ldr	r2, [pc, #496]	@ (8008e2c <UART_SetConfig+0x2d0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d138      	bne.n	8008cb0 <UART_SetConfig+0x154>
 8008c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c44:	f003 030c 	and.w	r3, r3, #12
 8008c48:	2b0c      	cmp	r3, #12
 8008c4a:	d82d      	bhi.n	8008ca8 <UART_SetConfig+0x14c>
 8008c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <UART_SetConfig+0xf8>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008ca9 	.word	0x08008ca9
 8008c5c:	08008ca9 	.word	0x08008ca9
 8008c60:	08008ca9 	.word	0x08008ca9
 8008c64:	08008c99 	.word	0x08008c99
 8008c68:	08008ca9 	.word	0x08008ca9
 8008c6c:	08008ca9 	.word	0x08008ca9
 8008c70:	08008ca9 	.word	0x08008ca9
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008ca9 	.word	0x08008ca9
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	08008ca9 	.word	0x08008ca9
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8e:	e0d8      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c90:	2302      	movs	r3, #2
 8008c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c96:	e0d4      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008c98:	2304      	movs	r3, #4
 8008c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9e:	e0d0      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008ca0:	2308      	movs	r3, #8
 8008ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ca6:	e0cc      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008ca8:	2310      	movs	r3, #16
 8008caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cae:	e0c8      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a5e      	ldr	r2, [pc, #376]	@ (8008e30 <UART_SetConfig+0x2d4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d125      	bne.n	8008d06 <UART_SetConfig+0x1aa>
 8008cba:	4b5b      	ldr	r3, [pc, #364]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cc4:	2b30      	cmp	r3, #48	@ 0x30
 8008cc6:	d016      	beq.n	8008cf6 <UART_SetConfig+0x19a>
 8008cc8:	2b30      	cmp	r3, #48	@ 0x30
 8008cca:	d818      	bhi.n	8008cfe <UART_SetConfig+0x1a2>
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d00a      	beq.n	8008ce6 <UART_SetConfig+0x18a>
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d814      	bhi.n	8008cfe <UART_SetConfig+0x1a2>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <UART_SetConfig+0x182>
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d008      	beq.n	8008cee <UART_SetConfig+0x192>
 8008cdc:	e00f      	b.n	8008cfe <UART_SetConfig+0x1a2>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce4:	e0ad      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cec:	e0a9      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008cee:	2304      	movs	r3, #4
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf4:	e0a5      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfc:	e0a1      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008cfe:	2310      	movs	r3, #16
 8008d00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d04:	e09d      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8008e34 <UART_SetConfig+0x2d8>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d125      	bne.n	8008d5c <UART_SetConfig+0x200>
 8008d10:	4b45      	ldr	r3, [pc, #276]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d1c:	d016      	beq.n	8008d4c <UART_SetConfig+0x1f0>
 8008d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d20:	d818      	bhi.n	8008d54 <UART_SetConfig+0x1f8>
 8008d22:	2b80      	cmp	r3, #128	@ 0x80
 8008d24:	d00a      	beq.n	8008d3c <UART_SetConfig+0x1e0>
 8008d26:	2b80      	cmp	r3, #128	@ 0x80
 8008d28:	d814      	bhi.n	8008d54 <UART_SetConfig+0x1f8>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <UART_SetConfig+0x1d8>
 8008d2e:	2b40      	cmp	r3, #64	@ 0x40
 8008d30:	d008      	beq.n	8008d44 <UART_SetConfig+0x1e8>
 8008d32:	e00f      	b.n	8008d54 <UART_SetConfig+0x1f8>
 8008d34:	2300      	movs	r3, #0
 8008d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d3a:	e082      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d42:	e07e      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d44:	2304      	movs	r3, #4
 8008d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d4a:	e07a      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d52:	e076      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d54:	2310      	movs	r3, #16
 8008d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d5a:	e072      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a35      	ldr	r2, [pc, #212]	@ (8008e38 <UART_SetConfig+0x2dc>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d12a      	bne.n	8008dbc <UART_SetConfig+0x260>
 8008d66:	4b30      	ldr	r3, [pc, #192]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d74:	d01a      	beq.n	8008dac <UART_SetConfig+0x250>
 8008d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d7a:	d81b      	bhi.n	8008db4 <UART_SetConfig+0x258>
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d80:	d00c      	beq.n	8008d9c <UART_SetConfig+0x240>
 8008d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d86:	d815      	bhi.n	8008db4 <UART_SetConfig+0x258>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <UART_SetConfig+0x238>
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d90:	d008      	beq.n	8008da4 <UART_SetConfig+0x248>
 8008d92:	e00f      	b.n	8008db4 <UART_SetConfig+0x258>
 8008d94:	2300      	movs	r3, #0
 8008d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d9a:	e052      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008da2:	e04e      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008da4:	2304      	movs	r3, #4
 8008da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008daa:	e04a      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008dac:	2308      	movs	r3, #8
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008db2:	e046      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008db4:	2310      	movs	r3, #16
 8008db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dba:	e042      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <UART_SetConfig+0x2c4>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d13a      	bne.n	8008e3c <UART_SetConfig+0x2e0>
 8008dc6:	4b18      	ldr	r3, [pc, #96]	@ (8008e28 <UART_SetConfig+0x2cc>)
 8008dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008dd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dd4:	d01a      	beq.n	8008e0c <UART_SetConfig+0x2b0>
 8008dd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dda:	d81b      	bhi.n	8008e14 <UART_SetConfig+0x2b8>
 8008ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008de0:	d00c      	beq.n	8008dfc <UART_SetConfig+0x2a0>
 8008de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008de6:	d815      	bhi.n	8008e14 <UART_SetConfig+0x2b8>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <UART_SetConfig+0x298>
 8008dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008df0:	d008      	beq.n	8008e04 <UART_SetConfig+0x2a8>
 8008df2:	e00f      	b.n	8008e14 <UART_SetConfig+0x2b8>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dfa:	e022      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e02:	e01e      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e0a:	e01a      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e12:	e016      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e1a:	e012      	b.n	8008e42 <UART_SetConfig+0x2e6>
 8008e1c:	efff69f3 	.word	0xefff69f3
 8008e20:	40008000 	.word	0x40008000
 8008e24:	40013800 	.word	0x40013800
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40004400 	.word	0x40004400
 8008e30:	40004800 	.word	0x40004800
 8008e34:	40004c00 	.word	0x40004c00
 8008e38:	40005000 	.word	0x40005000
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a9f      	ldr	r2, [pc, #636]	@ (80090c4 <UART_SetConfig+0x568>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d17a      	bne.n	8008f42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d824      	bhi.n	8008e9e <UART_SetConfig+0x342>
 8008e54:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <UART_SetConfig+0x300>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e9f 	.word	0x08008e9f
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e9f 	.word	0x08008e9f
 8008e6c:	08008e8f 	.word	0x08008e8f
 8008e70:	08008e9f 	.word	0x08008e9f
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008e9f 	.word	0x08008e9f
 8008e7c:	08008e97 	.word	0x08008e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e80:	f7fd fa48 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8008e84:	61f8      	str	r0, [r7, #28]
        break;
 8008e86:	e010      	b.n	8008eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e88:	4b8f      	ldr	r3, [pc, #572]	@ (80090c8 <UART_SetConfig+0x56c>)
 8008e8a:	61fb      	str	r3, [r7, #28]
        break;
 8008e8c:	e00d      	b.n	8008eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e8e:	f7fd f9a9 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 8008e92:	61f8      	str	r0, [r7, #28]
        break;
 8008e94:	e009      	b.n	8008eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e9a:	61fb      	str	r3, [r7, #28]
        break;
 8008e9c:	e005      	b.n	8008eaa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80fb 	beq.w	80090a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	4413      	add	r3, r2
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d305      	bcc.n	8008ece <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d903      	bls.n	8008ed6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ed4:	e0e8      	b.n	80090a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	461c      	mov	r4, r3
 8008edc:	4615      	mov	r5, r2
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	022b      	lsls	r3, r5, #8
 8008ee8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008eec:	0222      	lsls	r2, r4, #8
 8008eee:	68f9      	ldr	r1, [r7, #12]
 8008ef0:	6849      	ldr	r1, [r1, #4]
 8008ef2:	0849      	lsrs	r1, r1, #1
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	4681      	mov	r9, r0
 8008efa:	eb12 0a08 	adds.w	sl, r2, r8
 8008efe:	eb43 0b09 	adc.w	fp, r3, r9
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	603b      	str	r3, [r7, #0]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	4650      	mov	r0, sl
 8008f12:	4659      	mov	r1, fp
 8008f14:	f7f7 fca2 	bl	800085c <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f26:	d308      	bcc.n	8008f3a <UART_SetConfig+0x3de>
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f2e:	d204      	bcs.n	8008f3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	60da      	str	r2, [r3, #12]
 8008f38:	e0b6      	b.n	80090a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f40:	e0b2      	b.n	80090a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f4a:	d15e      	bne.n	800900a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d828      	bhi.n	8008fa6 <UART_SetConfig+0x44a>
 8008f54:	a201      	add	r2, pc, #4	@ (adr r2, 8008f5c <UART_SetConfig+0x400>)
 8008f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5a:	bf00      	nop
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008f89 	.word	0x08008f89
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	08008fa7 	.word	0x08008fa7
 8008f6c:	08008f97 	.word	0x08008f97
 8008f70:	08008fa7 	.word	0x08008fa7
 8008f74:	08008fa7 	.word	0x08008fa7
 8008f78:	08008fa7 	.word	0x08008fa7
 8008f7c:	08008f9f 	.word	0x08008f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f80:	f7fd f9c8 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8008f84:	61f8      	str	r0, [r7, #28]
        break;
 8008f86:	e014      	b.n	8008fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f88:	f7fd f9da 	bl	8006340 <HAL_RCC_GetPCLK2Freq>
 8008f8c:	61f8      	str	r0, [r7, #28]
        break;
 8008f8e:	e010      	b.n	8008fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f90:	4b4d      	ldr	r3, [pc, #308]	@ (80090c8 <UART_SetConfig+0x56c>)
 8008f92:	61fb      	str	r3, [r7, #28]
        break;
 8008f94:	e00d      	b.n	8008fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f96:	f7fd f925 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 8008f9a:	61f8      	str	r0, [r7, #28]
        break;
 8008f9c:	e009      	b.n	8008fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fa2:	61fb      	str	r3, [r7, #28]
        break;
 8008fa4:	e005      	b.n	8008fb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d077      	beq.n	80090a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	005a      	lsls	r2, r3, #1
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	085b      	lsrs	r3, r3, #1
 8008fc2:	441a      	add	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b0f      	cmp	r3, #15
 8008fd2:	d916      	bls.n	8009002 <UART_SetConfig+0x4a6>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fda:	d212      	bcs.n	8009002 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	f023 030f 	bic.w	r3, r3, #15
 8008fe4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	8afb      	ldrh	r3, [r7, #22]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	8afa      	ldrh	r2, [r7, #22]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	e052      	b.n	80090a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009008:	e04e      	b.n	80090a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800900a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800900e:	2b08      	cmp	r3, #8
 8009010:	d827      	bhi.n	8009062 <UART_SetConfig+0x506>
 8009012:	a201      	add	r2, pc, #4	@ (adr r2, 8009018 <UART_SetConfig+0x4bc>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	08009063 	.word	0x08009063
 8009028:	08009053 	.word	0x08009053
 800902c:	08009063 	.word	0x08009063
 8009030:	08009063 	.word	0x08009063
 8009034:	08009063 	.word	0x08009063
 8009038:	0800905b 	.word	0x0800905b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800903c:	f7fd f96a 	bl	8006314 <HAL_RCC_GetPCLK1Freq>
 8009040:	61f8      	str	r0, [r7, #28]
        break;
 8009042:	e014      	b.n	800906e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fd f97c 	bl	8006340 <HAL_RCC_GetPCLK2Freq>
 8009048:	61f8      	str	r0, [r7, #28]
        break;
 800904a:	e010      	b.n	800906e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800904c:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <UART_SetConfig+0x56c>)
 800904e:	61fb      	str	r3, [r7, #28]
        break;
 8009050:	e00d      	b.n	800906e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009052:	f7fd f8c7 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 8009056:	61f8      	str	r0, [r7, #28]
        break;
 8009058:	e009      	b.n	800906e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800905a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905e:	61fb      	str	r3, [r7, #28]
        break;
 8009060:	e005      	b.n	800906e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800906c:	bf00      	nop
    }

    if (pclk != 0U)
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d019      	beq.n	80090a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	085a      	lsrs	r2, r3, #1
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	fbb2 f3f3 	udiv	r3, r2, r3
 8009086:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b0f      	cmp	r3, #15
 800908c:	d909      	bls.n	80090a2 <UART_SetConfig+0x546>
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009094:	d205      	bcs.n	80090a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60da      	str	r2, [r3, #12]
 80090a0:	e002      	b.n	80090a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80090b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3728      	adds	r7, #40	@ 0x28
 80090bc:	46bd      	mov	sp, r7
 80090be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090c2:	bf00      	nop
 80090c4:	40008000 	.word	0x40008000
 80090c8:	00f42400 	.word	0x00f42400

080090cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01a      	beq.n	80091e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ca:	d10a      	bne.n	80091e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	605a      	str	r2, [r3, #4]
  }
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b098      	sub	sp, #96	@ 0x60
 8009214:	af02      	add	r7, sp, #8
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009220:	f7f9 fe62 	bl	8002ee8 <HAL_GetTick>
 8009224:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0308 	and.w	r3, r3, #8
 8009230:	2b08      	cmp	r3, #8
 8009232:	d12e      	bne.n	8009292 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800923c:	2200      	movs	r2, #0
 800923e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f88c 	bl	8009360 <UART_WaitOnFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d021      	beq.n	8009292 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009262:	653b      	str	r3, [r7, #80]	@ 0x50
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926c:	647b      	str	r3, [r7, #68]	@ 0x44
 800926e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e6      	bne.n	800924e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e062      	b.n	8009358 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b04      	cmp	r3, #4
 800929e:	d149      	bne.n	8009334 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a8:	2200      	movs	r2, #0
 80092aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f856 	bl	8009360 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d03c      	beq.n	8009334 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	623b      	str	r3, [r7, #32]
   return(result);
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80092da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e6      	bne.n	80092ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3308      	adds	r3, #8
 80092f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3308      	adds	r3, #8
 800930a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800930c:	61fa      	str	r2, [r7, #28]
 800930e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	69b9      	ldr	r1, [r7, #24]
 8009312:	69fa      	ldr	r2, [r7, #28]
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	617b      	str	r3, [r7, #20]
   return(result);
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e5      	bne.n	80092ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e011      	b.n	8009358 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2220      	movs	r2, #32
 800933e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3758      	adds	r7, #88	@ 0x58
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009370:	e04f      	b.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d04b      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800937a:	f7f9 fdb5 	bl	8002ee8 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	429a      	cmp	r2, r3
 8009388:	d302      	bcc.n	8009390 <UART_WaitOnFlagUntilTimeout+0x30>
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e04e      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d037      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b80      	cmp	r3, #128	@ 0x80
 80093a6:	d034      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b40      	cmp	r3, #64	@ 0x40
 80093ac:	d031      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d110      	bne.n	80093de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2208      	movs	r2, #8
 80093c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 f838 	bl	800943a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2208      	movs	r2, #8
 80093ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e029      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ec:	d111      	bne.n	8009412 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80093f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f81e 	bl	800943a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e00f      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69da      	ldr	r2, [r3, #28]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4013      	ands	r3, r2
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	429a      	cmp	r2, r3
 8009420:	bf0c      	ite	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	2300      	movne	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	429a      	cmp	r2, r3
 800942e:	d0a0      	beq.n	8009372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800943a:	b480      	push	{r7}
 800943c:	b095      	sub	sp, #84	@ 0x54
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	461a      	mov	r2, r3
 800945e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009460:	643b      	str	r3, [r7, #64]	@ 0x40
 8009462:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009466:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800946e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e6      	bne.n	8009442 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	61fb      	str	r3, [r7, #28]
   return(result);
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f023 0301 	bic.w	r3, r3, #1
 800948a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009494:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009496:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800949a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e5      	bne.n	8009474 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d118      	bne.n	80094e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6979      	ldr	r1, [r7, #20]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	613b      	str	r3, [r7, #16]
   return(result);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e6      	bne.n	80094b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80094f6:	bf00      	nop
 80094f8:	3754      	adds	r7, #84	@ 0x54
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e056      	b.n	80095c8 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f7f9 f852 	bl	80025d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2224      	movs	r2, #36	@ 0x24
 8009534:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0201 	bic.w	r2, r2, #1
 8009544:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff fdbc 	bl	80090cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff fb01 	bl	8008b5c <UART_SetConfig>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e031      	b.n	80095c8 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009572:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	430a      	orrs	r2, r1
 8009586:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	055b      	lsls	r3, r3, #21
 800958c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80095a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	6979      	ldr	r1, [r7, #20]
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fe25 	bl	8009210 <UART_CheckIdleState>
 80095c6:	4603      	mov	r3, r0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009618 <__libc_init_array+0x38>)
 80095e4:	4c0d      	ldr	r4, [pc, #52]	@ (800961c <__libc_init_array+0x3c>)
 80095e6:	1b64      	subs	r4, r4, r5
 80095e8:	10a4      	asrs	r4, r4, #2
 80095ea:	2600      	movs	r6, #0
 80095ec:	42a6      	cmp	r6, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009620 <__libc_init_array+0x40>)
 80095f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009624 <__libc_init_array+0x44>)
 80095f4:	f000 f818 	bl	8009628 <_init>
 80095f8:	1b64      	subs	r4, r4, r5
 80095fa:	10a4      	asrs	r4, r4, #2
 80095fc:	2600      	movs	r6, #0
 80095fe:	42a6      	cmp	r6, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	f855 3b04 	ldr.w	r3, [r5], #4
 8009608:	4798      	blx	r3
 800960a:	3601      	adds	r6, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009612:	4798      	blx	r3
 8009614:	3601      	adds	r6, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	08009694 	.word	0x08009694
 800961c:	08009694 	.word	0x08009694
 8009620:	08009694 	.word	0x08009694
 8009624:	08009698 	.word	0x08009698

08009628 <_init>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr

08009634 <_fini>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr
