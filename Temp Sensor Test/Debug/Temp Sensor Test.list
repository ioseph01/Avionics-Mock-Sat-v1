
Temp Sensor Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003854  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a1c  08003a1c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a1c  08003a1c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a20  08003a20  00004a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08003a30  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003a30  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e296  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa8  00000000  00000000  000132d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00015280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  000161a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d02  00000000  00000000  00016d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011de9  00000000  00000000  00018a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec994  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001171e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  00117228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0011b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039c4 	.word	0x080039c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080039c4 	.word	0x080039c4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb3d 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f82b 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f925 	bl	8000424 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001da:	f000 f87f 	bl	80002dc <MX_I2C2_Init>
  MX_TIM2_Init();
 80001de:	f000 f8bd 	bl	800035c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 /* uint8_t SunSensorStatus = LTR_329_Init(&hi2c2);*/

  uint8_t TempSensorStatus = MCP_9808_Init(&hi2c2);
 80001e2:	4810      	ldr	r0, [pc, #64]	@ (8000224 <main+0x5c>)
 80001e4:	f000 f98e 	bl	8000504 <MCP_9808_Init>
 80001e8:	4603      	mov	r3, r0
 80001ea:	71fb      	strb	r3, [r7, #7]

  if(TempSensorStatus != 0 ){
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d005      	beq.n	80001fe <main+0x36>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2120      	movs	r1, #32
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fa:	f000 fe57 	bl	8000eac <HAL_GPIO_WritePin>

	  if(SunSensorStatus != 0 ){
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
	    }
	  HAL_Delay(500);*/
	  TempSensorStatus = MCP_9808_Read(&TempSensor);
 80001fe:	480a      	ldr	r0, [pc, #40]	@ (8000228 <main+0x60>)
 8000200:	f000 f9a0 	bl	8000544 <MCP_9808_Read>
 8000204:	4603      	mov	r3, r0
 8000206:	71fb      	strb	r3, [r7, #7]

	  if(TempSensorStatus != 0 ){
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d005      	beq.n	800021a <main+0x52>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	2120      	movs	r1, #32
 8000212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000216:	f000 fe49 	bl	8000eac <HAL_GPIO_WritePin>
	    }
	  HAL_Delay(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800021e:	f000 fb91 	bl	8000944 <HAL_Delay>
	  TempSensorStatus = MCP_9808_Read(&TempSensor);
 8000222:	e7ec      	b.n	80001fe <main+0x36>
 8000224:	20000028 	.word	0x20000028
 8000228:	200000c8 	.word	0x200000c8

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	@ 0x58
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2244      	movs	r2, #68	@ 0x44
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fb96 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000252:	f001 fb0d 	bl	8001870 <HAL_PWREx_ControlVoltageScaling>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800025c:	f000 f94c 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000260:	2302      	movs	r3, #2
 8000262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026a:	2310      	movs	r3, #16
 800026c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000272:	2302      	movs	r3, #2
 8000274:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000276:	2301      	movs	r3, #1
 8000278:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800027a:	230a      	movs	r3, #10
 800027c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800027e:	2307      	movs	r3, #7
 8000280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fb44 	bl	800191c <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800029a:	f000 f92d 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2303      	movs	r3, #3
 80002a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b2:	463b      	mov	r3, r7
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 ff0c 	bl	80020d4 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002c2:	f000 f919 	bl	80004f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80002cc:	2000      	movs	r0, #0
 80002ce:	f002 f801 	bl	80022d4 <HAL_RCC_MCOConfig>
}
 80002d2:	bf00      	nop
 80002d4:	3758      	adds	r7, #88	@ 0x58
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C2_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C2_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C2_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C2_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <MX_I2C2_Init+0x74>)
 8000318:	f000 fde0 	bl	8000edc <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f8e9 	bl	80004f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <MX_I2C2_Init+0x74>)
 800032a:	f001 f9fb 	bl	8001724 <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f8e0 	bl	80004f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_I2C2_Init+0x74>)
 800033c:	f001 fa3d 	bl	80017ba <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f8d7 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028
 8000354:	40005800 	.word	0x40005800
 8000358:	10d19ce4 	.word	0x10d19ce4

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	@ 0x28
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000362:	f107 031c 	add.w	r3, r7, #28
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800036e:	463b      	mov	r3, r7
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
 800037c:	615a      	str	r2, [r3, #20]
 800037e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000380:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <MX_TIM2_Init+0xc4>)
 8000382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000388:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <MX_TIM2_Init+0xc4>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038e:	4b24      	ldr	r3, [pc, #144]	@ (8000420 <MX_TIM2_Init+0xc4>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000394:	4b22      	ldr	r3, [pc, #136]	@ (8000420 <MX_TIM2_Init+0xc4>)
 8000396:	f04f 32ff 	mov.w	r2, #4294967295
 800039a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039c:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_TIM2_Init+0xc4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <MX_TIM2_Init+0xc4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003a8:	481d      	ldr	r0, [pc, #116]	@ (8000420 <MX_TIM2_Init+0xc4>)
 80003aa:	f002 fd6f 	bl	8002e8c <HAL_TIM_PWM_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003b4:	f000 f8a0 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c0:	f107 031c 	add.w	r3, r7, #28
 80003c4:	4619      	mov	r1, r3
 80003c6:	4816      	ldr	r0, [pc, #88]	@ (8000420 <MX_TIM2_Init+0xc4>)
 80003c8:	f003 fa48 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80003d2:	f000 f891 	bl	80004f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003d6:	2360      	movs	r3, #96	@ 0x60
 80003d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	4619      	mov	r1, r3
 80003ec:	480c      	ldr	r0, [pc, #48]	@ (8000420 <MX_TIM2_Init+0xc4>)
 80003ee:	f002 fda5 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80003f8:	f000 f87e 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003fc:	463b      	mov	r3, r7
 80003fe:	2204      	movs	r2, #4
 8000400:	4619      	mov	r1, r3
 8000402:	4807      	ldr	r0, [pc, #28]	@ (8000420 <MX_TIM2_Init+0xc4>)
 8000404:	f002 fd9a 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800040e:	f000 f873 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000412:	4803      	ldr	r0, [pc, #12]	@ (8000420 <MX_TIM2_Init+0xc4>)
 8000414:	f000 f97a 	bl	800070c <HAL_TIM_MspPostInit>

}
 8000418:	bf00      	nop
 800041a:	3728      	adds	r7, #40	@ 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000007c 	.word	0x2000007c

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043a:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043e:	4a2d      	ldr	r2, [pc, #180]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000446:	4b2b      	ldr	r3, [pc, #172]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b28      	ldr	r3, [pc, #160]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	4a27      	ldr	r2, [pc, #156]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045e:	4b25      	ldr	r3, [pc, #148]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046e:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000470:	f043 0302 	orr.w	r3, r3, #2
 8000474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000476:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <MX_GPIO_Init+0xd0>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048a:	f000 fd0f 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800048e:	2320      	movs	r3, #32
 8000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a8:	f000 fb56 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b2:	2302      	movs	r3, #2
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004cc:	f000 fb44 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e8:	f000 fb36 	bl	8000b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <MCP_9808_Init>:
#include "stm32l4xx.h"


static I2C_HandleTypeDef * MCP_9808_I2C_HANDLE;

uint8_t MCP_9808_Init(I2C_HandleTypeDef * i2cInstance){
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	MCP_9808_I2C_HANDLE = i2cInstance;
 800050c:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <MCP_9808_Init+0x3c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6013      	str	r3, [r2, #0]

	HAL_StatusTypeDef i2cStatus;

	//check device ID

	uint16_t deviceID = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	81bb      	strh	r3, [r7, #12]

	i2cStatus =  MCP_9808_RegRead(MCP_9808_REG_MANUF_ID, &deviceID);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	2006      	movs	r0, #6
 800051e:	f000 f839 	bl	8000594 <MCP_9808_RegRead>
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]

	if ((i2cStatus != HAL_OK) || ((deviceID)!= 0x0054)){
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <MCP_9808_Init+0x2e>
 800052c:	89bb      	ldrh	r3, [r7, #12]
 800052e:	2b54      	cmp	r3, #84	@ 0x54
 8000530:	d001      	beq.n	8000536 <MCP_9808_Init+0x32>

		return 2;
 8000532:	2302      	movs	r3, #2
 8000534:	e000      	b.n	8000538 <MCP_9808_Init+0x34>
	}

	return 0;
 8000536:	2300      	movs	r3, #0

}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000d0 	.word	0x200000d0

08000544 <MCP_9808_Read>:

// in process of doing
uint16_t MCP_9808_Read(MCP_9808 * TempSensor){
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef i2cStatus;

	//Writes 16bit data
	uint16_t UpperTemp = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	81bb      	strh	r3, [r7, #12]
	uint16_t LowerTemp = 0x00;
 8000550:	2300      	movs	r3, #0
 8000552:	817b      	strh	r3, [r7, #10]

	i2cStatus =  MCP_9808_RegRead(MCP_9808_REG_UPPER_TEMP,&UpperTemp);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	2002      	movs	r0, #2
 800055c:	f000 f81a 	bl	8000594 <MCP_9808_RegRead>
 8000560:	4603      	mov	r3, r0
 8000562:	73fb      	strb	r3, [r7, #15]
	i2cStatus =  MCP_9808_RegRead(MCP_9808_REG_LOWER_TEMP, &LowerTemp);
 8000564:	f107 030a 	add.w	r3, r7, #10
 8000568:	4619      	mov	r1, r3
 800056a:	2003      	movs	r0, #3
 800056c:	f000 f812 	bl	8000594 <MCP_9808_RegRead>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]

	if (i2cStatus != HAL_OK){
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MCP_9808_Read+0x3a>

		return 1;
 800057a:	2301      	movs	r3, #1
 800057c:	e006      	b.n	800058c <MCP_9808_Read+0x48>
	}

	TempSensor->UPPER_TEMP = (UpperTemp);
 800057e:	89ba      	ldrh	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	809a      	strh	r2, [r3, #4]
	TempSensor->LOWER_TEMP = (LowerTemp);
 8000584:	897a      	ldrh	r2, [r7, #10]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	80da      	strh	r2, [r3, #6]

	return 0;
 800058a:	2300      	movs	r3, #0

}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <MCP_9808_RegRead>:

	return HAL_I2C_Mem_Write(MCP_9808_I2C_HANDLE, MCP_9808_I2CADDR_DEFAULT, regAddr, I2C_MEMADD_SIZE_8BIT, &regData, 2, HAL_MAX_DELAY);
}
//read

HAL_StatusTypeDef MCP_9808_RegRead(uint16_t regAddr, uint16_t* regData){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	80fb      	strh	r3, [r7, #6]

	return HAL_I2C_Mem_Read(MCP_9808_I2C_HANDLE, MCP_9808_I2CADDR_DEFAULT, regAddr, I2C_MEMADD_SIZE_8BIT, regData, 2, HAL_MAX_DELAY);
 80005a0:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <MCP_9808_RegRead+0x34>)
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	88fa      	ldrh	r2, [r7, #6]
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2302      	movs	r3, #2
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2130      	movs	r1, #48	@ 0x30
 80005b8:	f000 fd2c 	bl	8001014 <HAL_I2C_Mem_Read>
 80005bc:	4603      	mov	r3, r0

}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d0 	.word	0x200000d0

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_MspInit+0x44>)
 80005d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <HAL_MspInit+0x44>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <HAL_MspInit+0x44>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <HAL_MspInit+0x44>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0ac      	sub	sp, #176	@ 0xb0
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2288      	movs	r2, #136	@ 0x88
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f999 	bl	800396c <memset>
  if(hi2c->Instance==I2C2)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <HAL_I2C_MspInit+0xb0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d13b      	bne.n	80006bc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000644:	2380      	movs	r3, #128	@ 0x80
 8000646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000648:	2300      	movs	r3, #0
 800064a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ff5f 	bl	8002514 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800065c:	f7ff ff4c 	bl	80004f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000678:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800067c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000680:	2312      	movs	r3, #18
 8000682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000692:	2304      	movs	r3, #4
 8000694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800069c:	4619      	mov	r1, r3
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_I2C_MspInit+0xb8>)
 80006a0:	f000 fa5a 	bl	8000b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 80006a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 80006aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <HAL_I2C_MspInit+0xb4>)
 80006b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80006bc:	bf00      	nop
 80006be:	37b0      	adds	r7, #176	@ 0xb0
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40005800 	.word	0x40005800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400

080006d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006e0:	d10b      	bne.n	80006fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800072c:	d11c      	bne.n	8000768 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <HAL_TIM_MspPostInit+0x64>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a0f      	ldr	r2, [pc, #60]	@ (8000770 <HAL_TIM_MspPostInit+0x64>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <HAL_TIM_MspPostInit+0x64>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000746:	2303      	movs	r3, #3
 8000748:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4619      	mov	r1, r3
 8000760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000764:	f000 f9f8 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 f89b 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff ffea 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f003 f8a9 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082a:	f7ff fccd 	bl	80001c8 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000830:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800083c:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000840:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000844:	200000d8 	.word	0x200000d8

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_Init+0x3c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <HAL_Init+0x3c>)
 800085c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000860:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000862:	2003      	movs	r0, #3
 8000864:	f000 f944 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f80f 	bl	800088c <HAL_InitTick>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	e001      	b.n	800087e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087a:	f7ff fea7 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087e:	79fb      	ldrb	r3, [r7, #7]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d023      	beq.n	80008e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_InitTick+0x70>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_InitTick+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f941 	bl	8000b3e <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d809      	bhi.n	80008dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f919 	bl	8000b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <HAL_InitTick+0x74>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e007      	b.n	80008ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e001      	b.n	80008ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	200000d4 	.word	0x200000d4

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000d4 	.word	0x200000d4

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	@ (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	@ (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	@ 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	@ 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff47 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff5c 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffb0 	bl	8000aac <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e17f      	b.n	8000e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8171 	beq.w	8000e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <HAL_GPIO_Init+0x40>
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d130      	bne.n	8000bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	f003 0201 	and.w	r2, r3, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d118      	bne.n	8000c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	f003 0201 	and.w	r2, r3, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d017      	beq.n	8000c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	6939      	ldr	r1, [r7, #16]
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0203 	and.w	r2, r3, #3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80ac 	beq.w	8000e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b5c      	ldr	r3, [pc, #368]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d22:	4a5a      	ldr	r2, [pc, #360]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d4c:	d025      	beq.n	8000d9a <HAL_GPIO_Init+0x242>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4f      	ldr	r2, [pc, #316]	@ (8000e90 <HAL_GPIO_Init+0x338>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01f      	beq.n	8000d96 <HAL_GPIO_Init+0x23e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4e      	ldr	r2, [pc, #312]	@ (8000e94 <HAL_GPIO_Init+0x33c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x23a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4d      	ldr	r2, [pc, #308]	@ (8000e98 <HAL_GPIO_Init+0x340>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x236>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	@ (8000e9c <HAL_GPIO_Init+0x344>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x232>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4b      	ldr	r2, [pc, #300]	@ (8000ea0 <HAL_GPIO_Init+0x348>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x22e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ea4 <HAL_GPIO_Init+0x34c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x22a>
 8000d7e:	2306      	movs	r3, #6
 8000d80:	e00c      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d82:	2307      	movs	r3, #7
 8000d84:	e00a      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e008      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x244>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dac:	4937      	ldr	r1, [pc, #220]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dde:	4a32      	ldr	r2, [pc, #200]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de4:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e08:	4a27      	ldr	r2, [pc, #156]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <HAL_GPIO_Init+0x350>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f47f ae78 	bne.w	8000b68 <HAL_GPIO_Init+0x10>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	48001000 	.word	0x48001000
 8000ea0:	48001400 	.word	0x48001400
 8000ea4:	48001800 	.word	0x48001800
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e08d      	b.n	800100a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fb86 	bl	8000614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2224      	movs	r2, #36	@ 0x24
 8000f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0201 	bic.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d107      	bne.n	8000f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d108      	bne.n	8000f7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	e007      	b.n	8000f8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69d9      	ldr	r1, [r3, #28]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1a      	ldr	r2, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af02      	add	r7, sp, #8
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	4608      	mov	r0, r1
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4603      	mov	r3, r0
 8001024:	817b      	strh	r3, [r7, #10]
 8001026:	460b      	mov	r3, r1
 8001028:	813b      	strh	r3, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b20      	cmp	r3, #32
 8001038:	f040 80fd 	bne.w	8001236 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_I2C_Mem_Read+0x34>
 8001042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e0f1      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800105a:	2b01      	cmp	r3, #1
 800105c:	d101      	bne.n	8001062 <HAL_I2C_Mem_Read+0x4e>
 800105e:	2302      	movs	r3, #2
 8001060:	e0ea      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800106a:	f7ff fc5f 	bl	800092c <HAL_GetTick>
 800106e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2319      	movs	r3, #25
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f95b 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0d5      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2222      	movs	r2, #34	@ 0x22
 8001090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2240      	movs	r2, #64	@ 0x40
 8001098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a3a      	ldr	r2, [r7, #32]
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010b4:	88f8      	ldrh	r0, [r7, #6]
 80010b6:	893a      	ldrh	r2, [r7, #8]
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4603      	mov	r3, r0
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f8bf 	bl	8001248 <I2C_RequestMemoryRead>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0ad      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	2bff      	cmp	r3, #255	@ 0xff
 80010e4:	d90e      	bls.n	8001104 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2201      	movs	r2, #1
 80010ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	8979      	ldrh	r1, [r7, #10]
 80010f4:	4b52      	ldr	r3, [pc, #328]	@ (8001240 <HAL_I2C_Mem_Read+0x22c>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f000 fadf 	bl	80016c0 <I2C_TransferConfig>
 8001102:	e00f      	b.n	8001124 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001108:	b29a      	uxth	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001112:	b2da      	uxtb	r2, r3
 8001114:	8979      	ldrh	r1, [r7, #10]
 8001116:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <HAL_I2C_Mem_Read+0x22c>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 face 	bl	80016c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 f902 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07c      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800115a:	3b01      	subs	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001174:	b29b      	uxth	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d034      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x1d0>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800117e:	2b00      	cmp	r3, #0
 8001180:	d130      	bne.n	80011e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001188:	2200      	movs	r2, #0
 800118a:	2180      	movs	r1, #128	@ 0x80
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f8d3 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e04d      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d90e      	bls.n	80011c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	8979      	ldrh	r1, [r7, #10]
 80011b4:	2300      	movs	r3, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 fa7f 	bl	80016c0 <I2C_TransferConfig>
 80011c2:	e00f      	b.n	80011e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	8979      	ldrh	r1, [r7, #10]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f000 fa6e 	bl	80016c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d19a      	bne.n	8001124 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 f940 	bl	8001478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e01a      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2220      	movs	r2, #32
 8001208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_I2C_Mem_Read+0x230>)
 8001216:	400b      	ands	r3, r1
 8001218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2220      	movs	r2, #32
 800121e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001236:	2302      	movs	r3, #2
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	80002400 	.word	0x80002400
 8001244:	fe00e800 	.word	0xfe00e800

08001248 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	817b      	strh	r3, [r7, #10]
 800125a:	460b      	mov	r3, r1
 800125c:	813b      	strh	r3, [r7, #8]
 800125e:	4613      	mov	r3, r2
 8001260:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	8979      	ldrh	r1, [r7, #10]
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <I2C_RequestMemoryRead+0xa4>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 fa26 	bl	80016c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f8b6 	bl	80013ea <I2C_WaitOnTXISFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e02c      	b.n	80012e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d105      	bne.n	800129a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800128e:	893b      	ldrh	r3, [r7, #8]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
 8001298:	e015      	b.n	80012c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800129a:	893b      	ldrh	r3, [r7, #8]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f89c 	bl	80013ea <I2C_WaitOnTXISFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e012      	b.n	80012e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012bc:	893b      	ldrh	r3, [r7, #8]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f831 	bl	8001338 <I2C_WaitOnFlagUntilTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	80002000 	.word	0x80002000

080012f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b02      	cmp	r3, #2
 8001304:	d103      	bne.n	800130e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d007      	beq.n	800132c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	619a      	str	r2, [r3, #24]
  }
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001348:	e03b      	b.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	6839      	ldr	r1, [r7, #0]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f8d6 	bl	8001500 <I2C_IsErrorOccurred>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e041      	b.n	80013e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d02d      	beq.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001366:	f7ff fae1 	bl	800092c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d302      	bcc.n	800137c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d122      	bne.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	4013      	ands	r3, r2
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	429a      	cmp	r2, r3
 8001398:	d113      	bne.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f043 0220 	orr.w	r2, r3, #32
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4013      	ands	r3, r2
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d0b4      	beq.n	800134a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013f6:	e033      	b.n	8001460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f87f 	bl	8001500 <I2C_IsErrorOccurred>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e031      	b.n	8001470 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001412:	d025      	beq.n	8001460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001414:	f7ff fa8a 	bl	800092c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	429a      	cmp	r2, r3
 8001422:	d302      	bcc.n	800142a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11a      	bne.n	8001460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b02      	cmp	r3, #2
 8001436:	d013      	beq.n	8001460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e007      	b.n	8001470 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d1c4      	bne.n	80013f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001484:	e02f      	b.n	80014e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f838 	bl	8001500 <I2C_IsErrorOccurred>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e02d      	b.n	80014f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149a:	f7ff fa47 	bl	800092c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d302      	bcc.n	80014b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11a      	bne.n	80014e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	d013      	beq.n	80014e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f043 0220 	orr.w	r2, r3, #32
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2220      	movs	r2, #32
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e007      	b.n	80014f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d1c8      	bne.n	8001486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d068      	beq.n	80015fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2210      	movs	r2, #16
 8001532:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001534:	e049      	b.n	80015ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d045      	beq.n	80015ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7ff f9f5 	bl	800092c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	429a      	cmp	r2, r3
 800154c:	d302      	bcc.n	8001554 <I2C_IsErrorOccurred+0x54>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d13a      	bne.n	80015ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001566:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001576:	d121      	bne.n	80015bc <I2C_IsErrorOccurred+0xbc>
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800157e:	d01d      	beq.n	80015bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001580:	7cfb      	ldrb	r3, [r7, #19]
 8001582:	2b20      	cmp	r3, #32
 8001584:	d01a      	beq.n	80015bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001594:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001596:	f7ff f9c9 	bl	800092c <HAL_GetTick>
 800159a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800159c:	e00e      	b.n	80015bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800159e:	f7ff f9c5 	bl	800092c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b19      	cmp	r3, #25
 80015aa:	d907      	bls.n	80015bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f043 0320 	orr.w	r3, r3, #32
 80015b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80015ba:	e006      	b.n	80015ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d1e9      	bne.n	800159e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d003      	beq.n	80015e0 <I2C_IsErrorOccurred+0xe0>
 80015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0aa      	beq.n	8001536 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2220      	movs	r2, #32
 80015ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001620:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001642:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01c      	beq.n	80016ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fe3b 	bl	80012f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <I2C_IsErrorOccurred+0x1bc>)
 8001686:	400b      	ands	r3, r1
 8001688:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2220      	movs	r2, #32
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80016ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	fe00e800 	.word	0xfe00e800

080016c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	817b      	strh	r3, [r7, #10]
 80016ce:	4613      	mov	r3, r2
 80016d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016d8:	7a7b      	ldrb	r3, [r7, #9]
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <I2C_TransferConfig+0x60>)
 8001700:	430b      	orrs	r3, r1
 8001702:	43db      	mvns	r3, r3
 8001704:	ea02 0103 	and.w	r1, r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	03ff63ff 	.word	0x03ff63ff

08001724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	d138      	bne.n	80017ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001744:	2302      	movs	r3, #2
 8001746:	e032      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	@ 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e000      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017ac:	2302      	movs	r3, #2
  }
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d139      	bne.n	8001844 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017da:	2302      	movs	r3, #2
 80017dc:	e033      	b.n	8001846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2224      	movs	r2, #36	@ 0x24
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800180c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001844:	2302      	movs	r3, #2
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001858:	4b04      	ldr	r3, [pc, #16]	@ (800186c <HAL_PWREx_GetVoltageRange+0x18>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000

08001870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800187e:	d130      	bne.n	80018e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800188c:	d038      	beq.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001896:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001898:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2232      	movs	r2, #50	@ 0x32
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b4:	e002      	b.n	80018bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018c8:	d102      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f2      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018dc:	d110      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e00f      	b.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ee:	d007      	beq.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018f8:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40007000 	.word	0x40007000
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83

0800191c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e3ca      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192e:	4b97      	ldr	r3, [pc, #604]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001938:	4b94      	ldr	r3, [pc, #592]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80e4 	beq.w	8001b18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <HAL_RCC_OscConfig+0x4a>
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	f040 808b 	bne.w	8001a74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	f040 8087 	bne.w	8001a74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x62>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e3a2      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	4b82      	ldr	r3, [pc, #520]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_RCC_OscConfig+0x7c>
 800198e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001996:	e005      	b.n	80019a4 <HAL_RCC_OscConfig+0x88>
 8001998:	4b7c      	ldr	r3, [pc, #496]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d223      	bcs.n	80019f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fd51 	bl	8002454 <RCC_SetFlashLatencyFromMSIRange>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e383      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	4b73      	ldr	r3, [pc, #460]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a72      	ldr	r2, [pc, #456]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b70      	ldr	r3, [pc, #448]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	496d      	ldr	r1, [pc, #436]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	4b6c      	ldr	r3, [pc, #432]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	4968      	ldr	r1, [pc, #416]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
 80019ee:	e025      	b.n	8001a3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f0:	4b66      	ldr	r3, [pc, #408]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a65      	ldr	r2, [pc, #404]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b63      	ldr	r3, [pc, #396]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4960      	ldr	r1, [pc, #384]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	495b      	ldr	r1, [pc, #364]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fd11 	bl	8002454 <RCC_SetFlashLatencyFromMSIRange>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e343      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a3c:	f000 fc7e 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b52      	ldr	r3, [pc, #328]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	4950      	ldr	r1, [pc, #320]	@ (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a4e      	ldr	r2, [pc, #312]	@ (8001b94 <HAL_RCC_OscConfig+0x278>)
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b98 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe ff13 	bl	800088c <HAL_InitTick>
 8001a66:	4603      	mov	r3, r0
 8001a68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d052      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	e327      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a7c:	4b43      	ldr	r3, [pc, #268]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a42      	ldr	r2, [pc, #264]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a88:	f7fe ff50 	bl	800092c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a90:	f7fe ff4c 	bl	800092c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e310      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aae:	4b37      	ldr	r3, [pc, #220]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a36      	ldr	r2, [pc, #216]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4931      	ldr	r1, [pc, #196]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001acc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	492c      	ldr	r1, [pc, #176]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e01a      	b.n	8001b18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a29      	ldr	r2, [pc, #164]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aee:	f7fe ff1d 	bl	800092c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af6:	f7fe ff19 	bl	800092c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e2dd      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b08:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x1da>
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d074      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x21a>
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	d10e      	bne.n	8001b4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d064      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d160      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e2ba      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x24a>
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e026      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b6e:	d115      	bne.n	8001b9c <HAL_RCC_OscConfig+0x280>
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a02      	ldr	r2, [pc, #8]	@ (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	080039dc 	.word	0x080039dc
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	4ba0      	ldr	r3, [pc, #640]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a9f      	ldr	r2, [pc, #636]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b9d      	ldr	r3, [pc, #628]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a9c      	ldr	r2, [pc, #624]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe feb6 	bl	800092c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7fe feb2 	bl	800092c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e276      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	4b92      	ldr	r3, [pc, #584]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2a8>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fea2 	bl	800092c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7fe fe9e 	bl	800092c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e262      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x2d0>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d060      	beq.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x310>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d119      	bne.n	8001c5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d116      	bne.n	8001c5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x328>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e23f      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b76      	ldr	r3, [pc, #472]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4973      	ldr	r1, [pc, #460]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	e040      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d023      	beq.n	8001caa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c62:	4b6f      	ldr	r3, [pc, #444]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fe5d 	bl	800092c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7fe fe59 	bl	800092c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e21d      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	4b65      	ldr	r3, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b62      	ldr	r3, [pc, #392]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	495f      	ldr	r1, [pc, #380]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a5c      	ldr	r2, [pc, #368]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7fe fe39 	bl	800092c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7fe fe35 	bl	800092c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1f9      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe fe14 	bl	800092c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7fe fe10 	bl	800092c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1d4      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1a:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCC_OscConfig+0x3ec>
 8001d28:	e01b      	b.n	8001d62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d30:	4a3b      	ldr	r2, [pc, #236]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fdf7 	bl	800092c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d42:	f7fe fdf3 	bl	800092c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1b7      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d54:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a6 	beq.w	8001ebc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d84:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8c:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d118      	bne.n	8001dda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db4:	f7fe fdba 	bl	800092c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7fe fdb6 	bl	800092c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e17a      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4d8>
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df2:	e029      	b.n	8001e48 <HAL_RCC_OscConfig+0x52c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d115      	bne.n	8001e28 <HAL_RCC_OscConfig+0x50c>
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e02:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e12:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x52c>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
 8001e28:	4b9c      	ldr	r3, [pc, #624]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e38:	4b98      	ldr	r3, [pc, #608]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a97      	ldr	r2, [pc, #604]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7fe fd6c 	bl	800092c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe fd68 	bl	800092c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e12a      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ed      	beq.n	8001e58 <HAL_RCC_OscConfig+0x53c>
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7fe fd55 	bl	800092c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe fd51 	bl	800092c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e113      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9c:	4b7f      	ldr	r3, [pc, #508]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ed      	bne.n	8001e86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a79      	ldr	r2, [pc, #484]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80fe 	beq.w	80020c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 80d0 	bne.w	8002070 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed0:	4b72      	ldr	r3, [pc, #456]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d130      	bne.n	8001f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d127      	bne.n	8001f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d11f      	bne.n	8001f46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f10:	2a07      	cmp	r2, #7
 8001f12:	bf14      	ite	ne
 8001f14:	2201      	movne	r2, #1
 8001f16:	2200      	moveq	r2, #0
 8001f18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d113      	bne.n	8001f46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d06e      	beq.n	8002024 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d069      	beq.n	8002020 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f58:	4b50      	ldr	r3, [pc, #320]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0ad      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f68:	4b4c      	ldr	r3, [pc, #304]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f74:	f7fe fcda 	bl	800092c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fcd6 	bl	800092c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e09a      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8e:	4b43      	ldr	r3, [pc, #268]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9a:	4b40      	ldr	r3, [pc, #256]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001faa:	3a01      	subs	r2, #1
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fb4:	0212      	lsls	r2, r2, #8
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fbc:	0852      	lsrs	r2, r2, #1
 8001fbe:	3a01      	subs	r2, #1
 8001fc0:	0552      	lsls	r2, r2, #21
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fc8:	0852      	lsrs	r2, r2, #1
 8001fca:	3a01      	subs	r2, #1
 8001fcc:	0652      	lsls	r2, r2, #25
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fd4:	0912      	lsrs	r2, r2, #4
 8001fd6:	0452      	lsls	r2, r2, #17
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	4930      	ldr	r1, [pc, #192]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff8:	f7fe fc98 	bl	800092c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe fc94 	bl	800092c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e058      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b22      	ldr	r3, [pc, #136]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201e:	e050      	b.n	80020c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e04f      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002024:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d148      	bne.n	80020c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002030:	4b1a      	ldr	r3, [pc, #104]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a16      	ldr	r2, [pc, #88]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002046:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002048:	f7fe fc70 	bl	800092c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fc6c 	bl	800092c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e030      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x734>
 800206e:	e028      	b.n	80020c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d023      	beq.n	80020be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a08      	ldr	r2, [pc, #32]	@ (800209c <HAL_RCC_OscConfig+0x780>)
 800207c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fc53 	bl	800092c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002088:	e00c      	b.n	80020a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fc4f 	bl	800092c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d905      	bls.n	80020a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e013      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
 800209c:	40021000 	.word	0x40021000
 80020a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_RCC_OscConfig+0x7b0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ec      	bne.n	800208a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x7b0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4905      	ldr	r1, [pc, #20]	@ (80020cc <HAL_RCC_OscConfig+0x7b0>)
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_OscConfig+0x7b4>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e001      	b.n	80020c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	feeefffc 	.word	0xfeeefffc

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0e7      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b75      	ldr	r3, [pc, #468]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b72      	ldr	r3, [pc, #456]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4970      	ldr	r1, [pc, #448]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b6e      	ldr	r3, [pc, #440]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0cf      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d010      	beq.n	8002146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002130:	429a      	cmp	r2, r3
 8002132:	d908      	bls.n	8002146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4960      	ldr	r1, [pc, #384]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d04c      	beq.n	80021ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	4b5a      	ldr	r3, [pc, #360]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0a6      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	4b54      	ldr	r3, [pc, #336]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e09a      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218a:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e08e      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	4b4a      	ldr	r3, [pc, #296]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e086      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b46      	ldr	r3, [pc, #280]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4943      	ldr	r1, [pc, #268]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021bc:	f7fe fbb6 	bl	800092c <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fbb2 	bl	800092c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e06e      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b3a      	ldr	r3, [pc, #232]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	4b31      	ldr	r3, [pc, #196]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002204:	429a      	cmp	r2, r3
 8002206:	d208      	bcs.n	800221a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	492b      	ldr	r1, [pc, #172]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221a:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d210      	bcs.n	800224a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 0207 	bic.w	r2, r3, #7
 8002230:	4923      	ldr	r1, [pc, #140]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_RCC_ClockConfig+0x1ec>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e036      	b.n	80022b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002256:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4918      	ldr	r1, [pc, #96]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002274:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4910      	ldr	r1, [pc, #64]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002288:	f000 f858 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	490b      	ldr	r1, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x1f4>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1f8>)
 80022a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1fc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe faed 	bl	800088c <HAL_InitTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	080039dc 	.word	0x080039dc
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	@ 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_RCC_MCOConfig+0x64>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_RCC_MCOConfig+0x64>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ec:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_RCC_MCOConfig+0x64>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80022f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002318:	f7fe fc1e 	bl	8000b58 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_MCOConfig+0x64>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	430b      	orrs	r3, r1
 800232a:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_MCOConfig+0x64>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234a:	4b3e      	ldr	r3, [pc, #248]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002354:	4b3b      	ldr	r3, [pc, #236]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d121      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11e      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002370:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237c:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002398:	4a2b      	ldr	r2, [pc, #172]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b4:	4b25      	ldr	r3, [pc, #148]	@ (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c0:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x114>)
 80023c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d134      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d003      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0xac>
 80023e0:	e005      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e4:	617b      	str	r3, [r7, #20]
      break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	617b      	str	r3, [r7, #20]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	fb03 f202 	mul.w	r2, r3, r2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800241a:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	0e5b      	lsrs	r3, r3, #25
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	3301      	adds	r3, #1
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002434:	69bb      	ldr	r3, [r7, #24]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	080039ec 	.word	0x080039ec
 800244c:	00f42400 	.word	0x00f42400
 8002450:	007a1200 	.word	0x007a1200

08002454 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002460:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800246c:	f7ff f9f2 	bl	8001854 <HAL_PWREx_GetVoltageRange>
 8002470:	6178      	str	r0, [r7, #20]
 8002472:	e014      	b.n	800249e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002478:	4a24      	ldr	r2, [pc, #144]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002480:	4b22      	ldr	r3, [pc, #136]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800248c:	f7ff f9e2 	bl	8001854 <HAL_PWREx_GetVoltageRange>
 8002490:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024a4:	d10b      	bne.n	80024be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b80      	cmp	r3, #128	@ 0x80
 80024aa:	d919      	bls.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80024b0:	d902      	bls.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024b2:	2302      	movs	r3, #2
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e013      	b.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b8:	2301      	movs	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e010      	b.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b80      	cmp	r3, #128	@ 0x80
 80024c2:	d902      	bls.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024c4:	2303      	movs	r3, #3
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e00a      	b.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b80      	cmp	r3, #128	@ 0x80
 80024ce:	d102      	bne.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024d0:	2302      	movs	r3, #2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e004      	b.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b70      	cmp	r3, #112	@ 0x70
 80024da:	d101      	bne.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024dc:	2301      	movs	r3, #1
 80024de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 0207 	bic.w	r2, r3, #7
 80024e8:	4909      	ldr	r1, [pc, #36]	@ (8002510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	40022000 	.word	0x40022000

08002514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800251c:	2300      	movs	r3, #0
 800251e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002520:	2300      	movs	r3, #0
 8002522:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d041      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002534:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002538:	d02a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800253a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800253e:	d824      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002546:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800254a:	d81e      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002554:	d010      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002556:	e018      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002558:	4b86      	ldr	r3, [pc, #536]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a85      	ldr	r2, [pc, #532]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002562:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002564:	e015      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fabb 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002576:	e00c      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3320      	adds	r3, #32
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fba6 	bl	8002cd0 <RCCEx_PLLSAI2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002588:	e003      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	74fb      	strb	r3, [r7, #19]
      break;
 800258e:	e000      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002598:	4b76      	ldr	r3, [pc, #472]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a6:	4973      	ldr	r1, [pc, #460]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ae:	e001      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d041      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025c8:	d02a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025ce:	d824      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025da:	d81e      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e4:	d010      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025e6:	e018      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025e8:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a61      	ldr	r2, [pc, #388]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f4:	e015      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fa73 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002606:	e00c      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3320      	adds	r3, #32
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fb5e 	bl	8002cd0 <RCCEx_PLLSAI2_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002618:	e003      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	74fb      	strb	r3, [r7, #19]
      break;
 800261e:	e000      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002628:	4b52      	ldr	r3, [pc, #328]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002636:	494f      	ldr	r1, [pc, #316]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800263e:	e001      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a0 	beq.w	8002792 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b41      	ldr	r3, [pc, #260]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	4a40      	ldr	r2, [pc, #256]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	@ 0x58
 8002678:	4b3e      	ldr	r3, [pc, #248]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002684:	2301      	movs	r3, #1
 8002686:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002688:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3a      	ldr	r2, [pc, #232]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002692:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002694:	f7fe f94a 	bl	800092c <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800269a:	e009      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269c:	f7fe f946 	bl	800092c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d902      	bls.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	74fb      	strb	r3, [r7, #19]
        break;
 80026ae:	e005      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b0:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ef      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d15c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01f      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d019      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	4a20      	ldr	r2, [pc, #128]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800270c:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe f905 	bl	800092c <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002724:	e00b      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe f901 	bl	800092c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d902      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	74fb      	strb	r3, [r7, #19]
            break;
 800273c:	e006      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ec      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002752:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002762:	4904      	ldr	r1, [pc, #16]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800276a:	e009      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
 8002770:	e006      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002780:	7c7b      	ldrb	r3, [r7, #17]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d105      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b9e      	ldr	r3, [pc, #632]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	4a9d      	ldr	r2, [pc, #628]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279e:	4b98      	ldr	r3, [pc, #608]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a4:	f023 0203 	bic.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	4994      	ldr	r1, [pc, #592]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c6:	f023 020c 	bic.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	498c      	ldr	r1, [pc, #560]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e2:	4b87      	ldr	r3, [pc, #540]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4983      	ldr	r1, [pc, #524]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002804:	4b7e      	ldr	r3, [pc, #504]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	497b      	ldr	r1, [pc, #492]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002826:	4b76      	ldr	r3, [pc, #472]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002834:	4972      	ldr	r1, [pc, #456]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002848:	4b6d      	ldr	r3, [pc, #436]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	496a      	ldr	r1, [pc, #424]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800286a:	4b65      	ldr	r3, [pc, #404]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	4961      	ldr	r1, [pc, #388]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800288c:	4b5c      	ldr	r3, [pc, #368]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	4959      	ldr	r1, [pc, #356]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ae:	4b54      	ldr	r3, [pc, #336]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028bc:	4950      	ldr	r1, [pc, #320]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	4948      	ldr	r1, [pc, #288]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028f2:	4b43      	ldr	r3, [pc, #268]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	493f      	ldr	r1, [pc, #252]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d028      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002914:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002922:	4937      	ldr	r1, [pc, #220]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002932:	d106      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b32      	ldr	r3, [pc, #200]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a31      	ldr	r2, [pc, #196]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
 8002940:	e011      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002946:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800294a:	d10c      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f8c8 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002972:	4b23      	ldr	r3, [pc, #140]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	491f      	ldr	r1, [pc, #124]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002990:	d106      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002992:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299c:	60d3      	str	r3, [r2, #12]
 800299e:	e011      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f899 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02b      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029de:	4908      	ldr	r1, [pc, #32]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ee:	d109      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a02      	ldr	r2, [pc, #8]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
 80029fc:	e014      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 f867 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d02f      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a42:	4928      	ldr	r1, [pc, #160]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f844 	bl	8002ae8 <RCCEx_PLLSAI1_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d014      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	74bb      	strb	r3, [r7, #18]
 8002a6e:	e011      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3320      	adds	r3, #32
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f925 	bl	8002cd0 <RCCEx_PLLSAI2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aa0:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aae:	490d      	ldr	r1, [pc, #52]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad2:	4904      	ldr	r1, [pc, #16]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ada:	7cbb      	ldrb	r3, [r7, #18]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002af6:	4b75      	ldr	r3, [pc, #468]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d018      	beq.n	8002b34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10d      	bne.n	8002b2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
       ||
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
       ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d047      	beq.n	8002bbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e044      	b.n	8002bbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d018      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0x86>
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d825      	bhi.n	8002b8c <RCCEx_PLLSAI1_Config+0xa4>
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d002      	beq.n	8002b4a <RCCEx_PLLSAI1_Config+0x62>
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d009      	beq.n	8002b5c <RCCEx_PLLSAI1_Config+0x74>
 8002b48:	e020      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11d      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e01a      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e013      	b.n	8002b96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b6e:	4b57      	ldr	r3, [pc, #348]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7a:	4b54      	ldr	r3, [pc, #336]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8a:	e006      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e004      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b92:	bf00      	nop
 8002b94:	e002      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10d      	bne.n	8002bbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	4944      	ldr	r1, [pc, #272]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d17d      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bc4:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fd feac 	bl	800092c <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd6:	e009      	b.n	8002bec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd8:	f7fd fea8 	bl	800092c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bea:	e005      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d160      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	0211      	lsls	r1, r2, #8
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	0912      	lsrs	r2, r2, #4
 8002c1c:	0452      	lsls	r2, r2, #17
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	492a      	ldr	r1, [pc, #168]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
 8002c26:	e027      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d112      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c2e:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	0211      	lsls	r1, r2, #8
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6912      	ldr	r2, [r2, #16]
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	491f      	ldr	r1, [pc, #124]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	610b      	str	r3, [r1, #16]
 8002c52:	e011      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6952      	ldr	r2, [r2, #20]
 8002c6a:	0852      	lsrs	r2, r2, #1
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0652      	lsls	r2, r2, #25
 8002c70:	430a      	orrs	r2, r1
 8002c72:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fd fe52 	bl	800092c <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c8c:	f7fd fe4e 	bl	800092c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4904      	ldr	r1, [pc, #16]	@ (8002ccc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cde:	4b6a      	ldr	r3, [pc, #424]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cea:	4b67      	ldr	r3, [pc, #412]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d10d      	bne.n	8002d16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d02:	4b61      	ldr	r3, [pc, #388]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
       ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d047      	beq.n	8002da6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e044      	b.n	8002da6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d018      	beq.n	8002d56 <RCCEx_PLLSAI2_Config+0x86>
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d825      	bhi.n	8002d74 <RCCEx_PLLSAI2_Config+0xa4>
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d002      	beq.n	8002d32 <RCCEx_PLLSAI2_Config+0x62>
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d009      	beq.n	8002d44 <RCCEx_PLLSAI2_Config+0x74>
 8002d30:	e020      	b.n	8002d74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d32:	4b55      	ldr	r3, [pc, #340]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11d      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e01a      	b.n	8002d7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d44:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d54:	e013      	b.n	8002d7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d56:	4b4c      	ldr	r3, [pc, #304]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d62:	4b49      	ldr	r3, [pc, #292]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d72:	e006      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e004      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6819      	ldr	r1, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	4939      	ldr	r1, [pc, #228]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d167      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a35      	ldr	r2, [pc, #212]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fd fdb8 	bl	800092c <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dbe:	e009      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc0:	f7fd fdb4 	bl	800092c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d902      	bls.n	8002dd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd2:	e005      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ef      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d14a      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dec:	4b26      	ldr	r3, [pc, #152]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6892      	ldr	r2, [r2, #8]
 8002dfc:	0211      	lsls	r1, r2, #8
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	0912      	lsrs	r2, r2, #4
 8002e04:	0452      	lsls	r2, r2, #17
 8002e06:	430a      	orrs	r2, r1
 8002e08:	491f      	ldr	r1, [pc, #124]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	614b      	str	r3, [r1, #20]
 8002e0e:	e011      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	0211      	lsls	r1, r2, #8
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6912      	ldr	r2, [r2, #16]
 8002e26:	0852      	lsrs	r2, r2, #1
 8002e28:	3a01      	subs	r2, #1
 8002e2a:	0652      	lsls	r2, r2, #25
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	4916      	ldr	r1, [pc, #88]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd fd74 	bl	800092c <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e46:	e009      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e48:	f7fd fd70 	bl	800092c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	73fb      	strb	r3, [r7, #15]
          break;
 8002e5a:	e005      	b.n	8002e68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4904      	ldr	r1, [pc, #16]	@ (8002e88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000

08002e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e049      	b.n	8002f32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fc0c 	bl	80006d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 f94a 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ff      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b14      	cmp	r3, #20
 8002f66:	f200 80f0 	bhi.w	800314a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	0800314b 	.word	0x0800314b
 8002f78:	0800314b 	.word	0x0800314b
 8002f7c:	0800314b 	.word	0x0800314b
 8002f80:	08003005 	.word	0x08003005
 8002f84:	0800314b 	.word	0x0800314b
 8002f88:	0800314b 	.word	0x0800314b
 8002f8c:	0800314b 	.word	0x0800314b
 8002f90:	08003047 	.word	0x08003047
 8002f94:	0800314b 	.word	0x0800314b
 8002f98:	0800314b 	.word	0x0800314b
 8002f9c:	0800314b 	.word	0x0800314b
 8002fa0:	08003087 	.word	0x08003087
 8002fa4:	0800314b 	.word	0x0800314b
 8002fa8:	0800314b 	.word	0x0800314b
 8002fac:	0800314b 	.word	0x0800314b
 8002fb0:	080030c9 	.word	0x080030c9
 8002fb4:	0800314b 	.word	0x0800314b
 8002fb8:	0800314b 	.word	0x0800314b
 8002fbc:	0800314b 	.word	0x0800314b
 8002fc0:	08003109 	.word	0x08003109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f970 	bl	80032b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0208 	orr.w	r2, r2, #8
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	619a      	str	r2, [r3, #24]
      break;
 8003002:	e0a5      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9e0 	bl	80033d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
      break;
 8003044:	e084      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa49 	bl	80034e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0208 	orr.w	r2, r2, #8
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0204 	bic.w	r2, r2, #4
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
      break;
 8003084:	e064      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fab1 	bl	80035f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	021a      	lsls	r2, r3, #8
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
      break;
 80030c6:	e043      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fafa 	bl	80036c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003106:	e023      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb3e 	bl	8003790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003148:	e002      	b.n	8003150 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
      break;
 800314e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a46      	ldr	r2, [pc, #280]	@ (8003290 <TIM_Base_SetConfig+0x12c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d00f      	beq.n	80031a4 <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <TIM_Base_SetConfig+0x130>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00b      	beq.n	80031a4 <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a42      	ldr	r2, [pc, #264]	@ (8003298 <TIM_Base_SetConfig+0x134>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a41      	ldr	r2, [pc, #260]	@ (800329c <TIM_Base_SetConfig+0x138>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_Base_SetConfig+0x40>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a40      	ldr	r2, [pc, #256]	@ (80032a0 <TIM_Base_SetConfig+0x13c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a35      	ldr	r2, [pc, #212]	@ (8003290 <TIM_Base_SetConfig+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c4:	d01b      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a32      	ldr	r2, [pc, #200]	@ (8003294 <TIM_Base_SetConfig+0x130>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d017      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a31      	ldr	r2, [pc, #196]	@ (8003298 <TIM_Base_SetConfig+0x134>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a30      	ldr	r2, [pc, #192]	@ (800329c <TIM_Base_SetConfig+0x138>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2f      	ldr	r2, [pc, #188]	@ (80032a0 <TIM_Base_SetConfig+0x13c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	@ (80032a4 <TIM_Base_SetConfig+0x140>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2d      	ldr	r2, [pc, #180]	@ (80032a8 <TIM_Base_SetConfig+0x144>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x9a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2c      	ldr	r2, [pc, #176]	@ (80032ac <TIM_Base_SetConfig+0x148>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a16      	ldr	r2, [pc, #88]	@ (8003290 <TIM_Base_SetConfig+0x12c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00f      	beq.n	800325c <TIM_Base_SetConfig+0xf8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <TIM_Base_SetConfig+0x13c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_Base_SetConfig+0xf8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <TIM_Base_SetConfig+0x140>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_Base_SetConfig+0xf8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a16      	ldr	r2, [pc, #88]	@ (80032a8 <TIM_Base_SetConfig+0x144>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0xf8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <TIM_Base_SetConfig+0x148>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
  }
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40013400 	.word	0x40013400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40014400 	.word	0x40014400
 80032ac:	40014800 	.word	0x40014800

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f023 0201 	bic.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 0302 	bic.w	r3, r3, #2
 80032fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <TIM_OC1_SetConfig+0x10c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00f      	beq.n	8003330 <TIM_OC1_SetConfig+0x80>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <TIM_OC1_SetConfig+0x110>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_OC1_SetConfig+0x80>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <TIM_OC1_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_OC1_SetConfig+0x80>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <TIM_OC1_SetConfig+0x118>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_OC1_SetConfig+0x80>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <TIM_OC1_SetConfig+0x11c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10c      	bne.n	800334a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0308 	bic.w	r3, r3, #8
 8003336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <TIM_OC1_SetConfig+0x10c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00f      	beq.n	8003372 <TIM_OC1_SetConfig+0xc2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <TIM_OC1_SetConfig+0x110>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00b      	beq.n	8003372 <TIM_OC1_SetConfig+0xc2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <TIM_OC1_SetConfig+0x114>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <TIM_OC1_SetConfig+0xc2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	@ (80033c8 <TIM_OC1_SetConfig+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC1_SetConfig+0xc2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <TIM_OC1_SetConfig+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d111      	bne.n	8003396 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	621a      	str	r2, [r3, #32]
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800

080033d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0320 	bic.w	r3, r3, #32
 800341e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a28      	ldr	r2, [pc, #160]	@ (80034d0 <TIM_OC2_SetConfig+0x100>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC2_SetConfig+0x6c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a27      	ldr	r2, [pc, #156]	@ (80034d4 <TIM_OC2_SetConfig+0x104>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d10d      	bne.n	8003458 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <TIM_OC2_SetConfig+0x100>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00f      	beq.n	8003480 <TIM_OC2_SetConfig+0xb0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a1c      	ldr	r2, [pc, #112]	@ (80034d4 <TIM_OC2_SetConfig+0x104>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_OC2_SetConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <TIM_OC2_SetConfig+0x108>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_OC2_SetConfig+0xb0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1a      	ldr	r2, [pc, #104]	@ (80034dc <TIM_OC2_SetConfig+0x10c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_OC2_SetConfig+0xb0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <TIM_OC2_SetConfig+0x110>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d113      	bne.n	80034a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800348e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <TIM_OC3_SetConfig+0xfc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_OC3_SetConfig+0x6a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <TIM_OC3_SetConfig+0x100>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <TIM_OC3_SetConfig+0xfc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00f      	beq.n	8003592 <TIM_OC3_SetConfig+0xae>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <TIM_OC3_SetConfig+0x100>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00b      	beq.n	8003592 <TIM_OC3_SetConfig+0xae>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <TIM_OC3_SetConfig+0x104>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_OC3_SetConfig+0xae>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <TIM_OC3_SetConfig+0x108>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_OC3_SetConfig+0xae>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <TIM_OC3_SetConfig+0x10c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d113      	bne.n	80035ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800

080035f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a18      	ldr	r2, [pc, #96]	@ (80036b4 <TIM_OC4_SetConfig+0xc0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_OC4_SetConfig+0x84>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <TIM_OC4_SetConfig+0xc4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_OC4_SetConfig+0x84>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a16      	ldr	r2, [pc, #88]	@ (80036bc <TIM_OC4_SetConfig+0xc8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_OC4_SetConfig+0x84>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a15      	ldr	r2, [pc, #84]	@ (80036c0 <TIM_OC4_SetConfig+0xcc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_OC4_SetConfig+0x84>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a14      	ldr	r2, [pc, #80]	@ (80036c4 <TIM_OC4_SetConfig+0xd0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d109      	bne.n	800368c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800367e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40013400 	.word	0x40013400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800

080036c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800370c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a17      	ldr	r2, [pc, #92]	@ (800377c <TIM_OC5_SetConfig+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00f      	beq.n	8003742 <TIM_OC5_SetConfig+0x7a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a16      	ldr	r2, [pc, #88]	@ (8003780 <TIM_OC5_SetConfig+0xb8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00b      	beq.n	8003742 <TIM_OC5_SetConfig+0x7a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <TIM_OC5_SetConfig+0xbc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <TIM_OC5_SetConfig+0x7a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <TIM_OC5_SetConfig+0xc0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_OC5_SetConfig+0x7a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a13      	ldr	r2, [pc, #76]	@ (800378c <TIM_OC5_SetConfig+0xc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d109      	bne.n	8003756 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003748:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	051b      	lsls	r3, r3, #20
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <TIM_OC6_SetConfig+0xb8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00f      	beq.n	800380c <TIM_OC6_SetConfig+0x7c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a17      	ldr	r2, [pc, #92]	@ (800384c <TIM_OC6_SetConfig+0xbc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_OC6_SetConfig+0x7c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a16      	ldr	r2, [pc, #88]	@ (8003850 <TIM_OC6_SetConfig+0xc0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_OC6_SetConfig+0x7c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a15      	ldr	r2, [pc, #84]	@ (8003854 <TIM_OC6_SetConfig+0xc4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_OC6_SetConfig+0x7c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <TIM_OC6_SetConfig+0xc8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d109      	bne.n	8003820 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	029b      	lsls	r3, r3, #10
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e068      	b.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2e      	ldr	r2, [pc, #184]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d108      	bne.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d018      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10c      	bne.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4313      	orrs	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40014000 	.word	0x40014000

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4d0d      	ldr	r5, [pc, #52]	@ (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	@ (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2600      	movs	r6, #0
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4d0b      	ldr	r5, [pc, #44]	@ (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	@ (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 f818 	bl	80039c4 <_init>
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2600      	movs	r6, #0
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08003a1c 	.word	0x08003a1c
 80039b8:	08003a1c 	.word	0x08003a1c
 80039bc:	08003a1c 	.word	0x08003a1c
 80039c0:	08003a20 	.word	0x08003a20

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr
